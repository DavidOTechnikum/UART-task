
uart-task-oberleitner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  08005fb8  08005fb8  00015fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800621c  0800621c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800621c  0800621c  0001621c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006224  08006224  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006224  08006224  00016224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006228  08006228  00016228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800622c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  20000068  08006294  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  08006294  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001266d  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a5a  00000000  00000000  00032748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  000351a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d60  00000000  00000000  000362e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000224d6  00000000  00000000  00037048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000147b1  00000000  00000000  0005951e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc435  00000000  00000000  0006dccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000053b0  00000000  00000000  0013a104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0013f4b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005fa0 	.word	0x08005fa0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005fa0 	.word	0x08005fa0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <frame_check>:

#include "frame.h"
char return_string[RETSTRINGLEN];
//uint32_t random_number = 0;

bool frame_check(char* frame) {
 800059c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80005a0:	b08b      	sub	sp, #44	; 0x2c
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
 80005a6:	466b      	mov	r3, sp
 80005a8:	461e      	mov	r6, r3
	char first_part[strlen(frame)];
 80005aa:	6878      	ldr	r0, [r7, #4]
 80005ac:	f7ff fe1a 	bl	80001e4 <strlen>
 80005b0:	4601      	mov	r1, r0
 80005b2:	460b      	mov	r3, r1
 80005b4:	3b01      	subs	r3, #1
 80005b6:	627b      	str	r3, [r7, #36]	; 0x24
 80005b8:	2300      	movs	r3, #0
 80005ba:	4688      	mov	r8, r1
 80005bc:	4699      	mov	r9, r3
 80005be:	f04f 0200 	mov.w	r2, #0
 80005c2:	f04f 0300 	mov.w	r3, #0
 80005c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80005ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80005ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80005d2:	2300      	movs	r3, #0
 80005d4:	460c      	mov	r4, r1
 80005d6:	461d      	mov	r5, r3
 80005d8:	f04f 0200 	mov.w	r2, #0
 80005dc:	f04f 0300 	mov.w	r3, #0
 80005e0:	00eb      	lsls	r3, r5, #3
 80005e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80005e6:	00e2      	lsls	r2, r4, #3
 80005e8:	1dcb      	adds	r3, r1, #7
 80005ea:	08db      	lsrs	r3, r3, #3
 80005ec:	00db      	lsls	r3, r3, #3
 80005ee:	ebad 0d03 	sub.w	sp, sp, r3
 80005f2:	466b      	mov	r3, sp
 80005f4:	3300      	adds	r3, #0
 80005f6:	623b      	str	r3, [r7, #32]
	strcpy(first_part, frame);
 80005f8:	6879      	ldr	r1, [r7, #4]
 80005fa:	6a38      	ldr	r0, [r7, #32]
 80005fc:	f004 fcea 	bl	8004fd4 <strcpy>
	char *third_part;
	int interval_low;
	int interval_high;
	char *ptr;

	if (frame[0] != '#') {
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b23      	cmp	r3, #35	; 0x23
 8000606:	d001      	beq.n	800060c <frame_check+0x70>
		return false;
 8000608:	2300      	movs	r3, #0
 800060a:	e059      	b.n	80006c0 <frame_check+0x124>
	}
	if (frame[1] != 'r') {
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	3301      	adds	r3, #1
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b72      	cmp	r3, #114	; 0x72
 8000614:	d001      	beq.n	800061a <frame_check+0x7e>
		return false;
 8000616:	2300      	movs	r3, #0
 8000618:	e052      	b.n	80006c0 <frame_check+0x124>
	}
	if (frame[2] != ',') {
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	3302      	adds	r3, #2
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b2c      	cmp	r3, #44	; 0x2c
 8000622:	d001      	beq.n	8000628 <frame_check+0x8c>
		return false;
 8000624:	2300      	movs	r3, #0
 8000626:	e04b      	b.n	80006c0 <frame_check+0x124>
	}
	if ((strtok(first_part, ",")) == NULL) {
 8000628:	4928      	ldr	r1, [pc, #160]	; (80006cc <frame_check+0x130>)
 800062a:	6a38      	ldr	r0, [r7, #32]
 800062c:	f004 fc04 	bl	8004e38 <strtok>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d101      	bne.n	800063a <frame_check+0x9e>
		return false;
 8000636:	2300      	movs	r3, #0
 8000638:	e042      	b.n	80006c0 <frame_check+0x124>
	}

	if ((second_part = strtok(NULL, ":")) == NULL) {
 800063a:	4925      	ldr	r1, [pc, #148]	; (80006d0 <frame_check+0x134>)
 800063c:	2000      	movs	r0, #0
 800063e:	f004 fbfb 	bl	8004e38 <strtok>
 8000642:	61f8      	str	r0, [r7, #28]
 8000644:	69fb      	ldr	r3, [r7, #28]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d101      	bne.n	800064e <frame_check+0xb2>
		return false;
 800064a:	2300      	movs	r3, #0
 800064c:	e038      	b.n	80006c0 <frame_check+0x124>
	}
	if ((third_part = strtok(NULL, "\n")) == NULL) {
 800064e:	4921      	ldr	r1, [pc, #132]	; (80006d4 <frame_check+0x138>)
 8000650:	2000      	movs	r0, #0
 8000652:	f004 fbf1 	bl	8004e38 <strtok>
 8000656:	61b8      	str	r0, [r7, #24]
 8000658:	69bb      	ldr	r3, [r7, #24]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d101      	bne.n	8000662 <frame_check+0xc6>
		return false;
 800065e:	2300      	movs	r3, #0
 8000660:	e02e      	b.n	80006c0 <frame_check+0x124>
	}
	interval_low = strtol(second_part, &ptr, 10);
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	220a      	movs	r2, #10
 8000668:	4619      	mov	r1, r3
 800066a:	69f8      	ldr	r0, [r7, #28]
 800066c:	f004 faaa 	bl	8004bc4 <strtol>
 8000670:	6178      	str	r0, [r7, #20]
	if (ptr == second_part) {
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	69fa      	ldr	r2, [r7, #28]
 8000676:	429a      	cmp	r2, r3
 8000678:	d101      	bne.n	800067e <frame_check+0xe2>
		return false;
 800067a:	2300      	movs	r3, #0
 800067c:	e020      	b.n	80006c0 <frame_check+0x124>
	}
	interval_high = strtol(third_part, &ptr, 10);
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	220a      	movs	r2, #10
 8000684:	4619      	mov	r1, r3
 8000686:	69b8      	ldr	r0, [r7, #24]
 8000688:	f004 fa9c 	bl	8004bc4 <strtol>
 800068c:	6138      	str	r0, [r7, #16]
	if (ptr == third_part) {
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	69ba      	ldr	r2, [r7, #24]
 8000692:	429a      	cmp	r2, r3
 8000694:	d101      	bne.n	800069a <frame_check+0xfe>
		return false;
 8000696:	2300      	movs	r3, #0
 8000698:	e012      	b.n	80006c0 <frame_check+0x124>
	}
	if (frame[strlen(frame)-1] != '\n') {
 800069a:	6878      	ldr	r0, [r7, #4]
 800069c:	f7ff fda2 	bl	80001e4 <strlen>
 80006a0:	4603      	mov	r3, r0
 80006a2:	3b01      	subs	r3, #1
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	4413      	add	r3, r2
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b0a      	cmp	r3, #10
 80006ac:	d001      	beq.n	80006b2 <frame_check+0x116>
		return false;
 80006ae:	2300      	movs	r3, #0
 80006b0:	e006      	b.n	80006c0 <frame_check+0x124>
	}
	if (interval_low > interval_high || interval_low < INT_MIN || interval_low > INT_MAX || interval_high < INT_MIN || interval_high > INT_MAX) {
 80006b2:	697a      	ldr	r2, [r7, #20]
 80006b4:	693b      	ldr	r3, [r7, #16]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	dd01      	ble.n	80006be <frame_check+0x122>
		return false;
 80006ba:	2300      	movs	r3, #0
 80006bc:	e000      	b.n	80006c0 <frame_check+0x124>
	}

	return true;
 80006be:	2301      	movs	r3, #1
 80006c0:	46b5      	mov	sp, r6
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	372c      	adds	r7, #44	; 0x2c
 80006c6:	46bd      	mov	sp, r7
 80006c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80006cc:	08005fb8 	.word	0x08005fb8
 80006d0:	08005fbc 	.word	0x08005fbc
 80006d4:	08005fc0 	.word	0x08005fc0

080006d8 <frame_number_gen>:


char* frame_number_gen(char* frame, RNG_HandleTypeDef hrng) {
 80006d8:	b084      	sub	sp, #16
 80006da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80006de:	b08b      	sub	sp, #44	; 0x2c
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80006e8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80006ec:	466b      	mov	r3, sp
 80006ee:	461e      	mov	r6, r3
	char first_part[strlen(frame)];
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f7ff fd77 	bl	80001e4 <strlen>
 80006f6:	4601      	mov	r1, r0
 80006f8:	460b      	mov	r3, r1
 80006fa:	3b01      	subs	r3, #1
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
 80006fe:	2300      	movs	r3, #0
 8000700:	4688      	mov	r8, r1
 8000702:	4699      	mov	r9, r3
 8000704:	f04f 0200 	mov.w	r2, #0
 8000708:	f04f 0300 	mov.w	r3, #0
 800070c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000710:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000714:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000718:	2300      	movs	r3, #0
 800071a:	460c      	mov	r4, r1
 800071c:	461d      	mov	r5, r3
 800071e:	f04f 0200 	mov.w	r2, #0
 8000722:	f04f 0300 	mov.w	r3, #0
 8000726:	00eb      	lsls	r3, r5, #3
 8000728:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800072c:	00e2      	lsls	r2, r4, #3
 800072e:	1dcb      	adds	r3, r1, #7
 8000730:	08db      	lsrs	r3, r3, #3
 8000732:	00db      	lsls	r3, r3, #3
 8000734:	ebad 0d03 	sub.w	sp, sp, r3
 8000738:	466b      	mov	r3, sp
 800073a:	3300      	adds	r3, #0
 800073c:	623b      	str	r3, [r7, #32]
	strcpy(first_part, frame);
 800073e:	6879      	ldr	r1, [r7, #4]
 8000740:	6a38      	ldr	r0, [r7, #32]
 8000742:	f004 fc47 	bl	8004fd4 <strcpy>
	char *second_part;
	char *third_part;
	int interval_low;
	int interval_high;
	char *ptr;
	uint32_t random_number = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]

	if (frame[0] != '#') {
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b23      	cmp	r3, #35	; 0x23
 8000750:	d001      	beq.n	8000756 <frame_number_gen+0x7e>
		return false;
 8000752:	2300      	movs	r3, #0
 8000754:	e079      	b.n	800084a <frame_number_gen+0x172>
	}
	if (frame[1] != 'r') {
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	3301      	adds	r3, #1
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b72      	cmp	r3, #114	; 0x72
 800075e:	d001      	beq.n	8000764 <frame_number_gen+0x8c>
		return false;
 8000760:	2300      	movs	r3, #0
 8000762:	e072      	b.n	800084a <frame_number_gen+0x172>
	}
	if (frame[2] != ',') {
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3302      	adds	r3, #2
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b2c      	cmp	r3, #44	; 0x2c
 800076c:	d001      	beq.n	8000772 <frame_number_gen+0x9a>
		return false;
 800076e:	2300      	movs	r3, #0
 8000770:	e06b      	b.n	800084a <frame_number_gen+0x172>
	}
	if ((strtok(first_part, ",")) == NULL) {
 8000772:	493a      	ldr	r1, [pc, #232]	; (800085c <frame_number_gen+0x184>)
 8000774:	6a38      	ldr	r0, [r7, #32]
 8000776:	f004 fb5f 	bl	8004e38 <strtok>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d101      	bne.n	8000784 <frame_number_gen+0xac>
		return false;
 8000780:	2300      	movs	r3, #0
 8000782:	e062      	b.n	800084a <frame_number_gen+0x172>
	}

	if ((second_part = strtok(NULL, ":")) == NULL) {
 8000784:	4936      	ldr	r1, [pc, #216]	; (8000860 <frame_number_gen+0x188>)
 8000786:	2000      	movs	r0, #0
 8000788:	f004 fb56 	bl	8004e38 <strtok>
 800078c:	61f8      	str	r0, [r7, #28]
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d101      	bne.n	8000798 <frame_number_gen+0xc0>
		return false;
 8000794:	2300      	movs	r3, #0
 8000796:	e058      	b.n	800084a <frame_number_gen+0x172>
	}
	if ((third_part = strtok(NULL, "\n")) == NULL) {
 8000798:	4932      	ldr	r1, [pc, #200]	; (8000864 <frame_number_gen+0x18c>)
 800079a:	2000      	movs	r0, #0
 800079c:	f004 fb4c 	bl	8004e38 <strtok>
 80007a0:	61b8      	str	r0, [r7, #24]
 80007a2:	69bb      	ldr	r3, [r7, #24]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d101      	bne.n	80007ac <frame_number_gen+0xd4>
		return false;
 80007a8:	2300      	movs	r3, #0
 80007aa:	e04e      	b.n	800084a <frame_number_gen+0x172>
	}
	interval_low = strtol(second_part, &ptr, 10);
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	220a      	movs	r2, #10
 80007b2:	4619      	mov	r1, r3
 80007b4:	69f8      	ldr	r0, [r7, #28]
 80007b6:	f004 fa05 	bl	8004bc4 <strtol>
 80007ba:	6178      	str	r0, [r7, #20]
	if (ptr == second_part) {
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	69fa      	ldr	r2, [r7, #28]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d101      	bne.n	80007c8 <frame_number_gen+0xf0>
		return false;
 80007c4:	2300      	movs	r3, #0
 80007c6:	e040      	b.n	800084a <frame_number_gen+0x172>
	}
	interval_high = strtol(third_part, &ptr, 10);
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	220a      	movs	r2, #10
 80007ce:	4619      	mov	r1, r3
 80007d0:	69b8      	ldr	r0, [r7, #24]
 80007d2:	f004 f9f7 	bl	8004bc4 <strtol>
 80007d6:	6138      	str	r0, [r7, #16]
	if (ptr == third_part) {
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	69ba      	ldr	r2, [r7, #24]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d101      	bne.n	80007e4 <frame_number_gen+0x10c>
		return false;
 80007e0:	2300      	movs	r3, #0
 80007e2:	e032      	b.n	800084a <frame_number_gen+0x172>
	}
	if (frame[strlen(frame)-1] != '\n') {
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f7ff fcfd 	bl	80001e4 <strlen>
 80007ea:	4603      	mov	r3, r0
 80007ec:	3b01      	subs	r3, #1
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	4413      	add	r3, r2
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b0a      	cmp	r3, #10
 80007f6:	d001      	beq.n	80007fc <frame_number_gen+0x124>
		return false;
 80007f8:	2300      	movs	r3, #0
 80007fa:	e026      	b.n	800084a <frame_number_gen+0x172>
	}
	if (interval_low > interval_high) {
 80007fc:	697a      	ldr	r2, [r7, #20]
 80007fe:	693b      	ldr	r3, [r7, #16]
 8000800:	429a      	cmp	r2, r3
 8000802:	dd01      	ble.n	8000808 <frame_number_gen+0x130>
		return false;
 8000804:	2300      	movs	r3, #0
 8000806:	e020      	b.n	800084a <frame_number_gen+0x172>
	}

	HAL_RNG_GenerateRandomNumber(&hrng, &random_number);
 8000808:	f107 0208 	add.w	r2, r7, #8
 800080c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000810:	4611      	mov	r1, r2
 8000812:	4618      	mov	r0, r3
 8000814:	f002 fad5 	bl	8002dc2 <HAL_RNG_GenerateRandomNumber>
	random_number = (random_number % (1 + interval_high - interval_low)) + interval_low;
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	693a      	ldr	r2, [r7, #16]
 800081c:	1c51      	adds	r1, r2, #1
 800081e:	697a      	ldr	r2, [r7, #20]
 8000820:	1a8a      	subs	r2, r1, r2
 8000822:	fbb3 f1f2 	udiv	r1, r3, r2
 8000826:	fb01 f202 	mul.w	r2, r1, r2
 800082a:	1a9a      	subs	r2, r3, r2
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	4413      	add	r3, r2
 8000830:	60bb      	str	r3, [r7, #8]


	if ((snprintf(return_string, RETSTRINGLEN-1, "#a,%d\n", (int)random_number)) < 0) {
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	4a0c      	ldr	r2, [pc, #48]	; (8000868 <frame_number_gen+0x190>)
 8000836:	2113      	movs	r1, #19
 8000838:	480c      	ldr	r0, [pc, #48]	; (800086c <frame_number_gen+0x194>)
 800083a:	f004 fa7d 	bl	8004d38 <sniprintf>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	da01      	bge.n	8000848 <frame_number_gen+0x170>
		Error_Handler();
 8000844:	f000 faf7 	bl	8000e36 <Error_Handler>
	}

	return return_string;
 8000848:	4b08      	ldr	r3, [pc, #32]	; (800086c <frame_number_gen+0x194>)
 800084a:	46b5      	mov	sp, r6
}
 800084c:	4618      	mov	r0, r3
 800084e:	372c      	adds	r7, #44	; 0x2c
 8000850:	46bd      	mov	sp, r7
 8000852:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000856:	b004      	add	sp, #16
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	08005fb8 	.word	0x08005fb8
 8000860:	08005fbc 	.word	0x08005fbc
 8000864:	08005fc0 	.word	0x08005fc0
 8000868:	08005fc4 	.word	0x08005fc4
 800086c:	20000084 	.word	0x20000084

08000870 <ack_check>:

bool ack_check(char* frame) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	if (strcmp(frame, "ACK\n") == 0) {
 8000878:	4906      	ldr	r1, [pc, #24]	; (8000894 <ack_check+0x24>)
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff fca8 	bl	80001d0 <strcmp>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d101      	bne.n	800088a <ack_check+0x1a>
		return true;
 8000886:	2301      	movs	r3, #1
 8000888:	e000      	b.n	800088c <ack_check+0x1c>
	} else {
		return false;
 800088a:	2300      	movs	r3, #0
	}
}
 800088c:	4618      	mov	r0, r3
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	08005fcc 	.word	0x08005fcc

08000898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800089e:	f000 fd0e 	bl	80012be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a2:	f000 f8f7 	bl	8000a94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a6:	f000 f9d3 	bl	8000c50 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008aa:	f000 f9a1 	bl	8000bf0 <MX_USART2_UART_Init>
  MX_RNG_Init();
 80008ae:	f000 f953 	bl	8000b58 <MX_RNG_Init>
  MX_TIM6_Init();
 80008b2:	f000 f965 	bl	8000b80 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);	// green
 80008b6:	2201      	movs	r2, #1
 80008b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c0:	f001 f86c 	bl	800199c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);	// red
 80008c4:	2201      	movs	r2, #1
 80008c6:	2140      	movs	r1, #64	; 0x40
 80008c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008cc:	f001 f866 	bl	800199c <HAL_GPIO_WritePin>
  char *readyMsg = "\n\nREADY\n";
 80008d0:	4b65      	ldr	r3, [pc, #404]	; (8000a68 <main+0x1d0>)
 80008d2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = 100;
 80008d4:	2364      	movs	r3, #100	; 0x64
 80008d6:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (HAL_UART_Transmit(&huart2, (uint8_t *)readyMsg, strlen(readyMsg), TIMEOUT)  == HAL_ERROR) {				//ready
 80008d8:	68f8      	ldr	r0, [r7, #12]
 80008da:	f7ff fc83 	bl	80001e4 <strlen>
 80008de:	4603      	mov	r3, r0
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e6:	68f9      	ldr	r1, [r7, #12]
 80008e8:	4860      	ldr	r0, [pc, #384]	; (8000a6c <main+0x1d4>)
 80008ea:	f002 fdfb 	bl	80034e4 <HAL_UART_Transmit>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d10c      	bne.n	800090e <main+0x76>
		Error_Handler();
 80008f4:	f000 fa9f 	bl	8000e36 <Error_Handler>
	}

	while (eof_bool == false) {
 80008f8:	e009      	b.n	800090e <main+0x76>
		if (HAL_UART_Receive_IT (&huart2, &receiveByte, RECBUF) == HAL_ERROR) {									// read
 80008fa:	2201      	movs	r2, #1
 80008fc:	495c      	ldr	r1, [pc, #368]	; (8000a70 <main+0x1d8>)
 80008fe:	485b      	ldr	r0, [pc, #364]	; (8000a6c <main+0x1d4>)
 8000900:	f002 fe7a 	bl	80035f8 <HAL_UART_Receive_IT>
 8000904:	4603      	mov	r3, r0
 8000906:	2b01      	cmp	r3, #1
 8000908:	d101      	bne.n	800090e <main+0x76>
			Error_Handler();
 800090a:	f000 fa94 	bl	8000e36 <Error_Handler>
	while (eof_bool == false) {
 800090e:	4b59      	ldr	r3, [pc, #356]	; (8000a74 <main+0x1dc>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	f083 0301 	eor.w	r3, r3, #1
 8000916:	b2db      	uxtb	r3, r3
 8000918:	2b00      	cmp	r3, #0
 800091a:	d1ee      	bne.n	80008fa <main+0x62>
		}
	}
	eof_bool = false;
 800091c:	4b55      	ldr	r3, [pc, #340]	; (8000a74 <main+0x1dc>)
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]


	if (frame_check(frame) == true) {
 8000922:	4855      	ldr	r0, [pc, #340]	; (8000a78 <main+0x1e0>)
 8000924:	f7ff fe3a 	bl	800059c <frame_check>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d033      	beq.n	8000996 <main+0xfe>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);												// short led in case of yes
 800092e:	2200      	movs	r2, #0
 8000930:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000938:	f001 f830 	bl	800199c <HAL_GPIO_WritePin>
		_tim_timeout_nonblocking_with_callback(timeout, reset_led);
 800093c:	494f      	ldr	r1, [pc, #316]	; (8000a7c <main+0x1e4>)
 800093e:	68b8      	ldr	r0, [r7, #8]
 8000940:	f000 fa24 	bl	8000d8c <_tim_timeout_nonblocking_with_callback>
	char* send = frame_number_gen(frame, hrng);
 8000944:	4b4e      	ldr	r3, [pc, #312]	; (8000a80 <main+0x1e8>)
 8000946:	68da      	ldr	r2, [r3, #12]
 8000948:	9200      	str	r2, [sp, #0]
 800094a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800094c:	484a      	ldr	r0, [pc, #296]	; (8000a78 <main+0x1e0>)
 800094e:	f7ff fec3 	bl	80006d8 <frame_number_gen>
 8000952:	6078      	str	r0, [r7, #4]
	strcpy(response, send);
 8000954:	6879      	ldr	r1, [r7, #4]
 8000956:	484b      	ldr	r0, [pc, #300]	; (8000a84 <main+0x1ec>)
 8000958:	f004 fb3c 	bl	8004fd4 <strcpy>
	if (HAL_UART_Transmit(&huart2, (uint8_t *)ACK, strlen(ACK), TIMEOUT) == HAL_ERROR) {			// first ack, then reply
 800095c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000960:	2204      	movs	r2, #4
 8000962:	4949      	ldr	r1, [pc, #292]	; (8000a88 <main+0x1f0>)
 8000964:	4841      	ldr	r0, [pc, #260]	; (8000a6c <main+0x1d4>)
 8000966:	f002 fdbd 	bl	80034e4 <HAL_UART_Transmit>
 800096a:	4603      	mov	r3, r0
 800096c:	2b01      	cmp	r3, #1
 800096e:	d101      	bne.n	8000974 <main+0xdc>
		Error_Handler();
 8000970:	f000 fa61 	bl	8000e36 <Error_Handler>
	}

	if (HAL_UART_Transmit(&huart2, (uint8_t *)send, strlen(send), TIMEOUT) == HAL_ERROR) {
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f7ff fc35 	bl	80001e4 <strlen>
 800097a:	4603      	mov	r3, r0
 800097c:	b29a      	uxth	r2, r3
 800097e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000982:	6879      	ldr	r1, [r7, #4]
 8000984:	4839      	ldr	r0, [pc, #228]	; (8000a6c <main+0x1d4>)
 8000986:	f002 fdad 	bl	80034e4 <HAL_UART_Transmit>
 800098a:	4603      	mov	r3, r0
 800098c:	2b01      	cmp	r3, #1
 800098e:	d123      	bne.n	80009d8 <main+0x140>
		Error_Handler();
 8000990:	f000 fa51 	bl	8000e36 <Error_Handler>
 8000994:	e020      	b.n	80009d8 <main+0x140>
	}
	} else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);												// short led in case of yes
 8000996:	2200      	movs	r2, #0
 8000998:	2140      	movs	r1, #64	; 0x40
 800099a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099e:	f000 fffd 	bl	800199c <HAL_GPIO_WritePin>
		_tim_timeout_nonblocking_with_callback(timeout, reset_led);
 80009a2:	4936      	ldr	r1, [pc, #216]	; (8000a7c <main+0x1e4>)
 80009a4:	68b8      	ldr	r0, [r7, #8]
 80009a6:	f000 f9f1 	bl	8000d8c <_tim_timeout_nonblocking_with_callback>
		if (HAL_UART_Transmit(&huart2, (uint8_t *)NACK, strlen(NACK), TIMEOUT) == HAL_ERROR) {		// or nack -> back to start!
 80009aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ae:	2205      	movs	r2, #5
 80009b0:	4936      	ldr	r1, [pc, #216]	; (8000a8c <main+0x1f4>)
 80009b2:	482e      	ldr	r0, [pc, #184]	; (8000a6c <main+0x1d4>)
 80009b4:	f002 fd96 	bl	80034e4 <HAL_UART_Transmit>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d151      	bne.n	8000a62 <main+0x1ca>
			Error_Handler();
 80009be:	f000 fa3a 	bl	8000e36 <Error_Handler>
		}
		continue;
 80009c2:	e04e      	b.n	8000a62 <main+0x1ca>
	}

	do {
	while (eof_bool == false) {
		if (HAL_UART_Receive_IT (&huart2, &receiveByte, RECBUF) == HAL_ERROR) {					// read input for #ACK\n
 80009c4:	2201      	movs	r2, #1
 80009c6:	492a      	ldr	r1, [pc, #168]	; (8000a70 <main+0x1d8>)
 80009c8:	4828      	ldr	r0, [pc, #160]	; (8000a6c <main+0x1d4>)
 80009ca:	f002 fe15 	bl	80035f8 <HAL_UART_Receive_IT>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d101      	bne.n	80009d8 <main+0x140>
			Error_Handler();
 80009d4:	f000 fa2f 	bl	8000e36 <Error_Handler>
	while (eof_bool == false) {
 80009d8:	4b26      	ldr	r3, [pc, #152]	; (8000a74 <main+0x1dc>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	f083 0301 	eor.w	r3, r3, #1
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d1ee      	bne.n	80009c4 <main+0x12c>
		}
	}
	eof_bool = false;
 80009e6:	4b23      	ldr	r3, [pc, #140]	; (8000a74 <main+0x1dc>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]

	ack_bool = ack_check(frame);
 80009ec:	4822      	ldr	r0, [pc, #136]	; (8000a78 <main+0x1e0>)
 80009ee:	f7ff ff3f 	bl	8000870 <ack_check>
 80009f2:	4603      	mov	r3, r0
 80009f4:	461a      	mov	r2, r3
 80009f6:	4b26      	ldr	r3, [pc, #152]	; (8000a90 <main+0x1f8>)
 80009f8:	701a      	strb	r2, [r3, #0]

	if (ack_bool == false){
 80009fa:	4b25      	ldr	r3, [pc, #148]	; (8000a90 <main+0x1f8>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	f083 0301 	eor.w	r3, r3, #1
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d019      	beq.n	8000a3c <main+0x1a4>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);												// short led in case of yes
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2140      	movs	r1, #64	; 0x40
 8000a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a10:	f000 ffc4 	bl	800199c <HAL_GPIO_WritePin>
		_tim_timeout_nonblocking_with_callback(timeout, reset_led);
 8000a14:	4919      	ldr	r1, [pc, #100]	; (8000a7c <main+0x1e4>)
 8000a16:	68b8      	ldr	r0, [r7, #8]
 8000a18:	f000 f9b8 	bl	8000d8c <_tim_timeout_nonblocking_with_callback>
		if (HAL_UART_Transmit(&huart2, (uint8_t *)response, strlen(response), TIMEOUT) == HAL_ERROR) {	// resend reply
 8000a1c:	4819      	ldr	r0, [pc, #100]	; (8000a84 <main+0x1ec>)
 8000a1e:	f7ff fbe1 	bl	80001e4 <strlen>
 8000a22:	4603      	mov	r3, r0
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2a:	4916      	ldr	r1, [pc, #88]	; (8000a84 <main+0x1ec>)
 8000a2c:	480f      	ldr	r0, [pc, #60]	; (8000a6c <main+0x1d4>)
 8000a2e:	f002 fd59 	bl	80034e4 <HAL_UART_Transmit>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d101      	bne.n	8000a3c <main+0x1a4>
			Error_Handler();
 8000a38:	f000 f9fd 	bl	8000e36 <Error_Handler>
		}
	}
	} while (ack_bool == false);
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <main+0x1f8>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	f083 0301 	eor.w	r3, r3, #1
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d1c6      	bne.n	80009d8 <main+0x140>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);												// short led in case of yes
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a54:	f000 ffa2 	bl	800199c <HAL_GPIO_WritePin>
	_tim_timeout_nonblocking_with_callback(timeout, reset_led);
 8000a58:	4908      	ldr	r1, [pc, #32]	; (8000a7c <main+0x1e4>)
 8000a5a:	68b8      	ldr	r0, [r7, #8]
 8000a5c:	f000 f996 	bl	8000d8c <_tim_timeout_nonblocking_with_callback>
 8000a60:	e73a      	b.n	80008d8 <main+0x40>
		continue;
 8000a62:	bf00      	nop
	if (HAL_UART_Transmit(&huart2, (uint8_t *)readyMsg, strlen(readyMsg), TIMEOUT)  == HAL_ERROR) {				//ready
 8000a64:	e738      	b.n	80008d8 <main+0x40>
 8000a66:	bf00      	nop
 8000a68:	08005fd4 	.word	0x08005fd4
 8000a6c:	200000f4 	.word	0x200000f4
 8000a70:	20000180 	.word	0x20000180
 8000a74:	200001bc 	.word	0x200001bc
 8000a78:	20000184 	.word	0x20000184
 8000a7c:	08000e15 	.word	0x08000e15
 8000a80:	20000098 	.word	0x20000098
 8000a84:	200001a0 	.word	0x200001a0
 8000a88:	08005fe0 	.word	0x08005fe0
 8000a8c:	08005fe8 	.word	0x08005fe8
 8000a90:	200001bd 	.word	0x200001bd

08000a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b096      	sub	sp, #88	; 0x58
 8000a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	2244      	movs	r2, #68	; 0x44
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f004 f9bf 	bl	8004e26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ab6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000aba:	f000 ffa5 	bl	8001a08 <HAL_PWREx_ControlVoltageScaling>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ac4:	f000 f9b7 	bl	8000e36 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ac8:	f000 ff80 	bl	80019cc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000acc:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <SystemClock_Config+0xc0>)
 8000ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ad2:	4a20      	ldr	r2, [pc, #128]	; (8000b54 <SystemClock_Config+0xc0>)
 8000ad4:	f023 0318 	bic.w	r3, r3, #24
 8000ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000adc:	2314      	movs	r3, #20
 8000ade:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000aec:	2360      	movs	r3, #96	; 0x60
 8000aee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af0:	2302      	movs	r3, #2
 8000af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000af4:	2301      	movs	r3, #1
 8000af6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000af8:	2301      	movs	r3, #1
 8000afa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000afc:	2310      	movs	r3, #16
 8000afe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b00:	2307      	movs	r3, #7
 8000b02:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b04:	2302      	movs	r3, #2
 8000b06:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 ffcf 	bl	8001ab4 <HAL_RCC_OscConfig>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000b1c:	f000 f98b 	bl	8000e36 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b20:	230f      	movs	r3, #15
 8000b22:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b24:	2303      	movs	r3, #3
 8000b26:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b30:	2300      	movs	r3, #0
 8000b32:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b34:	463b      	mov	r3, r7
 8000b36:	2101      	movs	r1, #1
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f001 fbcf 	bl	80022dc <HAL_RCC_ClockConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000b44:	f000 f977 	bl	8000e36 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000b48:	f001 ffe2 	bl	8002b10 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000b4c:	bf00      	nop
 8000b4e:	3758      	adds	r7, #88	; 0x58
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40021000 	.word	0x40021000

08000b58 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_RNG_Init+0x20>)
 8000b5e:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <MX_RNG_Init+0x24>)
 8000b60:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_RNG_Init+0x20>)
 8000b64:	f002 f8d6 	bl	8002d14 <HAL_RNG_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000b6e:	f000 f962 	bl	8000e36 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000098 	.word	0x20000098
 8000b7c:	50060800 	.word	0x50060800

08000b80 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <MX_TIM6_Init+0x68>)
 8000b92:	4a16      	ldr	r2, [pc, #88]	; (8000bec <MX_TIM6_Init+0x6c>)
 8000b94:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 31000;
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <MX_TIM6_Init+0x68>)
 8000b98:	f647 1218 	movw	r2, #31000	; 0x7918
 8000b9c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9e:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_TIM6_Init+0x68>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000ba4:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <MX_TIM6_Init+0x68>)
 8000ba6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000baa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bac:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_TIM6_Init+0x68>)
 8000bae:	2280      	movs	r2, #128	; 0x80
 8000bb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000bb2:	480d      	ldr	r0, [pc, #52]	; (8000be8 <MX_TIM6_Init+0x68>)
 8000bb4:	f002 f95b 	bl	8002e6e <HAL_TIM_Base_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000bbe:	f000 f93a 	bl	8000e36 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4806      	ldr	r0, [pc, #24]	; (8000be8 <MX_TIM6_Init+0x68>)
 8000bd0:	f002 fbb6 	bl	8003340 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000bda:	f000 f92c 	bl	8000e36 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000bde:	bf00      	nop
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200000a8 	.word	0x200000a8
 8000bec:	40001000 	.word	0x40001000

08000bf0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bf4:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <MX_USART2_UART_Init+0x58>)
 8000bf6:	4a15      	ldr	r2, [pc, #84]	; (8000c4c <MX_USART2_UART_Init+0x5c>)
 8000bf8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bfa:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <MX_USART2_UART_Init+0x58>)
 8000bfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <MX_USART2_UART_Init+0x58>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c08:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <MX_USART2_UART_Init+0x58>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <MX_USART2_UART_Init+0x58>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MX_USART2_UART_Init+0x58>)
 8000c16:	220c      	movs	r2, #12
 8000c18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <MX_USART2_UART_Init+0x58>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_USART2_UART_Init+0x58>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <MX_USART2_UART_Init+0x58>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <MX_USART2_UART_Init+0x58>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	; (8000c48 <MX_USART2_UART_Init+0x58>)
 8000c34:	f002 fc08 	bl	8003448 <HAL_UART_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c3e:	f000 f8fa 	bl	8000e36 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200000f4 	.word	0x200000f4
 8000c4c:	40004400 	.word	0x40004400

08000c50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c56:	f107 030c 	add.w	r3, r7, #12
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
 8000c64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c66:	4b29      	ldr	r3, [pc, #164]	; (8000d0c <MX_GPIO_Init+0xbc>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6a:	4a28      	ldr	r2, [pc, #160]	; (8000d0c <MX_GPIO_Init+0xbc>)
 8000c6c:	f043 0304 	orr.w	r3, r3, #4
 8000c70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c72:	4b26      	ldr	r3, [pc, #152]	; (8000d0c <MX_GPIO_Init+0xbc>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c76:	f003 0304 	and.w	r3, r3, #4
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	4b23      	ldr	r3, [pc, #140]	; (8000d0c <MX_GPIO_Init+0xbc>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c82:	4a22      	ldr	r2, [pc, #136]	; (8000d0c <MX_GPIO_Init+0xbc>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c8a:	4b20      	ldr	r3, [pc, #128]	; (8000d0c <MX_GPIO_Init+0xbc>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <MX_GPIO_Init+0xbc>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9a:	4a1c      	ldr	r2, [pc, #112]	; (8000d0c <MX_GPIO_Init+0xbc>)
 8000c9c:	f043 0302 	orr.w	r3, r3, #2
 8000ca0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <MX_GPIO_Init+0xbc>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb8:	f000 fe70 	bl	800199c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2108      	movs	r1, #8
 8000cc0:	4813      	ldr	r0, [pc, #76]	; (8000d10 <MX_GPIO_Init+0xc0>)
 8000cc2:	f000 fe6b 	bl	800199c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8000cc6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000cca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd8:	f107 030c 	add.w	r3, r7, #12
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce2:	f000 fcf1 	bl	80016c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000ce6:	2308      	movs	r3, #8
 8000ce8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cea:	2301      	movs	r3, #1
 8000cec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000cf6:	f107 030c 	add.w	r3, r7, #12
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4804      	ldr	r0, [pc, #16]	; (8000d10 <MX_GPIO_Init+0xc0>)
 8000cfe:	f000 fce3 	bl	80016c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d02:	bf00      	nop
 8000d04:	3720      	adds	r7, #32
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	48000400 	.word	0x48000400

08000d14 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a16      	ldr	r2, [pc, #88]	; (8000d78 <HAL_UART_RxCpltCallback+0x64>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d123      	bne.n	8000d6c <HAL_UART_RxCpltCallback+0x58>
		frame[frameIndex] = receiveByte;
 8000d24:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <HAL_UART_RxCpltCallback+0x68>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <HAL_UART_RxCpltCallback+0x6c>)
 8000d2c:	7819      	ldrb	r1, [r3, #0]
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <HAL_UART_RxCpltCallback+0x70>)
 8000d30:	5499      	strb	r1, [r3, r2]

		if (frameIndex == FRAMELEN) {
 8000d32:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <HAL_UART_RxCpltCallback+0x68>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b1c      	cmp	r3, #28
 8000d38:	d102      	bne.n	8000d40 <HAL_UART_RxCpltCallback+0x2c>
			frameIndex = 0;
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <HAL_UART_RxCpltCallback+0x68>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	701a      	strb	r2, [r3, #0]
		}
		frameIndex++;
 8000d40:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <HAL_UART_RxCpltCallback+0x68>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	3301      	adds	r3, #1
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <HAL_UART_RxCpltCallback+0x68>)
 8000d4a:	701a      	strb	r2, [r3, #0]

	//	char check[1];
	//	check[0] = (int)receiveByte;
	//	if (strcmp(check, EOF) == 0) {
	//		if (strcmp(&receiveByte, EOF) == 0) {
		if (receiveByte == MY_EOF) {
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <HAL_UART_RxCpltCallback+0x6c>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b0a      	cmp	r3, #10
 8000d52:	d10b      	bne.n	8000d6c <HAL_UART_RxCpltCallback+0x58>
//			frame[frameIndex] = '\n';
			frame[frameIndex] = '\0';
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <HAL_UART_RxCpltCallback+0x68>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <HAL_UART_RxCpltCallback+0x70>)
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	5499      	strb	r1, [r3, r2]
			frameIndex = 0;
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_UART_RxCpltCallback+0x68>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]
			eof_bool = true;
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <HAL_UART_RxCpltCallback+0x74>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	200000f4 	.word	0x200000f4
 8000d7c:	200001be 	.word	0x200001be
 8000d80:	20000180 	.word	0x20000180
 8000d84:	20000184 	.word	0x20000184
 8000d88:	200001bc 	.word	0x200001bc

08000d8c <_tim_timeout_nonblocking_with_callback>:

void _tim_timeout_nonblocking_with_callback(uint32_t time_ms, void(*func)(void)) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
	tim6_cb = func;									// set function pointer to parameter function
 8000d96:	4a11      	ldr	r2, [pc, #68]	; (8000ddc <_tim_timeout_nonblocking_with_callback+0x50>)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	6013      	str	r3, [r2, #0]

	__HAL_TIM_SET_AUTORELOAD(&htim6, time_ms);
 8000d9c:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <_tim_timeout_nonblocking_with_callback+0x54>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000da4:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <_tim_timeout_nonblocking_with_callback+0x54>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8000daa:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <_tim_timeout_nonblocking_with_callback+0x54>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2200      	movs	r2, #0
 8000db0:	625a      	str	r2, [r3, #36]	; 0x24
	TIM6->EGR = 1;
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <_tim_timeout_nonblocking_with_callback+0x58>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	615a      	str	r2, [r3, #20]
	__HAL_TIM_CLEAR_FLAG(&htim6, TIM_FLAG_UPDATE);
 8000db8:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <_tim_timeout_nonblocking_with_callback+0x54>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f06f 0201 	mvn.w	r2, #1
 8000dc0:	611a      	str	r2, [r3, #16]

	if (HAL_TIM_Base_Start_IT(&htim6) != HAL_OK) {
 8000dc2:	4807      	ldr	r0, [pc, #28]	; (8000de0 <_tim_timeout_nonblocking_with_callback+0x54>)
 8000dc4:	f002 f8aa 	bl	8002f1c <HAL_TIM_Base_Start_IT>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <_tim_timeout_nonblocking_with_callback+0x46>
		Error_Handler();
 8000dce:	f000 f832 	bl	8000e36 <Error_Handler>
	}
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	2000017c 	.word	0x2000017c
 8000de0:	200000a8 	.word	0x200000a8
 8000de4:	40001000 	.word	0x40001000

08000de8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	if (htim == &htim6) {
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d105      	bne.n	8000e04 <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_TIM_Base_Stop_IT(&htim6);
 8000df8:	4804      	ldr	r0, [pc, #16]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000dfa:	f002 f8e3 	bl	8002fc4 <HAL_TIM_Base_Stop_IT>
		tim6_cb();
 8000dfe:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4798      	blx	r3
	}

}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	200000a8 	.word	0x200000a8
 8000e10:	2000017c 	.word	0x2000017c

08000e14 <reset_led>:

void reset_led() {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e22:	f000 fdbb 	bl	800199c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000e26:	2201      	movs	r2, #1
 8000e28:	2140      	movs	r1, #64	; 0x40
 8000e2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2e:	f000 fdb5 	bl	800199c <HAL_GPIO_WritePin>
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e3a:	b672      	cpsid	i
}
 8000e3c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <Error_Handler+0x8>

08000e40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e46:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <HAL_MspInit+0x44>)
 8000e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e4a:	4a0e      	ldr	r2, [pc, #56]	; (8000e84 <HAL_MspInit+0x44>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6613      	str	r3, [r2, #96]	; 0x60
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <HAL_MspInit+0x44>)
 8000e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <HAL_MspInit+0x44>)
 8000e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e62:	4a08      	ldr	r2, [pc, #32]	; (8000e84 <HAL_MspInit+0x44>)
 8000e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e68:	6593      	str	r3, [r2, #88]	; 0x58
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_MspInit+0x44>)
 8000e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e72:	603b      	str	r3, [r7, #0]
 8000e74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	40021000 	.word	0x40021000

08000e88 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b098      	sub	sp, #96	; 0x60
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e90:	f107 030c 	add.w	r3, r7, #12
 8000e94:	2254      	movs	r2, #84	; 0x54
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f003 ffc4 	bl	8004e26 <memset>
  if(hrng->Instance==RNG)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a19      	ldr	r2, [pc, #100]	; (8000f08 <HAL_RNG_MspInit+0x80>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d12a      	bne.n	8000efe <HAL_RNG_MspInit+0x76>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000ea8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000eac:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8000eae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000eb2:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000ebc:	2310      	movs	r3, #16
 8000ebe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000ec0:	2307      	movs	r3, #7
 8000ec2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000ecc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ed2:	f107 030c 	add.w	r3, r7, #12
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f001 fc24 	bl	8002724 <HAL_RCCEx_PeriphCLKConfig>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_RNG_MspInit+0x5e>
    {
      Error_Handler();
 8000ee2:	f7ff ffa8 	bl	8000e36 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <HAL_RNG_MspInit+0x84>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	4a08      	ldr	r2, [pc, #32]	; (8000f0c <HAL_RNG_MspInit+0x84>)
 8000eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_RNG_MspInit+0x84>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000efe:	bf00      	nop
 8000f00:	3760      	adds	r7, #96	; 0x60
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	50060800 	.word	0x50060800
 8000f0c:	40021000 	.word	0x40021000

08000f10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0d      	ldr	r2, [pc, #52]	; (8000f54 <HAL_TIM_Base_MspInit+0x44>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d113      	bne.n	8000f4a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f22:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <HAL_TIM_Base_MspInit+0x48>)
 8000f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f26:	4a0c      	ldr	r2, [pc, #48]	; (8000f58 <HAL_TIM_Base_MspInit+0x48>)
 8000f28:	f043 0310 	orr.w	r3, r3, #16
 8000f2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <HAL_TIM_Base_MspInit+0x48>)
 8000f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f32:	f003 0310 	and.w	r3, r3, #16
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	2036      	movs	r0, #54	; 0x36
 8000f40:	f000 fb0d 	bl	800155e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f44:	2036      	movs	r0, #54	; 0x36
 8000f46:	f000 fb26 	bl	8001596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000f4a:	bf00      	nop
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40001000 	.word	0x40001000
 8000f58:	40021000 	.word	0x40021000

08000f5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b09e      	sub	sp, #120	; 0x78
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f74:	f107 0310 	add.w	r3, r7, #16
 8000f78:	2254      	movs	r2, #84	; 0x54
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f003 ff52 	bl	8004e26 <memset>
  if(huart->Instance==USART2)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a2c      	ldr	r2, [pc, #176]	; (8001038 <HAL_UART_MspInit+0xdc>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d150      	bne.n	800102e <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f90:	2300      	movs	r3, #0
 8000f92:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f94:	f107 0310 	add.w	r3, r7, #16
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f001 fbc3 	bl	8002724 <HAL_RCCEx_PeriphCLKConfig>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fa4:	f7ff ff47 	bl	8000e36 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fa8:	4b24      	ldr	r3, [pc, #144]	; (800103c <HAL_UART_MspInit+0xe0>)
 8000faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fac:	4a23      	ldr	r2, [pc, #140]	; (800103c <HAL_UART_MspInit+0xe0>)
 8000fae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb2:	6593      	str	r3, [r2, #88]	; 0x58
 8000fb4:	4b21      	ldr	r3, [pc, #132]	; (800103c <HAL_UART_MspInit+0xe0>)
 8000fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc0:	4b1e      	ldr	r3, [pc, #120]	; (800103c <HAL_UART_MspInit+0xe0>)
 8000fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc4:	4a1d      	ldr	r2, [pc, #116]	; (800103c <HAL_UART_MspInit+0xe0>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	; (800103c <HAL_UART_MspInit+0xe0>)
 8000fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000fd8:	2304      	movs	r3, #4
 8000fda:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fe8:	2307      	movs	r3, #7
 8000fea:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000fec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff6:	f000 fb67 	bl	80016c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ffe:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001008:	2303      	movs	r3, #3
 800100a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800100c:	2303      	movs	r3, #3
 800100e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001010:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001014:	4619      	mov	r1, r3
 8001016:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800101a:	f000 fb55 	bl	80016c8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2100      	movs	r1, #0
 8001022:	2026      	movs	r0, #38	; 0x26
 8001024:	f000 fa9b 	bl	800155e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001028:	2026      	movs	r0, #38	; 0x26
 800102a:	f000 fab4 	bl	8001596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800102e:	bf00      	nop
 8001030:	3778      	adds	r7, #120	; 0x78
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40004400 	.word	0x40004400
 800103c:	40021000 	.word	0x40021000

08001040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <NMI_Handler+0x4>

08001046 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104a:	e7fe      	b.n	800104a <HardFault_Handler+0x4>

0800104c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <MemManage_Handler+0x4>

08001052 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001056:	e7fe      	b.n	8001056 <BusFault_Handler+0x4>

08001058 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800105c:	e7fe      	b.n	800105c <UsageFault_Handler+0x4>

0800105e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800108c:	f000 f96c 	bl	8001368 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}

08001094 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <USART2_IRQHandler+0x10>)
 800109a:	f002 faf9 	bl	8003690 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200000f4 	.word	0x200000f4

080010a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <TIM6_DAC_IRQHandler+0x10>)
 80010ae:	f001 ffb8 	bl	8003022 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200000a8 	.word	0x200000a8

080010bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return 1;
 80010c0:	2301      	movs	r3, #1
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <_kill>:

int _kill(int pid, int sig)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010d6:	f003 ff51 	bl	8004f7c <__errno>
 80010da:	4603      	mov	r3, r0
 80010dc:	2216      	movs	r2, #22
 80010de:	601a      	str	r2, [r3, #0]
  return -1;
 80010e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <_exit>:

void _exit (int status)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80010f4:	f04f 31ff 	mov.w	r1, #4294967295
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ffe7 	bl	80010cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80010fe:	e7fe      	b.n	80010fe <_exit+0x12>

08001100 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	e00a      	b.n	8001128 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001112:	f3af 8000 	nop.w
 8001116:	4601      	mov	r1, r0
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	1c5a      	adds	r2, r3, #1
 800111c:	60ba      	str	r2, [r7, #8]
 800111e:	b2ca      	uxtb	r2, r1
 8001120:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	3301      	adds	r3, #1
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	429a      	cmp	r2, r3
 800112e:	dbf0      	blt.n	8001112 <_read+0x12>
  }

  return len;
 8001130:	687b      	ldr	r3, [r7, #4]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b086      	sub	sp, #24
 800113e:	af00      	add	r7, sp, #0
 8001140:	60f8      	str	r0, [r7, #12]
 8001142:	60b9      	str	r1, [r7, #8]
 8001144:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
 800114a:	e009      	b.n	8001160 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	1c5a      	adds	r2, r3, #1
 8001150:	60ba      	str	r2, [r7, #8]
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	3301      	adds	r3, #1
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	697a      	ldr	r2, [r7, #20]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	429a      	cmp	r2, r3
 8001166:	dbf1      	blt.n	800114c <_write+0x12>
  }
  return len;
 8001168:	687b      	ldr	r3, [r7, #4]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <_close>:

int _close(int file)
{
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800117a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
 8001192:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800119a:	605a      	str	r2, [r3, #4]
  return 0;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <_isatty>:

int _isatty(int file)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011b2:	2301      	movs	r3, #1
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e4:	4a14      	ldr	r2, [pc, #80]	; (8001238 <_sbrk+0x5c>)
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <_sbrk+0x60>)
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f0:	4b13      	ldr	r3, [pc, #76]	; (8001240 <_sbrk+0x64>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d102      	bne.n	80011fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <_sbrk+0x64>)
 80011fa:	4a12      	ldr	r2, [pc, #72]	; (8001244 <_sbrk+0x68>)
 80011fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <_sbrk+0x64>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	429a      	cmp	r2, r3
 800120a:	d207      	bcs.n	800121c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800120c:	f003 feb6 	bl	8004f7c <__errno>
 8001210:	4603      	mov	r3, r0
 8001212:	220c      	movs	r2, #12
 8001214:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001216:	f04f 33ff 	mov.w	r3, #4294967295
 800121a:	e009      	b.n	8001230 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <_sbrk+0x64>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001222:	4b07      	ldr	r3, [pc, #28]	; (8001240 <_sbrk+0x64>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4413      	add	r3, r2
 800122a:	4a05      	ldr	r2, [pc, #20]	; (8001240 <_sbrk+0x64>)
 800122c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800122e:	68fb      	ldr	r3, [r7, #12]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20010000 	.word	0x20010000
 800123c:	00000400 	.word	0x00000400
 8001240:	200001c0 	.word	0x200001c0
 8001244:	20000318 	.word	0x20000318

08001248 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <SystemInit+0x20>)
 800124e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001252:	4a05      	ldr	r2, [pc, #20]	; (8001268 <SystemInit+0x20>)
 8001254:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001258:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800126c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001270:	f7ff ffea 	bl	8001248 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001274:	480c      	ldr	r0, [pc, #48]	; (80012a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001276:	490d      	ldr	r1, [pc, #52]	; (80012ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001278:	4a0d      	ldr	r2, [pc, #52]	; (80012b0 <LoopForever+0xe>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800127c:	e002      	b.n	8001284 <LoopCopyDataInit>

0800127e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800127e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001282:	3304      	adds	r3, #4

08001284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001288:	d3f9      	bcc.n	800127e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128a:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800128c:	4c0a      	ldr	r4, [pc, #40]	; (80012b8 <LoopForever+0x16>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001290:	e001      	b.n	8001296 <LoopFillZerobss>

08001292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001294:	3204      	adds	r2, #4

08001296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001298:	d3fb      	bcc.n	8001292 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800129a:	f003 fe75 	bl	8004f88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800129e:	f7ff fafb 	bl	8000898 <main>

080012a2 <LoopForever>:

LoopForever:
    b LoopForever
 80012a2:	e7fe      	b.n	80012a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012a4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80012a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012ac:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80012b0:	0800622c 	.word	0x0800622c
  ldr r2, =_sbss
 80012b4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80012b8:	20000314 	.word	0x20000314

080012bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012bc:	e7fe      	b.n	80012bc <ADC1_IRQHandler>

080012be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012c4:	2300      	movs	r3, #0
 80012c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c8:	2003      	movs	r0, #3
 80012ca:	f000 f93d 	bl	8001548 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012ce:	2000      	movs	r0, #0
 80012d0:	f000 f80e 	bl	80012f0 <HAL_InitTick>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d002      	beq.n	80012e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	71fb      	strb	r3, [r7, #7]
 80012de:	e001      	b.n	80012e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012e0:	f7ff fdae 	bl	8000e40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012e4:	79fb      	ldrb	r3, [r7, #7]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012f8:	2300      	movs	r3, #0
 80012fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012fc:	4b17      	ldr	r3, [pc, #92]	; (800135c <HAL_InitTick+0x6c>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d023      	beq.n	800134c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001304:	4b16      	ldr	r3, [pc, #88]	; (8001360 <HAL_InitTick+0x70>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b14      	ldr	r3, [pc, #80]	; (800135c <HAL_InitTick+0x6c>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	4619      	mov	r1, r3
 800130e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001312:	fbb3 f3f1 	udiv	r3, r3, r1
 8001316:	fbb2 f3f3 	udiv	r3, r2, r3
 800131a:	4618      	mov	r0, r3
 800131c:	f000 f949 	bl	80015b2 <HAL_SYSTICK_Config>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10f      	bne.n	8001346 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b0f      	cmp	r3, #15
 800132a:	d809      	bhi.n	8001340 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800132c:	2200      	movs	r2, #0
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	f04f 30ff 	mov.w	r0, #4294967295
 8001334:	f000 f913 	bl	800155e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001338:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <HAL_InitTick+0x74>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	e007      	b.n	8001350 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	73fb      	strb	r3, [r7, #15]
 8001344:	e004      	b.n	8001350 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	73fb      	strb	r3, [r7, #15]
 800134a:	e001      	b.n	8001350 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001350:	7bfb      	ldrb	r3, [r7, #15]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000008 	.word	0x20000008
 8001360:	20000000 	.word	0x20000000
 8001364:	20000004 	.word	0x20000004

08001368 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_IncTick+0x20>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	461a      	mov	r2, r3
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_IncTick+0x24>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4413      	add	r3, r2
 8001378:	4a04      	ldr	r2, [pc, #16]	; (800138c <HAL_IncTick+0x24>)
 800137a:	6013      	str	r3, [r2, #0]
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	20000008 	.word	0x20000008
 800138c:	200001c4 	.word	0x200001c4

08001390 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return uwTick;
 8001394:	4b03      	ldr	r3, [pc, #12]	; (80013a4 <HAL_GetTick+0x14>)
 8001396:	681b      	ldr	r3, [r3, #0]
}
 8001398:	4618      	mov	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	200001c4 	.word	0x200001c4

080013a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c4:	4013      	ands	r3, r2
 80013c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013da:	4a04      	ldr	r2, [pc, #16]	; (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	60d3      	str	r3, [r2, #12]
}
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <__NVIC_GetPriorityGrouping+0x18>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	0a1b      	lsrs	r3, r3, #8
 80013fa:	f003 0307 	and.w	r3, r3, #7
}
 80013fe:	4618      	mov	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	2b00      	cmp	r3, #0
 800141c:	db0b      	blt.n	8001436 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	f003 021f 	and.w	r2, r3, #31
 8001424:	4907      	ldr	r1, [pc, #28]	; (8001444 <__NVIC_EnableIRQ+0x38>)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	095b      	lsrs	r3, r3, #5
 800142c:	2001      	movs	r0, #1
 800142e:	fa00 f202 	lsl.w	r2, r0, r2
 8001432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000e100 	.word	0xe000e100

08001448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	6039      	str	r1, [r7, #0]
 8001452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001458:	2b00      	cmp	r3, #0
 800145a:	db0a      	blt.n	8001472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	b2da      	uxtb	r2, r3
 8001460:	490c      	ldr	r1, [pc, #48]	; (8001494 <__NVIC_SetPriority+0x4c>)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	0112      	lsls	r2, r2, #4
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	440b      	add	r3, r1
 800146c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001470:	e00a      	b.n	8001488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4908      	ldr	r1, [pc, #32]	; (8001498 <__NVIC_SetPriority+0x50>)
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	3b04      	subs	r3, #4
 8001480:	0112      	lsls	r2, r2, #4
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	440b      	add	r3, r1
 8001486:	761a      	strb	r2, [r3, #24]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000e100 	.word	0xe000e100
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800149c:	b480      	push	{r7}
 800149e:	b089      	sub	sp, #36	; 0x24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f1c3 0307 	rsb	r3, r3, #7
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	bf28      	it	cs
 80014ba:	2304      	movcs	r3, #4
 80014bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3304      	adds	r3, #4
 80014c2:	2b06      	cmp	r3, #6
 80014c4:	d902      	bls.n	80014cc <NVIC_EncodePriority+0x30>
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3b03      	subs	r3, #3
 80014ca:	e000      	b.n	80014ce <NVIC_EncodePriority+0x32>
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	f04f 32ff 	mov.w	r2, #4294967295
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43da      	mvns	r2, r3
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	401a      	ands	r2, r3
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e4:	f04f 31ff 	mov.w	r1, #4294967295
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	fa01 f303 	lsl.w	r3, r1, r3
 80014ee:	43d9      	mvns	r1, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	4313      	orrs	r3, r2
         );
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3724      	adds	r7, #36	; 0x24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
	...

08001504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3b01      	subs	r3, #1
 8001510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001514:	d301      	bcc.n	800151a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001516:	2301      	movs	r3, #1
 8001518:	e00f      	b.n	800153a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800151a:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <SysTick_Config+0x40>)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3b01      	subs	r3, #1
 8001520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001522:	210f      	movs	r1, #15
 8001524:	f04f 30ff 	mov.w	r0, #4294967295
 8001528:	f7ff ff8e 	bl	8001448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <SysTick_Config+0x40>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001532:	4b04      	ldr	r3, [pc, #16]	; (8001544 <SysTick_Config+0x40>)
 8001534:	2207      	movs	r2, #7
 8001536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	e000e010 	.word	0xe000e010

08001548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff ff29 	bl	80013a8 <__NVIC_SetPriorityGrouping>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b086      	sub	sp, #24
 8001562:	af00      	add	r7, sp, #0
 8001564:	4603      	mov	r3, r0
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
 800156a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001570:	f7ff ff3e 	bl	80013f0 <__NVIC_GetPriorityGrouping>
 8001574:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	68b9      	ldr	r1, [r7, #8]
 800157a:	6978      	ldr	r0, [r7, #20]
 800157c:	f7ff ff8e 	bl	800149c <NVIC_EncodePriority>
 8001580:	4602      	mov	r2, r0
 8001582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001586:	4611      	mov	r1, r2
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff5d 	bl	8001448 <__NVIC_SetPriority>
}
 800158e:	bf00      	nop
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff31 	bl	800140c <__NVIC_EnableIRQ>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff ffa2 	bl	8001504 <SysTick_Config>
 80015c0:	4603      	mov	r3, r0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b085      	sub	sp, #20
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d008      	beq.n	80015f4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2204      	movs	r2, #4
 80015e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e022      	b.n	800163a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 020e 	bic.w	r2, r2, #14
 8001602:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f022 0201 	bic.w	r2, r2, #1
 8001612:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001618:	f003 021c 	and.w	r2, r3, #28
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001620:	2101      	movs	r1, #1
 8001622:	fa01 f202 	lsl.w	r2, r1, r2
 8001626:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2201      	movs	r2, #1
 800162c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001638:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800163a:	4618      	mov	r0, r3
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b084      	sub	sp, #16
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d005      	beq.n	800166a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2204      	movs	r2, #4
 8001662:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	73fb      	strb	r3, [r7, #15]
 8001668:	e029      	b.n	80016be <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 020e 	bic.w	r2, r2, #14
 8001678:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 0201 	bic.w	r2, r2, #1
 8001688:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	f003 021c 	and.w	r2, r3, #28
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	2101      	movs	r1, #1
 8001698:	fa01 f202 	lsl.w	r2, r1, r2
 800169c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	4798      	blx	r3
    }
  }
  return status;
 80016be:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b087      	sub	sp, #28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d6:	e148      	b.n	800196a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	2101      	movs	r1, #1
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	fa01 f303 	lsl.w	r3, r1, r3
 80016e4:	4013      	ands	r3, r2
 80016e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 813a 	beq.w	8001964 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d005      	beq.n	8001708 <HAL_GPIO_Init+0x40>
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d130      	bne.n	800176a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	2203      	movs	r2, #3
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	68da      	ldr	r2, [r3, #12]
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800173e:	2201      	movs	r2, #1
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	091b      	lsrs	r3, r3, #4
 8001754:	f003 0201 	and.w	r2, r3, #1
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4313      	orrs	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	2b03      	cmp	r3, #3
 8001774:	d017      	beq.n	80017a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	2203      	movs	r2, #3
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	4013      	ands	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d123      	bne.n	80017fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	08da      	lsrs	r2, r3, #3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3208      	adds	r2, #8
 80017ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	220f      	movs	r2, #15
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4013      	ands	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	691a      	ldr	r2, [r3, #16]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f003 0307 	and.w	r3, r3, #7
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	08da      	lsrs	r2, r3, #3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3208      	adds	r2, #8
 80017f4:	6939      	ldr	r1, [r7, #16]
 80017f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	2203      	movs	r2, #3
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 0203 	and.w	r2, r3, #3
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 8094 	beq.w	8001964 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183c:	4b52      	ldr	r3, [pc, #328]	; (8001988 <HAL_GPIO_Init+0x2c0>)
 800183e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001840:	4a51      	ldr	r2, [pc, #324]	; (8001988 <HAL_GPIO_Init+0x2c0>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	6613      	str	r3, [r2, #96]	; 0x60
 8001848:	4b4f      	ldr	r3, [pc, #316]	; (8001988 <HAL_GPIO_Init+0x2c0>)
 800184a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001854:	4a4d      	ldr	r2, [pc, #308]	; (800198c <HAL_GPIO_Init+0x2c4>)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	089b      	lsrs	r3, r3, #2
 800185a:	3302      	adds	r3, #2
 800185c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001860:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	f003 0303 	and.w	r3, r3, #3
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	220f      	movs	r2, #15
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800187e:	d00d      	beq.n	800189c <HAL_GPIO_Init+0x1d4>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a43      	ldr	r2, [pc, #268]	; (8001990 <HAL_GPIO_Init+0x2c8>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d007      	beq.n	8001898 <HAL_GPIO_Init+0x1d0>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a42      	ldr	r2, [pc, #264]	; (8001994 <HAL_GPIO_Init+0x2cc>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d101      	bne.n	8001894 <HAL_GPIO_Init+0x1cc>
 8001890:	2302      	movs	r3, #2
 8001892:	e004      	b.n	800189e <HAL_GPIO_Init+0x1d6>
 8001894:	2307      	movs	r3, #7
 8001896:	e002      	b.n	800189e <HAL_GPIO_Init+0x1d6>
 8001898:	2301      	movs	r3, #1
 800189a:	e000      	b.n	800189e <HAL_GPIO_Init+0x1d6>
 800189c:	2300      	movs	r3, #0
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	f002 0203 	and.w	r2, r2, #3
 80018a4:	0092      	lsls	r2, r2, #2
 80018a6:	4093      	lsls	r3, r2
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018ae:	4937      	ldr	r1, [pc, #220]	; (800198c <HAL_GPIO_Init+0x2c4>)
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	089b      	lsrs	r3, r3, #2
 80018b4:	3302      	adds	r3, #2
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018bc:	4b36      	ldr	r3, [pc, #216]	; (8001998 <HAL_GPIO_Init+0x2d0>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018e0:	4a2d      	ldr	r2, [pc, #180]	; (8001998 <HAL_GPIO_Init+0x2d0>)
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018e6:	4b2c      	ldr	r3, [pc, #176]	; (8001998 <HAL_GPIO_Init+0x2d0>)
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4013      	ands	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4313      	orrs	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800190a:	4a23      	ldr	r2, [pc, #140]	; (8001998 <HAL_GPIO_Init+0x2d0>)
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001910:	4b21      	ldr	r3, [pc, #132]	; (8001998 <HAL_GPIO_Init+0x2d0>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	43db      	mvns	r3, r3
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4013      	ands	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d003      	beq.n	8001934 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001934:	4a18      	ldr	r2, [pc, #96]	; (8001998 <HAL_GPIO_Init+0x2d0>)
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800193a:	4b17      	ldr	r3, [pc, #92]	; (8001998 <HAL_GPIO_Init+0x2d0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	43db      	mvns	r3, r3
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4013      	ands	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4313      	orrs	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800195e:	4a0e      	ldr	r2, [pc, #56]	; (8001998 <HAL_GPIO_Init+0x2d0>)
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	3301      	adds	r3, #1
 8001968:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	fa22 f303 	lsr.w	r3, r2, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	f47f aeaf 	bne.w	80016d8 <HAL_GPIO_Init+0x10>
  }
}
 800197a:	bf00      	nop
 800197c:	bf00      	nop
 800197e:	371c      	adds	r7, #28
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	40021000 	.word	0x40021000
 800198c:	40010000 	.word	0x40010000
 8001990:	48000400 	.word	0x48000400
 8001994:	48000800 	.word	0x48000800
 8001998:	40010400 	.word	0x40010400

0800199c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	807b      	strh	r3, [r7, #2]
 80019a8:	4613      	mov	r3, r2
 80019aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019ac:	787b      	ldrb	r3, [r7, #1]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019b2:	887a      	ldrh	r2, [r7, #2]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019b8:	e002      	b.n	80019c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019ba:	887a      	ldrh	r2, [r7, #2]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019da:	6013      	str	r3, [r2, #0]
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40007000 	.word	0x40007000

080019ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019f0:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <HAL_PWREx_GetVoltageRange+0x18>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	40007000 	.word	0x40007000

08001a08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a16:	d130      	bne.n	8001a7a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a18:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a24:	d038      	beq.n	8001a98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a26:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a2e:	4a1e      	ldr	r2, [pc, #120]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a34:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a36:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2232      	movs	r2, #50	; 0x32
 8001a3c:	fb02 f303 	mul.w	r3, r2, r3
 8001a40:	4a1b      	ldr	r2, [pc, #108]	; (8001ab0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a42:	fba2 2303 	umull	r2, r3, r2, r3
 8001a46:	0c9b      	lsrs	r3, r3, #18
 8001a48:	3301      	adds	r3, #1
 8001a4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a4c:	e002      	b.n	8001a54 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	3b01      	subs	r3, #1
 8001a52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a54:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a60:	d102      	bne.n	8001a68 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1f2      	bne.n	8001a4e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a68:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a74:	d110      	bne.n	8001a98 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e00f      	b.n	8001a9a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a86:	d007      	beq.n	8001a98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a88:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a90:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a96:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40007000 	.word	0x40007000
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	431bde83 	.word	0x431bde83

08001ab4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d102      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	f000 bc02 	b.w	80022cc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ac8:	4b96      	ldr	r3, [pc, #600]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 030c 	and.w	r3, r3, #12
 8001ad0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ad2:	4b94      	ldr	r3, [pc, #592]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0310 	and.w	r3, r3, #16
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 80e4 	beq.w	8001cb2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d007      	beq.n	8001b00 <HAL_RCC_OscConfig+0x4c>
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	2b0c      	cmp	r3, #12
 8001af4:	f040 808b 	bne.w	8001c0e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	f040 8087 	bne.w	8001c0e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b00:	4b88      	ldr	r3, [pc, #544]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d005      	beq.n	8001b18 <HAL_RCC_OscConfig+0x64>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e3d9      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a1a      	ldr	r2, [r3, #32]
 8001b1c:	4b81      	ldr	r3, [pc, #516]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d004      	beq.n	8001b32 <HAL_RCC_OscConfig+0x7e>
 8001b28:	4b7e      	ldr	r3, [pc, #504]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b30:	e005      	b.n	8001b3e <HAL_RCC_OscConfig+0x8a>
 8001b32:	4b7c      	ldr	r3, [pc, #496]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b38:	091b      	lsrs	r3, r3, #4
 8001b3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d223      	bcs.n	8001b8a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a1b      	ldr	r3, [r3, #32]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 fd8c 	bl	8002664 <RCC_SetFlashLatencyFromMSIRange>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e3ba      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b56:	4b73      	ldr	r3, [pc, #460]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a72      	ldr	r2, [pc, #456]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b5c:	f043 0308 	orr.w	r3, r3, #8
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	4b70      	ldr	r3, [pc, #448]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	496d      	ldr	r1, [pc, #436]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b74:	4b6b      	ldr	r3, [pc, #428]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	021b      	lsls	r3, r3, #8
 8001b82:	4968      	ldr	r1, [pc, #416]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	604b      	str	r3, [r1, #4]
 8001b88:	e025      	b.n	8001bd6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b8a:	4b66      	ldr	r3, [pc, #408]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a65      	ldr	r2, [pc, #404]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b90:	f043 0308 	orr.w	r3, r3, #8
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	4b63      	ldr	r3, [pc, #396]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	4960      	ldr	r1, [pc, #384]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ba8:	4b5e      	ldr	r3, [pc, #376]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	021b      	lsls	r3, r3, #8
 8001bb6:	495b      	ldr	r1, [pc, #364]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d109      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 fd4c 	bl	8002664 <RCC_SetFlashLatencyFromMSIRange>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e37a      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bd6:	f000 fc81 	bl	80024dc <HAL_RCC_GetSysClockFreq>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	4b51      	ldr	r3, [pc, #324]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	091b      	lsrs	r3, r3, #4
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	4950      	ldr	r1, [pc, #320]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001be8:	5ccb      	ldrb	r3, [r1, r3]
 8001bea:	f003 031f 	and.w	r3, r3, #31
 8001bee:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf2:	4a4e      	ldr	r2, [pc, #312]	; (8001d2c <HAL_RCC_OscConfig+0x278>)
 8001bf4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bf6:	4b4e      	ldr	r3, [pc, #312]	; (8001d30 <HAL_RCC_OscConfig+0x27c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fb78 	bl	80012f0 <HAL_InitTick>
 8001c00:	4603      	mov	r3, r0
 8001c02:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d052      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
 8001c0c:	e35e      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d032      	beq.n	8001c7c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c16:	4b43      	ldr	r3, [pc, #268]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a42      	ldr	r2, [pc, #264]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c22:	f7ff fbb5 	bl	8001390 <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c2a:	f7ff fbb1 	bl	8001390 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e347      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c3c:	4b39      	ldr	r3, [pc, #228]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0f0      	beq.n	8001c2a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c48:	4b36      	ldr	r3, [pc, #216]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a35      	ldr	r2, [pc, #212]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c4e:	f043 0308 	orr.w	r3, r3, #8
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	4b33      	ldr	r3, [pc, #204]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	4930      	ldr	r1, [pc, #192]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c66:	4b2f      	ldr	r3, [pc, #188]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	021b      	lsls	r3, r3, #8
 8001c74:	492b      	ldr	r1, [pc, #172]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	604b      	str	r3, [r1, #4]
 8001c7a:	e01a      	b.n	8001cb2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c7c:	4b29      	ldr	r3, [pc, #164]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a28      	ldr	r2, [pc, #160]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c82:	f023 0301 	bic.w	r3, r3, #1
 8001c86:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c88:	f7ff fb82 	bl	8001390 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c90:	f7ff fb7e 	bl	8001390 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e314      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ca2:	4b20      	ldr	r3, [pc, #128]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f0      	bne.n	8001c90 <HAL_RCC_OscConfig+0x1dc>
 8001cae:	e000      	b.n	8001cb2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cb0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d073      	beq.n	8001da6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d005      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x21c>
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	2b0c      	cmp	r3, #12
 8001cc8:	d10e      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	2b03      	cmp	r3, #3
 8001cce:	d10b      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd0:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d063      	beq.n	8001da4 <HAL_RCC_OscConfig+0x2f0>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d15f      	bne.n	8001da4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e2f1      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf0:	d106      	bne.n	8001d00 <HAL_RCC_OscConfig+0x24c>
 8001cf2:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a0b      	ldr	r2, [pc, #44]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	e025      	b.n	8001d4c <HAL_RCC_OscConfig+0x298>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d08:	d114      	bne.n	8001d34 <HAL_RCC_OscConfig+0x280>
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a05      	ldr	r2, [pc, #20]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	4b03      	ldr	r3, [pc, #12]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a02      	ldr	r2, [pc, #8]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	e013      	b.n	8001d4c <HAL_RCC_OscConfig+0x298>
 8001d24:	40021000 	.word	0x40021000
 8001d28:	08005ff0 	.word	0x08005ff0
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	20000004 	.word	0x20000004
 8001d34:	4ba0      	ldr	r3, [pc, #640]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a9f      	ldr	r2, [pc, #636]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	4b9d      	ldr	r3, [pc, #628]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a9c      	ldr	r2, [pc, #624]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d013      	beq.n	8001d7c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d54:	f7ff fb1c 	bl	8001390 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d5c:	f7ff fb18 	bl	8001390 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b64      	cmp	r3, #100	; 0x64
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e2ae      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d6e:	4b92      	ldr	r3, [pc, #584]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0x2a8>
 8001d7a:	e014      	b.n	8001da6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7c:	f7ff fb08 	bl	8001390 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d84:	f7ff fb04 	bl	8001390 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b64      	cmp	r3, #100	; 0x64
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e29a      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d96:	4b88      	ldr	r3, [pc, #544]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x2d0>
 8001da2:	e000      	b.n	8001da6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d060      	beq.n	8001e74 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d005      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x310>
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	2b0c      	cmp	r3, #12
 8001dbc:	d119      	bne.n	8001df2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d116      	bne.n	8001df2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dc4:	4b7c      	ldr	r3, [pc, #496]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <HAL_RCC_OscConfig+0x328>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e277      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ddc:	4b76      	ldr	r3, [pc, #472]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	061b      	lsls	r3, r3, #24
 8001dea:	4973      	ldr	r1, [pc, #460]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001df0:	e040      	b.n	8001e74 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d023      	beq.n	8001e42 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dfa:	4b6f      	ldr	r3, [pc, #444]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a6e      	ldr	r2, [pc, #440]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e06:	f7ff fac3 	bl	8001390 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e0e:	f7ff fabf 	bl	8001390 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e255      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e20:	4b65      	ldr	r3, [pc, #404]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2c:	4b62      	ldr	r3, [pc, #392]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	061b      	lsls	r3, r3, #24
 8001e3a:	495f      	ldr	r1, [pc, #380]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	604b      	str	r3, [r1, #4]
 8001e40:	e018      	b.n	8001e74 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e42:	4b5d      	ldr	r3, [pc, #372]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a5c      	ldr	r2, [pc, #368]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4e:	f7ff fa9f 	bl	8001390 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e56:	f7ff fa9b 	bl	8001390 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e231      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e68:	4b53      	ldr	r3, [pc, #332]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1f0      	bne.n	8001e56 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d03c      	beq.n	8001efa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d01c      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e88:	4b4b      	ldr	r3, [pc, #300]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e8e:	4a4a      	ldr	r2, [pc, #296]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e98:	f7ff fa7a 	bl	8001390 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea0:	f7ff fa76 	bl	8001390 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e20c      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eb2:	4b41      	ldr	r3, [pc, #260]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0ef      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x3ec>
 8001ec0:	e01b      	b.n	8001efa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ec2:	4b3d      	ldr	r3, [pc, #244]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ec8:	4a3b      	ldr	r2, [pc, #236]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001eca:	f023 0301 	bic.w	r3, r3, #1
 8001ece:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed2:	f7ff fa5d 	bl	8001390 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eda:	f7ff fa59 	bl	8001390 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e1ef      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eec:	4b32      	ldr	r3, [pc, #200]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1ef      	bne.n	8001eda <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 80a6 	beq.w	8002054 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f0c:	4b2a      	ldr	r3, [pc, #168]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10d      	bne.n	8001f34 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f18:	4b27      	ldr	r3, [pc, #156]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1c:	4a26      	ldr	r2, [pc, #152]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f22:	6593      	str	r3, [r2, #88]	; 0x58
 8001f24:	4b24      	ldr	r3, [pc, #144]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f30:	2301      	movs	r3, #1
 8001f32:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f34:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <HAL_RCC_OscConfig+0x508>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d118      	bne.n	8001f72 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f40:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <HAL_RCC_OscConfig+0x508>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a1d      	ldr	r2, [pc, #116]	; (8001fbc <HAL_RCC_OscConfig+0x508>)
 8001f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f4c:	f7ff fa20 	bl	8001390 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f54:	f7ff fa1c 	bl	8001390 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e1b2      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f66:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <HAL_RCC_OscConfig+0x508>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f0      	beq.n	8001f54 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d108      	bne.n	8001f8c <HAL_RCC_OscConfig+0x4d8>
 8001f7a:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f80:	4a0d      	ldr	r2, [pc, #52]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f8a:	e029      	b.n	8001fe0 <HAL_RCC_OscConfig+0x52c>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b05      	cmp	r3, #5
 8001f92:	d115      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x50c>
 8001f94:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9a:	4a07      	ldr	r2, [pc, #28]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001f9c:	f043 0304 	orr.w	r3, r3, #4
 8001fa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fa4:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001faa:	4a03      	ldr	r2, [pc, #12]	; (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fb4:	e014      	b.n	8001fe0 <HAL_RCC_OscConfig+0x52c>
 8001fb6:	bf00      	nop
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40007000 	.word	0x40007000
 8001fc0:	4b9a      	ldr	r3, [pc, #616]	; (800222c <HAL_RCC_OscConfig+0x778>)
 8001fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc6:	4a99      	ldr	r2, [pc, #612]	; (800222c <HAL_RCC_OscConfig+0x778>)
 8001fc8:	f023 0301 	bic.w	r3, r3, #1
 8001fcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fd0:	4b96      	ldr	r3, [pc, #600]	; (800222c <HAL_RCC_OscConfig+0x778>)
 8001fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd6:	4a95      	ldr	r2, [pc, #596]	; (800222c <HAL_RCC_OscConfig+0x778>)
 8001fd8:	f023 0304 	bic.w	r3, r3, #4
 8001fdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d016      	beq.n	8002016 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe8:	f7ff f9d2 	bl	8001390 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fee:	e00a      	b.n	8002006 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff0:	f7ff f9ce 	bl	8001390 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e162      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002006:	4b89      	ldr	r3, [pc, #548]	; (800222c <HAL_RCC_OscConfig+0x778>)
 8002008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0ed      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x53c>
 8002014:	e015      	b.n	8002042 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002016:	f7ff f9bb 	bl	8001390 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800201c:	e00a      	b.n	8002034 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201e:	f7ff f9b7 	bl	8001390 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	f241 3288 	movw	r2, #5000	; 0x1388
 800202c:	4293      	cmp	r3, r2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e14b      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002034:	4b7d      	ldr	r3, [pc, #500]	; (800222c <HAL_RCC_OscConfig+0x778>)
 8002036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1ed      	bne.n	800201e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002042:	7ffb      	ldrb	r3, [r7, #31]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d105      	bne.n	8002054 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002048:	4b78      	ldr	r3, [pc, #480]	; (800222c <HAL_RCC_OscConfig+0x778>)
 800204a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204c:	4a77      	ldr	r2, [pc, #476]	; (800222c <HAL_RCC_OscConfig+0x778>)
 800204e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002052:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0320 	and.w	r3, r3, #32
 800205c:	2b00      	cmp	r3, #0
 800205e:	d03c      	beq.n	80020da <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002064:	2b00      	cmp	r3, #0
 8002066:	d01c      	beq.n	80020a2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002068:	4b70      	ldr	r3, [pc, #448]	; (800222c <HAL_RCC_OscConfig+0x778>)
 800206a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800206e:	4a6f      	ldr	r2, [pc, #444]	; (800222c <HAL_RCC_OscConfig+0x778>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002078:	f7ff f98a 	bl	8001390 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002080:	f7ff f986 	bl	8001390 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e11c      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002092:	4b66      	ldr	r3, [pc, #408]	; (800222c <HAL_RCC_OscConfig+0x778>)
 8002094:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0ef      	beq.n	8002080 <HAL_RCC_OscConfig+0x5cc>
 80020a0:	e01b      	b.n	80020da <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020a2:	4b62      	ldr	r3, [pc, #392]	; (800222c <HAL_RCC_OscConfig+0x778>)
 80020a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020a8:	4a60      	ldr	r2, [pc, #384]	; (800222c <HAL_RCC_OscConfig+0x778>)
 80020aa:	f023 0301 	bic.w	r3, r3, #1
 80020ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b2:	f7ff f96d 	bl	8001390 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020ba:	f7ff f969 	bl	8001390 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e0ff      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020cc:	4b57      	ldr	r3, [pc, #348]	; (800222c <HAL_RCC_OscConfig+0x778>)
 80020ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1ef      	bne.n	80020ba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 80f3 	beq.w	80022ca <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	f040 80c9 	bne.w	8002280 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80020ee:	4b4f      	ldr	r3, [pc, #316]	; (800222c <HAL_RCC_OscConfig+0x778>)
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f003 0203 	and.w	r2, r3, #3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fe:	429a      	cmp	r2, r3
 8002100:	d12c      	bne.n	800215c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210c:	3b01      	subs	r3, #1
 800210e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002110:	429a      	cmp	r2, r3
 8002112:	d123      	bne.n	800215c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800211e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002120:	429a      	cmp	r2, r3
 8002122:	d11b      	bne.n	800215c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002130:	429a      	cmp	r2, r3
 8002132:	d113      	bne.n	800215c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213e:	085b      	lsrs	r3, r3, #1
 8002140:	3b01      	subs	r3, #1
 8002142:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002144:	429a      	cmp	r2, r3
 8002146:	d109      	bne.n	800215c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	085b      	lsrs	r3, r3, #1
 8002154:	3b01      	subs	r3, #1
 8002156:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002158:	429a      	cmp	r2, r3
 800215a:	d06b      	beq.n	8002234 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	2b0c      	cmp	r3, #12
 8002160:	d062      	beq.n	8002228 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002162:	4b32      	ldr	r3, [pc, #200]	; (800222c <HAL_RCC_OscConfig+0x778>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e0ac      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002172:	4b2e      	ldr	r3, [pc, #184]	; (800222c <HAL_RCC_OscConfig+0x778>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a2d      	ldr	r2, [pc, #180]	; (800222c <HAL_RCC_OscConfig+0x778>)
 8002178:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800217c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800217e:	f7ff f907 	bl	8001390 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002186:	f7ff f903 	bl	8001390 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e099      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002198:	4b24      	ldr	r3, [pc, #144]	; (800222c <HAL_RCC_OscConfig+0x778>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1f0      	bne.n	8002186 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021a4:	4b21      	ldr	r3, [pc, #132]	; (800222c <HAL_RCC_OscConfig+0x778>)
 80021a6:	68da      	ldr	r2, [r3, #12]
 80021a8:	4b21      	ldr	r3, [pc, #132]	; (8002230 <HAL_RCC_OscConfig+0x77c>)
 80021aa:	4013      	ands	r3, r2
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021b4:	3a01      	subs	r2, #1
 80021b6:	0112      	lsls	r2, r2, #4
 80021b8:	4311      	orrs	r1, r2
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021be:	0212      	lsls	r2, r2, #8
 80021c0:	4311      	orrs	r1, r2
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021c6:	0852      	lsrs	r2, r2, #1
 80021c8:	3a01      	subs	r2, #1
 80021ca:	0552      	lsls	r2, r2, #21
 80021cc:	4311      	orrs	r1, r2
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021d2:	0852      	lsrs	r2, r2, #1
 80021d4:	3a01      	subs	r2, #1
 80021d6:	0652      	lsls	r2, r2, #25
 80021d8:	4311      	orrs	r1, r2
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021de:	06d2      	lsls	r2, r2, #27
 80021e0:	430a      	orrs	r2, r1
 80021e2:	4912      	ldr	r1, [pc, #72]	; (800222c <HAL_RCC_OscConfig+0x778>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80021e8:	4b10      	ldr	r3, [pc, #64]	; (800222c <HAL_RCC_OscConfig+0x778>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a0f      	ldr	r2, [pc, #60]	; (800222c <HAL_RCC_OscConfig+0x778>)
 80021ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021f4:	4b0d      	ldr	r3, [pc, #52]	; (800222c <HAL_RCC_OscConfig+0x778>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	4a0c      	ldr	r2, [pc, #48]	; (800222c <HAL_RCC_OscConfig+0x778>)
 80021fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002200:	f7ff f8c6 	bl	8001390 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002208:	f7ff f8c2 	bl	8001390 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e058      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800221a:	4b04      	ldr	r3, [pc, #16]	; (800222c <HAL_RCC_OscConfig+0x778>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0f0      	beq.n	8002208 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002226:	e050      	b.n	80022ca <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e04f      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
 800222c:	40021000 	.word	0x40021000
 8002230:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002234:	4b27      	ldr	r3, [pc, #156]	; (80022d4 <HAL_RCC_OscConfig+0x820>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d144      	bne.n	80022ca <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002240:	4b24      	ldr	r3, [pc, #144]	; (80022d4 <HAL_RCC_OscConfig+0x820>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a23      	ldr	r2, [pc, #140]	; (80022d4 <HAL_RCC_OscConfig+0x820>)
 8002246:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800224a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800224c:	4b21      	ldr	r3, [pc, #132]	; (80022d4 <HAL_RCC_OscConfig+0x820>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4a20      	ldr	r2, [pc, #128]	; (80022d4 <HAL_RCC_OscConfig+0x820>)
 8002252:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002256:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002258:	f7ff f89a 	bl	8001390 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002260:	f7ff f896 	bl	8001390 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e02c      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002272:	4b18      	ldr	r3, [pc, #96]	; (80022d4 <HAL_RCC_OscConfig+0x820>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0x7ac>
 800227e:	e024      	b.n	80022ca <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	2b0c      	cmp	r3, #12
 8002284:	d01f      	beq.n	80022c6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002286:	4b13      	ldr	r3, [pc, #76]	; (80022d4 <HAL_RCC_OscConfig+0x820>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a12      	ldr	r2, [pc, #72]	; (80022d4 <HAL_RCC_OscConfig+0x820>)
 800228c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002290:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002292:	f7ff f87d 	bl	8001390 <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800229a:	f7ff f879 	bl	8001390 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e00f      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ac:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <HAL_RCC_OscConfig+0x820>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1f0      	bne.n	800229a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <HAL_RCC_OscConfig+0x820>)
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	4905      	ldr	r1, [pc, #20]	; (80022d4 <HAL_RCC_OscConfig+0x820>)
 80022be:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <HAL_RCC_OscConfig+0x824>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	60cb      	str	r3, [r1, #12]
 80022c4:	e001      	b.n	80022ca <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e000      	b.n	80022cc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3720      	adds	r7, #32
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40021000 	.word	0x40021000
 80022d8:	feeefffc 	.word	0xfeeefffc

080022dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e0e7      	b.n	80024c0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022f0:	4b75      	ldr	r3, [pc, #468]	; (80024c8 <HAL_RCC_ClockConfig+0x1ec>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d910      	bls.n	8002320 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fe:	4b72      	ldr	r3, [pc, #456]	; (80024c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f023 0207 	bic.w	r2, r3, #7
 8002306:	4970      	ldr	r1, [pc, #448]	; (80024c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	4313      	orrs	r3, r2
 800230c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800230e:	4b6e      	ldr	r3, [pc, #440]	; (80024c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	429a      	cmp	r2, r3
 800231a:	d001      	beq.n	8002320 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e0cf      	b.n	80024c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d010      	beq.n	800234e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	4b66      	ldr	r3, [pc, #408]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002338:	429a      	cmp	r2, r3
 800233a:	d908      	bls.n	800234e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800233c:	4b63      	ldr	r3, [pc, #396]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	4960      	ldr	r1, [pc, #384]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 800234a:	4313      	orrs	r3, r2
 800234c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d04c      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b03      	cmp	r3, #3
 8002360:	d107      	bne.n	8002372 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002362:	4b5a      	ldr	r3, [pc, #360]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d121      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e0a6      	b.n	80024c0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b02      	cmp	r3, #2
 8002378:	d107      	bne.n	800238a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800237a:	4b54      	ldr	r3, [pc, #336]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d115      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e09a      	b.n	80024c0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d107      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002392:	4b4e      	ldr	r3, [pc, #312]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d109      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e08e      	b.n	80024c0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023a2:	4b4a      	ldr	r3, [pc, #296]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e086      	b.n	80024c0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023b2:	4b46      	ldr	r3, [pc, #280]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f023 0203 	bic.w	r2, r3, #3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	4943      	ldr	r1, [pc, #268]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023c4:	f7fe ffe4 	bl	8001390 <HAL_GetTick>
 80023c8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ca:	e00a      	b.n	80023e2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023cc:	f7fe ffe0 	bl	8001390 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023da:	4293      	cmp	r3, r2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e06e      	b.n	80024c0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e2:	4b3a      	ldr	r3, [pc, #232]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 020c 	and.w	r2, r3, #12
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d1eb      	bne.n	80023cc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d010      	beq.n	8002422 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	4b31      	ldr	r3, [pc, #196]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800240c:	429a      	cmp	r2, r3
 800240e:	d208      	bcs.n	8002422 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002410:	4b2e      	ldr	r3, [pc, #184]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	492b      	ldr	r1, [pc, #172]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 800241e:	4313      	orrs	r3, r2
 8002420:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002422:	4b29      	ldr	r3, [pc, #164]	; (80024c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	d210      	bcs.n	8002452 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002430:	4b25      	ldr	r3, [pc, #148]	; (80024c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f023 0207 	bic.w	r2, r3, #7
 8002438:	4923      	ldr	r1, [pc, #140]	; (80024c8 <HAL_RCC_ClockConfig+0x1ec>)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	4313      	orrs	r3, r2
 800243e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002440:	4b21      	ldr	r3, [pc, #132]	; (80024c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d001      	beq.n	8002452 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e036      	b.n	80024c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	2b00      	cmp	r3, #0
 800245c:	d008      	beq.n	8002470 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800245e:	4b1b      	ldr	r3, [pc, #108]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	4918      	ldr	r1, [pc, #96]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 800246c:	4313      	orrs	r3, r2
 800246e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0308 	and.w	r3, r3, #8
 8002478:	2b00      	cmp	r3, #0
 800247a:	d009      	beq.n	8002490 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800247c:	4b13      	ldr	r3, [pc, #76]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4910      	ldr	r1, [pc, #64]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 800248c:	4313      	orrs	r3, r2
 800248e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002490:	f000 f824 	bl	80024dc <HAL_RCC_GetSysClockFreq>
 8002494:	4602      	mov	r2, r0
 8002496:	4b0d      	ldr	r3, [pc, #52]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	091b      	lsrs	r3, r3, #4
 800249c:	f003 030f 	and.w	r3, r3, #15
 80024a0:	490b      	ldr	r1, [pc, #44]	; (80024d0 <HAL_RCC_ClockConfig+0x1f4>)
 80024a2:	5ccb      	ldrb	r3, [r1, r3]
 80024a4:	f003 031f 	and.w	r3, r3, #31
 80024a8:	fa22 f303 	lsr.w	r3, r2, r3
 80024ac:	4a09      	ldr	r2, [pc, #36]	; (80024d4 <HAL_RCC_ClockConfig+0x1f8>)
 80024ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024b0:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <HAL_RCC_ClockConfig+0x1fc>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe ff1b 	bl	80012f0 <HAL_InitTick>
 80024ba:	4603      	mov	r3, r0
 80024bc:	72fb      	strb	r3, [r7, #11]

  return status;
 80024be:	7afb      	ldrb	r3, [r7, #11]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40022000 	.word	0x40022000
 80024cc:	40021000 	.word	0x40021000
 80024d0:	08005ff0 	.word	0x08005ff0
 80024d4:	20000000 	.word	0x20000000
 80024d8:	20000004 	.word	0x20000004

080024dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	b089      	sub	sp, #36	; 0x24
 80024e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
 80024e6:	2300      	movs	r3, #0
 80024e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ea:	4b3e      	ldr	r3, [pc, #248]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 030c 	and.w	r3, r3, #12
 80024f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024f4:	4b3b      	ldr	r3, [pc, #236]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f003 0303 	and.w	r3, r3, #3
 80024fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d005      	beq.n	8002510 <HAL_RCC_GetSysClockFreq+0x34>
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	2b0c      	cmp	r3, #12
 8002508:	d121      	bne.n	800254e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d11e      	bne.n	800254e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002510:	4b34      	ldr	r3, [pc, #208]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0308 	and.w	r3, r3, #8
 8002518:	2b00      	cmp	r3, #0
 800251a:	d107      	bne.n	800252c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800251c:	4b31      	ldr	r3, [pc, #196]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800251e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002522:	0a1b      	lsrs	r3, r3, #8
 8002524:	f003 030f 	and.w	r3, r3, #15
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	e005      	b.n	8002538 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800252c:	4b2d      	ldr	r3, [pc, #180]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	091b      	lsrs	r3, r3, #4
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002538:	4a2b      	ldr	r2, [pc, #172]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002540:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10d      	bne.n	8002564 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800254c:	e00a      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	2b04      	cmp	r3, #4
 8002552:	d102      	bne.n	800255a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002554:	4b25      	ldr	r3, [pc, #148]	; (80025ec <HAL_RCC_GetSysClockFreq+0x110>)
 8002556:	61bb      	str	r3, [r7, #24]
 8002558:	e004      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	2b08      	cmp	r3, #8
 800255e:	d101      	bne.n	8002564 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002560:	4b23      	ldr	r3, [pc, #140]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002562:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	2b0c      	cmp	r3, #12
 8002568:	d134      	bne.n	80025d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800256a:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2b02      	cmp	r3, #2
 8002578:	d003      	beq.n	8002582 <HAL_RCC_GetSysClockFreq+0xa6>
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	2b03      	cmp	r3, #3
 800257e:	d003      	beq.n	8002588 <HAL_RCC_GetSysClockFreq+0xac>
 8002580:	e005      	b.n	800258e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002582:	4b1a      	ldr	r3, [pc, #104]	; (80025ec <HAL_RCC_GetSysClockFreq+0x110>)
 8002584:	617b      	str	r3, [r7, #20]
      break;
 8002586:	e005      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002588:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800258a:	617b      	str	r3, [r7, #20]
      break;
 800258c:	e002      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	617b      	str	r3, [r7, #20]
      break;
 8002592:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002594:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	091b      	lsrs	r3, r3, #4
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	3301      	adds	r3, #1
 80025a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025a2:	4b10      	ldr	r3, [pc, #64]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	0a1b      	lsrs	r3, r3, #8
 80025a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	fb03 f202 	mul.w	r2, r3, r2
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025ba:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	0e5b      	lsrs	r3, r3, #25
 80025c0:	f003 0303 	and.w	r3, r3, #3
 80025c4:	3301      	adds	r3, #1
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80025d4:	69bb      	ldr	r3, [r7, #24]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3724      	adds	r7, #36	; 0x24
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40021000 	.word	0x40021000
 80025e8:	08006008 	.word	0x08006008
 80025ec:	00f42400 	.word	0x00f42400
 80025f0:	007a1200 	.word	0x007a1200

080025f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025f8:	4b03      	ldr	r3, [pc, #12]	; (8002608 <HAL_RCC_GetHCLKFreq+0x14>)
 80025fa:	681b      	ldr	r3, [r3, #0]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	20000000 	.word	0x20000000

0800260c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002610:	f7ff fff0 	bl	80025f4 <HAL_RCC_GetHCLKFreq>
 8002614:	4602      	mov	r2, r0
 8002616:	4b06      	ldr	r3, [pc, #24]	; (8002630 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	0a1b      	lsrs	r3, r3, #8
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	4904      	ldr	r1, [pc, #16]	; (8002634 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002622:	5ccb      	ldrb	r3, [r1, r3]
 8002624:	f003 031f 	and.w	r3, r3, #31
 8002628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800262c:	4618      	mov	r0, r3
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40021000 	.word	0x40021000
 8002634:	08006000 	.word	0x08006000

08002638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800263c:	f7ff ffda 	bl	80025f4 <HAL_RCC_GetHCLKFreq>
 8002640:	4602      	mov	r2, r0
 8002642:	4b06      	ldr	r3, [pc, #24]	; (800265c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	0adb      	lsrs	r3, r3, #11
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	4904      	ldr	r1, [pc, #16]	; (8002660 <HAL_RCC_GetPCLK2Freq+0x28>)
 800264e:	5ccb      	ldrb	r3, [r1, r3]
 8002650:	f003 031f 	and.w	r3, r3, #31
 8002654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002658:	4618      	mov	r0, r3
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40021000 	.word	0x40021000
 8002660:	08006000 	.word	0x08006000

08002664 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800266c:	2300      	movs	r3, #0
 800266e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002670:	4b2a      	ldr	r3, [pc, #168]	; (800271c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800267c:	f7ff f9b6 	bl	80019ec <HAL_PWREx_GetVoltageRange>
 8002680:	6178      	str	r0, [r7, #20]
 8002682:	e014      	b.n	80026ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002684:	4b25      	ldr	r3, [pc, #148]	; (800271c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002688:	4a24      	ldr	r2, [pc, #144]	; (800271c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800268a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800268e:	6593      	str	r3, [r2, #88]	; 0x58
 8002690:	4b22      	ldr	r3, [pc, #136]	; (800271c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800269c:	f7ff f9a6 	bl	80019ec <HAL_PWREx_GetVoltageRange>
 80026a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026a2:	4b1e      	ldr	r3, [pc, #120]	; (800271c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a6:	4a1d      	ldr	r2, [pc, #116]	; (800271c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026b4:	d10b      	bne.n	80026ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b80      	cmp	r3, #128	; 0x80
 80026ba:	d919      	bls.n	80026f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2ba0      	cmp	r3, #160	; 0xa0
 80026c0:	d902      	bls.n	80026c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026c2:	2302      	movs	r3, #2
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	e013      	b.n	80026f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026c8:	2301      	movs	r3, #1
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	e010      	b.n	80026f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b80      	cmp	r3, #128	; 0x80
 80026d2:	d902      	bls.n	80026da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026d4:	2303      	movs	r3, #3
 80026d6:	613b      	str	r3, [r7, #16]
 80026d8:	e00a      	b.n	80026f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b80      	cmp	r3, #128	; 0x80
 80026de:	d102      	bne.n	80026e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026e0:	2302      	movs	r3, #2
 80026e2:	613b      	str	r3, [r7, #16]
 80026e4:	e004      	b.n	80026f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b70      	cmp	r3, #112	; 0x70
 80026ea:	d101      	bne.n	80026f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026ec:	2301      	movs	r3, #1
 80026ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026f0:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f023 0207 	bic.w	r2, r3, #7
 80026f8:	4909      	ldr	r1, [pc, #36]	; (8002720 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002700:	4b07      	ldr	r3, [pc, #28]	; (8002720 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	429a      	cmp	r2, r3
 800270c:	d001      	beq.n	8002712 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40021000 	.word	0x40021000
 8002720:	40022000 	.word	0x40022000

08002724 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800272c:	2300      	movs	r3, #0
 800272e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002730:	2300      	movs	r3, #0
 8002732:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800273c:	2b00      	cmp	r3, #0
 800273e:	d031      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002744:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002748:	d01a      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800274a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800274e:	d814      	bhi.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002750:	2b00      	cmp	r3, #0
 8002752:	d009      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002754:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002758:	d10f      	bne.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800275a:	4b5d      	ldr	r3, [pc, #372]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	4a5c      	ldr	r2, [pc, #368]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002764:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002766:	e00c      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3304      	adds	r3, #4
 800276c:	2100      	movs	r1, #0
 800276e:	4618      	mov	r0, r3
 8002770:	f000 f9de 	bl	8002b30 <RCCEx_PLLSAI1_Config>
 8002774:	4603      	mov	r3, r0
 8002776:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002778:	e003      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	74fb      	strb	r3, [r7, #19]
      break;
 800277e:	e000      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002780:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002782:	7cfb      	ldrb	r3, [r7, #19]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10b      	bne.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002788:	4b51      	ldr	r3, [pc, #324]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800278a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002796:	494e      	ldr	r1, [pc, #312]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002798:	4313      	orrs	r3, r2
 800279a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800279e:	e001      	b.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027a0:	7cfb      	ldrb	r3, [r7, #19]
 80027a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 809e 	beq.w	80028ee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027b2:	2300      	movs	r3, #0
 80027b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027b6:	4b46      	ldr	r3, [pc, #280]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80027c2:	2301      	movs	r3, #1
 80027c4:	e000      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80027c6:	2300      	movs	r3, #0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00d      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027cc:	4b40      	ldr	r3, [pc, #256]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d0:	4a3f      	ldr	r2, [pc, #252]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d6:	6593      	str	r3, [r2, #88]	; 0x58
 80027d8:	4b3d      	ldr	r3, [pc, #244]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027e4:	2301      	movs	r3, #1
 80027e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027e8:	4b3a      	ldr	r3, [pc, #232]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a39      	ldr	r2, [pc, #228]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80027ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027f4:	f7fe fdcc 	bl	8001390 <HAL_GetTick>
 80027f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027fa:	e009      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027fc:	f7fe fdc8 	bl	8001390 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d902      	bls.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	74fb      	strb	r3, [r7, #19]
        break;
 800280e:	e005      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002810:	4b30      	ldr	r3, [pc, #192]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0ef      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800281c:	7cfb      	ldrb	r3, [r7, #19]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d15a      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002822:	4b2b      	ldr	r3, [pc, #172]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002828:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800282c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d01e      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	429a      	cmp	r2, r3
 800283c:	d019      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800283e:	4b24      	ldr	r3, [pc, #144]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002848:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800284a:	4b21      	ldr	r3, [pc, #132]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800284c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002850:	4a1f      	ldr	r2, [pc, #124]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002856:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800285a:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800285c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002860:	4a1b      	ldr	r2, [pc, #108]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002866:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800286a:	4a19      	ldr	r2, [pc, #100]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b00      	cmp	r3, #0
 800287a:	d016      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287c:	f7fe fd88 	bl	8001390 <HAL_GetTick>
 8002880:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002882:	e00b      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002884:	f7fe fd84 	bl	8001390 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002892:	4293      	cmp	r3, r2
 8002894:	d902      	bls.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	74fb      	strb	r3, [r7, #19]
            break;
 800289a:	e006      	b.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800289c:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800289e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0ec      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80028aa:	7cfb      	ldrb	r3, [r7, #19]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10b      	bne.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028b0:	4b07      	ldr	r3, [pc, #28]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028be:	4904      	ldr	r1, [pc, #16]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028c6:	e009      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028c8:	7cfb      	ldrb	r3, [r7, #19]
 80028ca:	74bb      	strb	r3, [r7, #18]
 80028cc:	e006      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80028ce:	bf00      	nop
 80028d0:	40021000 	.word	0x40021000
 80028d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d8:	7cfb      	ldrb	r3, [r7, #19]
 80028da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028dc:	7c7b      	ldrb	r3, [r7, #17]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d105      	bne.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e2:	4b8a      	ldr	r3, [pc, #552]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e6:	4a89      	ldr	r2, [pc, #548]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00a      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028fa:	4b84      	ldr	r3, [pc, #528]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002900:	f023 0203 	bic.w	r2, r3, #3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	4980      	ldr	r1, [pc, #512]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800290a:	4313      	orrs	r3, r2
 800290c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00a      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800291c:	4b7b      	ldr	r3, [pc, #492]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800291e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002922:	f023 020c 	bic.w	r2, r3, #12
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	4978      	ldr	r1, [pc, #480]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800292c:	4313      	orrs	r3, r2
 800292e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0320 	and.w	r3, r3, #32
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00a      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800293e:	4b73      	ldr	r3, [pc, #460]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002944:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294c:	496f      	ldr	r1, [pc, #444]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800294e:	4313      	orrs	r3, r2
 8002950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00a      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002960:	4b6a      	ldr	r3, [pc, #424]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002966:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800296e:	4967      	ldr	r1, [pc, #412]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002970:	4313      	orrs	r3, r2
 8002972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00a      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002982:	4b62      	ldr	r3, [pc, #392]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002988:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002990:	495e      	ldr	r1, [pc, #376]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00a      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029a4:	4b59      	ldr	r3, [pc, #356]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b2:	4956      	ldr	r1, [pc, #344]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00a      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029c6:	4b51      	ldr	r3, [pc, #324]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	494d      	ldr	r1, [pc, #308]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d028      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029e8:	4b48      	ldr	r3, [pc, #288]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	4945      	ldr	r1, [pc, #276]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a06:	d106      	bne.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a08:	4b40      	ldr	r3, [pc, #256]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	4a3f      	ldr	r2, [pc, #252]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a12:	60d3      	str	r3, [r2, #12]
 8002a14:	e011      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a1e:	d10c      	bne.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3304      	adds	r3, #4
 8002a24:	2101      	movs	r1, #1
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 f882 	bl	8002b30 <RCCEx_PLLSAI1_Config>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a30:	7cfb      	ldrb	r3, [r7, #19]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002a36:	7cfb      	ldrb	r3, [r7, #19]
 8002a38:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d028      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a46:	4b31      	ldr	r3, [pc, #196]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a54:	492d      	ldr	r1, [pc, #180]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a64:	d106      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a66:	4b29      	ldr	r3, [pc, #164]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	4a28      	ldr	r2, [pc, #160]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a70:	60d3      	str	r3, [r2, #12]
 8002a72:	e011      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a7c:	d10c      	bne.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3304      	adds	r3, #4
 8002a82:	2101      	movs	r1, #1
 8002a84:	4618      	mov	r0, r3
 8002a86:	f000 f853 	bl	8002b30 <RCCEx_PLLSAI1_Config>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a8e:	7cfb      	ldrb	r3, [r7, #19]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002a94:	7cfb      	ldrb	r3, [r7, #19]
 8002a96:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d01c      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002aa4:	4b19      	ldr	r3, [pc, #100]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aaa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab2:	4916      	ldr	r1, [pc, #88]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002abe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ac2:	d10c      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3304      	adds	r3, #4
 8002ac8:	2102      	movs	r1, #2
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 f830 	bl	8002b30 <RCCEx_PLLSAI1_Config>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ad4:	7cfb      	ldrb	r3, [r7, #19]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002ada:	7cfb      	ldrb	r3, [r7, #19]
 8002adc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00a      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002aea:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af8:	4904      	ldr	r1, [pc, #16]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b00:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40021000 	.word	0x40021000

08002b10 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002b14:	4b05      	ldr	r3, [pc, #20]	; (8002b2c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a04      	ldr	r2, [pc, #16]	; (8002b2c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002b1a:	f043 0304 	orr.w	r3, r3, #4
 8002b1e:	6013      	str	r3, [r2, #0]
}
 8002b20:	bf00      	nop
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40021000 	.word	0x40021000

08002b30 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b3e:	4b74      	ldr	r3, [pc, #464]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	f003 0303 	and.w	r3, r3, #3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d018      	beq.n	8002b7c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b4a:	4b71      	ldr	r3, [pc, #452]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f003 0203 	and.w	r2, r3, #3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d10d      	bne.n	8002b76 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
       ||
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d009      	beq.n	8002b76 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b62:	4b6b      	ldr	r3, [pc, #428]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	091b      	lsrs	r3, r3, #4
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
       ||
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d047      	beq.n	8002c06 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	73fb      	strb	r3, [r7, #15]
 8002b7a:	e044      	b.n	8002c06 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b03      	cmp	r3, #3
 8002b82:	d018      	beq.n	8002bb6 <RCCEx_PLLSAI1_Config+0x86>
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d825      	bhi.n	8002bd4 <RCCEx_PLLSAI1_Config+0xa4>
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d002      	beq.n	8002b92 <RCCEx_PLLSAI1_Config+0x62>
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d009      	beq.n	8002ba4 <RCCEx_PLLSAI1_Config+0x74>
 8002b90:	e020      	b.n	8002bd4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b92:	4b5f      	ldr	r3, [pc, #380]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d11d      	bne.n	8002bda <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ba2:	e01a      	b.n	8002bda <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ba4:	4b5a      	ldr	r3, [pc, #360]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d116      	bne.n	8002bde <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bb4:	e013      	b.n	8002bde <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bb6:	4b56      	ldr	r3, [pc, #344]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10f      	bne.n	8002be2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bc2:	4b53      	ldr	r3, [pc, #332]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d109      	bne.n	8002be2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bd2:	e006      	b.n	8002be2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8002bd8:	e004      	b.n	8002be4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bda:	bf00      	nop
 8002bdc:	e002      	b.n	8002be4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bde:	bf00      	nop
 8002be0:	e000      	b.n	8002be4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002be2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10d      	bne.n	8002c06 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bea:	4b49      	ldr	r3, [pc, #292]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6819      	ldr	r1, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	430b      	orrs	r3, r1
 8002c00:	4943      	ldr	r1, [pc, #268]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c06:	7bfb      	ldrb	r3, [r7, #15]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d17c      	bne.n	8002d06 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c0c:	4b40      	ldr	r3, [pc, #256]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a3f      	ldr	r2, [pc, #252]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c18:	f7fe fbba 	bl	8001390 <HAL_GetTick>
 8002c1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c1e:	e009      	b.n	8002c34 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c20:	f7fe fbb6 	bl	8001390 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d902      	bls.n	8002c34 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	73fb      	strb	r3, [r7, #15]
        break;
 8002c32:	e005      	b.n	8002c40 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c34:	4b36      	ldr	r3, [pc, #216]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1ef      	bne.n	8002c20 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d15f      	bne.n	8002d06 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d110      	bne.n	8002c6e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c4c:	4b30      	ldr	r3, [pc, #192]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002c54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6892      	ldr	r2, [r2, #8]
 8002c5c:	0211      	lsls	r1, r2, #8
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	68d2      	ldr	r2, [r2, #12]
 8002c62:	06d2      	lsls	r2, r2, #27
 8002c64:	430a      	orrs	r2, r1
 8002c66:	492a      	ldr	r1, [pc, #168]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	610b      	str	r3, [r1, #16]
 8002c6c:	e027      	b.n	8002cbe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d112      	bne.n	8002c9a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c74:	4b26      	ldr	r3, [pc, #152]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6892      	ldr	r2, [r2, #8]
 8002c84:	0211      	lsls	r1, r2, #8
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6912      	ldr	r2, [r2, #16]
 8002c8a:	0852      	lsrs	r2, r2, #1
 8002c8c:	3a01      	subs	r2, #1
 8002c8e:	0552      	lsls	r2, r2, #21
 8002c90:	430a      	orrs	r2, r1
 8002c92:	491f      	ldr	r1, [pc, #124]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	610b      	str	r3, [r1, #16]
 8002c98:	e011      	b.n	8002cbe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c9a:	4b1d      	ldr	r3, [pc, #116]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ca2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6892      	ldr	r2, [r2, #8]
 8002caa:	0211      	lsls	r1, r2, #8
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6952      	ldr	r2, [r2, #20]
 8002cb0:	0852      	lsrs	r2, r2, #1
 8002cb2:	3a01      	subs	r2, #1
 8002cb4:	0652      	lsls	r2, r2, #25
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	4915      	ldr	r1, [pc, #84]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002cbe:	4b14      	ldr	r3, [pc, #80]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a13      	ldr	r2, [pc, #76]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cc8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cca:	f7fe fb61 	bl	8001390 <HAL_GetTick>
 8002cce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cd0:	e009      	b.n	8002ce6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cd2:	f7fe fb5d 	bl	8001390 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d902      	bls.n	8002ce6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	73fb      	strb	r3, [r7, #15]
          break;
 8002ce4:	e005      	b.n	8002cf2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ce6:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0ef      	beq.n	8002cd2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d106      	bne.n	8002d06 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002cf8:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cfa:	691a      	ldr	r2, [r3, #16]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	4903      	ldr	r1, [pc, #12]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40021000 	.word	0x40021000

08002d14 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e049      	b.n	8002dba <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	795b      	ldrb	r3, [r3, #5]
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d105      	bne.n	8002d3c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7fe f8a6 	bl	8000e88 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f042 0204 	orr.w	r2, r2, #4
 8002d50:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5c:	2b40      	cmp	r3, #64	; 0x40
 8002d5e:	d104      	bne.n	8002d6a <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2204      	movs	r2, #4
 8002d64:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e027      	b.n	8002dba <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8002d6a:	f7fe fb11 	bl	8001390 <HAL_GetTick>
 8002d6e:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8002d70:	e015      	b.n	8002d9e <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002d72:	f7fe fb0d 	bl	8001390 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d90e      	bls.n	8002d9e <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f003 0304 	and.w	r3, r3, #4
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d107      	bne.n	8002d9e <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2204      	movs	r2, #4
 8002d92:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2202      	movs	r2, #2
 8002d98:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e00d      	b.n	8002dba <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b04      	cmp	r3, #4
 8002daa:	d0e2      	beq.n	8002d72 <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b084      	sub	sp, #16
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	791b      	ldrb	r3, [r3, #4]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_RNG_GenerateRandomNumber+0x1a>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e044      	b.n	8002e66 <HAL_RNG_GenerateRandomNumber+0xa4>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	795b      	ldrb	r3, [r3, #5]
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d133      	bne.n	8002e54 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	715a      	strb	r2, [r3, #5]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 8002df2:	f7fe facd 	bl	8001390 <HAL_GetTick>
 8002df6:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002df8:	e018      	b.n	8002e2c <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002dfa:	f7fe fac9 	bl	8001390 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d911      	bls.n	8002e2c <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d00a      	beq.n	8002e2c <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e01c      	b.n	8002e66 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d1df      	bne.n	8002dfa <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	60da      	str	r2, [r3, #12]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68da      	ldr	r2, [r3, #12]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	715a      	strb	r2, [r3, #5]
 8002e52:	e004      	b.n	8002e5e <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2204      	movs	r2, #4
 8002e58:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	711a      	strb	r2, [r3, #4]

  return status;
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b082      	sub	sp, #8
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e049      	b.n	8002f14 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d106      	bne.n	8002e9a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7fe f83b 	bl	8000f10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4610      	mov	r0, r2
 8002eae:	f000 f9e3 	bl	8003278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d001      	beq.n	8002f34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e03b      	b.n	8002fac <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68da      	ldr	r2, [r3, #12]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a19      	ldr	r2, [pc, #100]	; (8002fb8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d009      	beq.n	8002f6a <HAL_TIM_Base_Start_IT+0x4e>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f5e:	d004      	beq.n	8002f6a <HAL_TIM_Base_Start_IT+0x4e>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a15      	ldr	r2, [pc, #84]	; (8002fbc <HAL_TIM_Base_Start_IT+0xa0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d115      	bne.n	8002f96 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	4b13      	ldr	r3, [pc, #76]	; (8002fc0 <HAL_TIM_Base_Start_IT+0xa4>)
 8002f72:	4013      	ands	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2b06      	cmp	r3, #6
 8002f7a:	d015      	beq.n	8002fa8 <HAL_TIM_Base_Start_IT+0x8c>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f82:	d011      	beq.n	8002fa8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0201 	orr.w	r2, r2, #1
 8002f92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f94:	e008      	b.n	8002fa8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f042 0201 	orr.w	r2, r2, #1
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	e000      	b.n	8002faa <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	40012c00 	.word	0x40012c00
 8002fbc:	40014000 	.word	0x40014000
 8002fc0:	00010007 	.word	0x00010007

08002fc4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0201 	bic.w	r2, r2, #1
 8002fda:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6a1a      	ldr	r2, [r3, #32]
 8002fe2:	f241 1311 	movw	r3, #4369	; 0x1111
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10f      	bne.n	800300c <HAL_TIM_Base_Stop_IT+0x48>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6a1a      	ldr	r2, [r3, #32]
 8002ff2:	f240 4344 	movw	r3, #1092	; 0x444
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d107      	bne.n	800300c <HAL_TIM_Base_Stop_IT+0x48>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0201 	bic.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b084      	sub	sp, #16
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d020      	beq.n	8003086 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d01b      	beq.n	8003086 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f06f 0202 	mvn.w	r2, #2
 8003056:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	f003 0303 	and.w	r3, r3, #3
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f8e4 	bl	800323a <HAL_TIM_IC_CaptureCallback>
 8003072:	e005      	b.n	8003080 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f8d6 	bl	8003226 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f8e7 	bl	800324e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	d020      	beq.n	80030d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f003 0304 	and.w	r3, r3, #4
 8003096:	2b00      	cmp	r3, #0
 8003098:	d01b      	beq.n	80030d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f06f 0204 	mvn.w	r2, #4
 80030a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f8be 	bl	800323a <HAL_TIM_IC_CaptureCallback>
 80030be:	e005      	b.n	80030cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 f8b0 	bl	8003226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f8c1 	bl	800324e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	f003 0308 	and.w	r3, r3, #8
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d020      	beq.n	800311e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d01b      	beq.n	800311e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f06f 0208 	mvn.w	r2, #8
 80030ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2204      	movs	r2, #4
 80030f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	f003 0303 	and.w	r3, r3, #3
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f898 	bl	800323a <HAL_TIM_IC_CaptureCallback>
 800310a:	e005      	b.n	8003118 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f88a 	bl	8003226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f89b 	bl	800324e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	2b00      	cmp	r3, #0
 8003126:	d020      	beq.n	800316a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f003 0310 	and.w	r3, r3, #16
 800312e:	2b00      	cmp	r3, #0
 8003130:	d01b      	beq.n	800316a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f06f 0210 	mvn.w	r2, #16
 800313a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2208      	movs	r2, #8
 8003140:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 f872 	bl	800323a <HAL_TIM_IC_CaptureCallback>
 8003156:	e005      	b.n	8003164 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f864 	bl	8003226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f875 	bl	800324e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00c      	beq.n	800318e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d007      	beq.n	800318e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f06f 0201 	mvn.w	r2, #1
 8003186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f7fd fe2d 	bl	8000de8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00c      	beq.n	80031b2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d007      	beq.n	80031b2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f937 	bl	8003420 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00c      	beq.n	80031d6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d007      	beq.n	80031d6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80031ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 f92f 	bl	8003434 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00c      	beq.n	80031fa <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d007      	beq.n	80031fa <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f834 	bl	8003262 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	f003 0320 	and.w	r3, r3, #32
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00c      	beq.n	800321e <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f003 0320 	and.w	r3, r3, #32
 800320a:	2b00      	cmp	r3, #0
 800320c:	d007      	beq.n	800321e <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f06f 0220 	mvn.w	r2, #32
 8003216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 f8f7 	bl	800340c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800321e:	bf00      	nop
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
	...

08003278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a2a      	ldr	r2, [pc, #168]	; (8003334 <TIM_Base_SetConfig+0xbc>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d003      	beq.n	8003298 <TIM_Base_SetConfig+0x20>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003296:	d108      	bne.n	80032aa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a21      	ldr	r2, [pc, #132]	; (8003334 <TIM_Base_SetConfig+0xbc>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00b      	beq.n	80032ca <TIM_Base_SetConfig+0x52>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b8:	d007      	beq.n	80032ca <TIM_Base_SetConfig+0x52>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a1e      	ldr	r2, [pc, #120]	; (8003338 <TIM_Base_SetConfig+0xc0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d003      	beq.n	80032ca <TIM_Base_SetConfig+0x52>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a1d      	ldr	r2, [pc, #116]	; (800333c <TIM_Base_SetConfig+0xc4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d108      	bne.n	80032dc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	4313      	orrs	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a0c      	ldr	r2, [pc, #48]	; (8003334 <TIM_Base_SetConfig+0xbc>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d007      	beq.n	8003318 <TIM_Base_SetConfig+0xa0>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a0b      	ldr	r2, [pc, #44]	; (8003338 <TIM_Base_SetConfig+0xc0>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d003      	beq.n	8003318 <TIM_Base_SetConfig+0xa0>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a0a      	ldr	r2, [pc, #40]	; (800333c <TIM_Base_SetConfig+0xc4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d103      	bne.n	8003320 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	691a      	ldr	r2, [r3, #16]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	615a      	str	r2, [r3, #20]
}
 8003326:	bf00      	nop
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	40012c00 	.word	0x40012c00
 8003338:	40014000 	.word	0x40014000
 800333c:	40014400 	.word	0x40014400

08003340 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003350:	2b01      	cmp	r3, #1
 8003352:	d101      	bne.n	8003358 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003354:	2302      	movs	r3, #2
 8003356:	e04f      	b.n	80033f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2202      	movs	r2, #2
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a21      	ldr	r2, [pc, #132]	; (8003404 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d108      	bne.n	8003394 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003388:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	4313      	orrs	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800339a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a14      	ldr	r2, [pc, #80]	; (8003404 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d009      	beq.n	80033cc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c0:	d004      	beq.n	80033cc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a10      	ldr	r2, [pc, #64]	; (8003408 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d10c      	bne.n	80033e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	4313      	orrs	r3, r2
 80033dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	40012c00 	.word	0x40012c00
 8003408:	40014000 	.word	0x40014000

0800340c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e040      	b.n	80034dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800345e:	2b00      	cmp	r3, #0
 8003460:	d106      	bne.n	8003470 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7fd fd76 	bl	8000f5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2224      	movs	r2, #36	; 0x24
 8003474:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0201 	bic.w	r2, r2, #1
 8003484:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 fe34 	bl	80040fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 fc05 	bl	8003ca4 <UART_SetConfig>
 800349a:	4603      	mov	r3, r0
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e01b      	b.n	80034dc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0201 	orr.w	r2, r2, #1
 80034d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 feb3 	bl	8004240 <UART_CheckIdleState>
 80034da:	4603      	mov	r3, r0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08a      	sub	sp, #40	; 0x28
 80034e8:	af02      	add	r7, sp, #8
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	603b      	str	r3, [r7, #0]
 80034f0:	4613      	mov	r3, r2
 80034f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034f8:	2b20      	cmp	r3, #32
 80034fa:	d178      	bne.n	80035ee <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d002      	beq.n	8003508 <HAL_UART_Transmit+0x24>
 8003502:	88fb      	ldrh	r3, [r7, #6]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e071      	b.n	80035f0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2221      	movs	r2, #33	; 0x21
 8003518:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800351a:	f7fd ff39 	bl	8001390 <HAL_GetTick>
 800351e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	88fa      	ldrh	r2, [r7, #6]
 8003524:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	88fa      	ldrh	r2, [r7, #6]
 800352c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003538:	d108      	bne.n	800354c <HAL_UART_Transmit+0x68>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d104      	bne.n	800354c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003542:	2300      	movs	r3, #0
 8003544:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	61bb      	str	r3, [r7, #24]
 800354a:	e003      	b.n	8003554 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003550:	2300      	movs	r3, #0
 8003552:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003554:	e030      	b.n	80035b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2200      	movs	r2, #0
 800355e:	2180      	movs	r1, #128	; 0x80
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 ff15 	bl	8004390 <UART_WaitOnFlagUntilTimeout>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d004      	beq.n	8003576 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2220      	movs	r2, #32
 8003570:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e03c      	b.n	80035f0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10b      	bne.n	8003594 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	881a      	ldrh	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003588:	b292      	uxth	r2, r2
 800358a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	3302      	adds	r3, #2
 8003590:	61bb      	str	r3, [r7, #24]
 8003592:	e008      	b.n	80035a6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	781a      	ldrb	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	b292      	uxth	r2, r2
 800359e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	3301      	adds	r3, #1
 80035a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	3b01      	subs	r3, #1
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035be:	b29b      	uxth	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1c8      	bne.n	8003556 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	2200      	movs	r2, #0
 80035cc:	2140      	movs	r1, #64	; 0x40
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 fede 	bl	8004390 <UART_WaitOnFlagUntilTimeout>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d004      	beq.n	80035e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2220      	movs	r2, #32
 80035de:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e005      	b.n	80035f0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2220      	movs	r2, #32
 80035e8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	e000      	b.n	80035f0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80035ee:	2302      	movs	r3, #2
  }
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3720      	adds	r7, #32
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b08a      	sub	sp, #40	; 0x28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	4613      	mov	r3, r2
 8003604:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800360c:	2b20      	cmp	r3, #32
 800360e:	d137      	bne.n	8003680 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <HAL_UART_Receive_IT+0x24>
 8003616:	88fb      	ldrh	r3, [r7, #6]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e030      	b.n	8003682 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a18      	ldr	r2, [pc, #96]	; (800368c <HAL_UART_Receive_IT+0x94>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d01f      	beq.n	8003670 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d018      	beq.n	8003670 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	e853 3f00 	ldrex	r3, [r3]
 800364a:	613b      	str	r3, [r7, #16]
   return(result);
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003652:	627b      	str	r3, [r7, #36]	; 0x24
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	461a      	mov	r2, r3
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	623b      	str	r3, [r7, #32]
 800365e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003660:	69f9      	ldr	r1, [r7, #28]
 8003662:	6a3a      	ldr	r2, [r7, #32]
 8003664:	e841 2300 	strex	r3, r2, [r1]
 8003668:	61bb      	str	r3, [r7, #24]
   return(result);
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1e6      	bne.n	800363e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003670:	88fb      	ldrh	r3, [r7, #6]
 8003672:	461a      	mov	r2, r3
 8003674:	68b9      	ldr	r1, [r7, #8]
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 fef2 	bl	8004460 <UART_Start_Receive_IT>
 800367c:	4603      	mov	r3, r0
 800367e:	e000      	b.n	8003682 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003680:	2302      	movs	r3, #2
  }
}
 8003682:	4618      	mov	r0, r3
 8003684:	3728      	adds	r7, #40	; 0x28
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40008000 	.word	0x40008000

08003690 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b0ba      	sub	sp, #232	; 0xe8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80036b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80036ba:	f640 030f 	movw	r3, #2063	; 0x80f
 80036be:	4013      	ands	r3, r2
 80036c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80036c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d115      	bne.n	80036f8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80036cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036d0:	f003 0320 	and.w	r3, r3, #32
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00f      	beq.n	80036f8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80036d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036dc:	f003 0320 	and.w	r3, r3, #32
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d009      	beq.n	80036f8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 82ae 	beq.w	8003c4a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	4798      	blx	r3
      }
      return;
 80036f6:	e2a8      	b.n	8003c4a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80036f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 8117 	beq.w	8003930 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d106      	bne.n	800371c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800370e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003712:	4b85      	ldr	r3, [pc, #532]	; (8003928 <HAL_UART_IRQHandler+0x298>)
 8003714:	4013      	ands	r3, r2
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 810a 	beq.w	8003930 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800371c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b00      	cmp	r3, #0
 8003726:	d011      	beq.n	800374c <HAL_UART_IRQHandler+0xbc>
 8003728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800372c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00b      	beq.n	800374c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2201      	movs	r2, #1
 800373a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003742:	f043 0201 	orr.w	r2, r3, #1
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800374c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d011      	beq.n	800377c <HAL_UART_IRQHandler+0xec>
 8003758:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00b      	beq.n	800377c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2202      	movs	r2, #2
 800376a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003772:	f043 0204 	orr.w	r2, r3, #4
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800377c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	d011      	beq.n	80037ac <HAL_UART_IRQHandler+0x11c>
 8003788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00b      	beq.n	80037ac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2204      	movs	r2, #4
 800379a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037a2:	f043 0202 	orr.w	r2, r3, #2
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80037ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037b0:	f003 0308 	and.w	r3, r3, #8
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d017      	beq.n	80037e8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80037b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037bc:	f003 0320 	and.w	r3, r3, #32
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d105      	bne.n	80037d0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80037c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037c8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00b      	beq.n	80037e8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2208      	movs	r2, #8
 80037d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037de:	f043 0208 	orr.w	r2, r3, #8
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80037e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d012      	beq.n	800381a <HAL_UART_IRQHandler+0x18a>
 80037f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00c      	beq.n	800381a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003808:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003810:	f043 0220 	orr.w	r2, r3, #32
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 8214 	beq.w	8003c4e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800382a:	f003 0320 	and.w	r3, r3, #32
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00d      	beq.n	800384e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003832:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003836:	f003 0320 	and.w	r3, r3, #32
 800383a:	2b00      	cmp	r3, #0
 800383c:	d007      	beq.n	800384e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003854:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003862:	2b40      	cmp	r3, #64	; 0x40
 8003864:	d005      	beq.n	8003872 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003866:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800386a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800386e:	2b00      	cmp	r3, #0
 8003870:	d04f      	beq.n	8003912 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 feba 	bl	80045ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003882:	2b40      	cmp	r3, #64	; 0x40
 8003884:	d141      	bne.n	800390a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	3308      	adds	r3, #8
 800388c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003890:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003894:	e853 3f00 	ldrex	r3, [r3]
 8003898:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800389c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80038a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3308      	adds	r3, #8
 80038ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80038b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80038b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80038be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80038c2:	e841 2300 	strex	r3, r2, [r1]
 80038c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80038ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1d9      	bne.n	8003886 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d013      	beq.n	8003902 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038de:	4a13      	ldr	r2, [pc, #76]	; (800392c <HAL_UART_IRQHandler+0x29c>)
 80038e0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fd fead 	bl	8001646 <HAL_DMA_Abort_IT>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d017      	beq.n	8003922 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80038fc:	4610      	mov	r0, r2
 80038fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003900:	e00f      	b.n	8003922 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f9b8 	bl	8003c78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003908:	e00b      	b.n	8003922 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f9b4 	bl	8003c78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003910:	e007      	b.n	8003922 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f9b0 	bl	8003c78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003920:	e195      	b.n	8003c4e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003922:	bf00      	nop
    return;
 8003924:	e193      	b.n	8003c4e <HAL_UART_IRQHandler+0x5be>
 8003926:	bf00      	nop
 8003928:	04000120 	.word	0x04000120
 800392c:	080046b5 	.word	0x080046b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003934:	2b01      	cmp	r3, #1
 8003936:	f040 814e 	bne.w	8003bd6 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800393a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800393e:	f003 0310 	and.w	r3, r3, #16
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 8147 	beq.w	8003bd6 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800394c:	f003 0310 	and.w	r3, r3, #16
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 8140 	beq.w	8003bd6 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2210      	movs	r2, #16
 800395c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003968:	2b40      	cmp	r3, #64	; 0x40
 800396a:	f040 80b8 	bne.w	8003ade <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800397a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 8167 	beq.w	8003c52 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800398a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800398e:	429a      	cmp	r2, r3
 8003990:	f080 815f 	bcs.w	8003c52 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800399a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0320 	and.w	r3, r3, #32
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f040 8086 	bne.w	8003abc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039bc:	e853 3f00 	ldrex	r3, [r3]
 80039c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80039c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	461a      	mov	r2, r3
 80039d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80039da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80039de:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80039e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80039ea:	e841 2300 	strex	r3, r2, [r1]
 80039ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80039f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1da      	bne.n	80039b0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	3308      	adds	r3, #8
 8003a00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a04:	e853 3f00 	ldrex	r3, [r3]
 8003a08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003a0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a0c:	f023 0301 	bic.w	r3, r3, #1
 8003a10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3308      	adds	r3, #8
 8003a1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a1e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003a22:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003a26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003a2a:	e841 2300 	strex	r3, r2, [r1]
 8003a2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003a30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1e1      	bne.n	80039fa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	3308      	adds	r3, #8
 8003a3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a40:	e853 3f00 	ldrex	r3, [r3]
 8003a44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003a46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3308      	adds	r3, #8
 8003a56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a62:	e841 2300 	strex	r3, r2, [r1]
 8003a66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1e3      	bne.n	8003a36 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a84:	e853 3f00 	ldrex	r3, [r3]
 8003a88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a8c:	f023 0310 	bic.w	r3, r3, #16
 8003a90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	461a      	mov	r2, r3
 8003a9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003aa0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003aa4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003aa6:	e841 2300 	strex	r3, r2, [r1]
 8003aaa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1e4      	bne.n	8003a7c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7fd fd87 	bl	80015ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f8d8 	bl	8003c8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003adc:	e0b9      	b.n	8003c52 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 80ab 	beq.w	8003c56 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003b00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 80a6 	beq.w	8003c56 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b12:	e853 3f00 	ldrex	r3, [r3]
 8003b16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	461a      	mov	r2, r3
 8003b28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003b2c:	647b      	str	r3, [r7, #68]	; 0x44
 8003b2e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b34:	e841 2300 	strex	r3, r2, [r1]
 8003b38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1e4      	bne.n	8003b0a <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	3308      	adds	r3, #8
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	e853 3f00 	ldrex	r3, [r3]
 8003b4e:	623b      	str	r3, [r7, #32]
   return(result);
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	f023 0301 	bic.w	r3, r3, #1
 8003b56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	3308      	adds	r3, #8
 8003b60:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b64:	633a      	str	r2, [r7, #48]	; 0x30
 8003b66:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b6c:	e841 2300 	strex	r3, r2, [r1]
 8003b70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1e3      	bne.n	8003b40 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	e853 3f00 	ldrex	r3, [r3]
 8003b98:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f023 0310 	bic.w	r3, r3, #16
 8003ba0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003bae:	61fb      	str	r3, [r7, #28]
 8003bb0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb2:	69b9      	ldr	r1, [r7, #24]
 8003bb4:	69fa      	ldr	r2, [r7, #28]
 8003bb6:	e841 2300 	strex	r3, r2, [r1]
 8003bba:	617b      	str	r3, [r7, #20]
   return(result);
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1e4      	bne.n	8003b8c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bcc:	4619      	mov	r1, r3
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f85c 	bl	8003c8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003bd4:	e03f      	b.n	8003c56 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00e      	beq.n	8003c00 <HAL_UART_IRQHandler+0x570>
 8003be2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d008      	beq.n	8003c00 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003bf6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 ff57 	bl	8004aac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003bfe:	e02d      	b.n	8003c5c <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00e      	beq.n	8003c2a <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d008      	beq.n	8003c2a <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d01c      	beq.n	8003c5a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	4798      	blx	r3
    }
    return;
 8003c28:	e017      	b.n	8003c5a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d012      	beq.n	8003c5c <HAL_UART_IRQHandler+0x5cc>
 8003c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00c      	beq.n	8003c5c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 fd4c 	bl	80046e0 <UART_EndTransmit_IT>
    return;
 8003c48:	e008      	b.n	8003c5c <HAL_UART_IRQHandler+0x5cc>
      return;
 8003c4a:	bf00      	nop
 8003c4c:	e006      	b.n	8003c5c <HAL_UART_IRQHandler+0x5cc>
    return;
 8003c4e:	bf00      	nop
 8003c50:	e004      	b.n	8003c5c <HAL_UART_IRQHandler+0x5cc>
      return;
 8003c52:	bf00      	nop
 8003c54:	e002      	b.n	8003c5c <HAL_UART_IRQHandler+0x5cc>
      return;
 8003c56:	bf00      	nop
 8003c58:	e000      	b.n	8003c5c <HAL_UART_IRQHandler+0x5cc>
    return;
 8003c5a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003c5c:	37e8      	adds	r7, #232	; 0xe8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop

08003c64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	460b      	mov	r3, r1
 8003c96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ca8:	b08a      	sub	sp, #40	; 0x28
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	69db      	ldr	r3, [r3, #28]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	4bb4      	ldr	r3, [pc, #720]	; (8003fa4 <UART_SetConfig+0x300>)
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	6812      	ldr	r2, [r2, #0]
 8003cda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cdc:	430b      	orrs	r3, r1
 8003cde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4aa9      	ldr	r2, [pc, #676]	; (8003fa8 <UART_SetConfig+0x304>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d004      	beq.n	8003d10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d20:	430a      	orrs	r2, r1
 8003d22:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4aa0      	ldr	r2, [pc, #640]	; (8003fac <UART_SetConfig+0x308>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d126      	bne.n	8003d7c <UART_SetConfig+0xd8>
 8003d2e:	4ba0      	ldr	r3, [pc, #640]	; (8003fb0 <UART_SetConfig+0x30c>)
 8003d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d34:	f003 0303 	and.w	r3, r3, #3
 8003d38:	2b03      	cmp	r3, #3
 8003d3a:	d81b      	bhi.n	8003d74 <UART_SetConfig+0xd0>
 8003d3c:	a201      	add	r2, pc, #4	; (adr r2, 8003d44 <UART_SetConfig+0xa0>)
 8003d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d42:	bf00      	nop
 8003d44:	08003d55 	.word	0x08003d55
 8003d48:	08003d65 	.word	0x08003d65
 8003d4c:	08003d5d 	.word	0x08003d5d
 8003d50:	08003d6d 	.word	0x08003d6d
 8003d54:	2301      	movs	r3, #1
 8003d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d5a:	e080      	b.n	8003e5e <UART_SetConfig+0x1ba>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d62:	e07c      	b.n	8003e5e <UART_SetConfig+0x1ba>
 8003d64:	2304      	movs	r3, #4
 8003d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d6a:	e078      	b.n	8003e5e <UART_SetConfig+0x1ba>
 8003d6c:	2308      	movs	r3, #8
 8003d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d72:	e074      	b.n	8003e5e <UART_SetConfig+0x1ba>
 8003d74:	2310      	movs	r3, #16
 8003d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d7a:	e070      	b.n	8003e5e <UART_SetConfig+0x1ba>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a8c      	ldr	r2, [pc, #560]	; (8003fb4 <UART_SetConfig+0x310>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d138      	bne.n	8003df8 <UART_SetConfig+0x154>
 8003d86:	4b8a      	ldr	r3, [pc, #552]	; (8003fb0 <UART_SetConfig+0x30c>)
 8003d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8c:	f003 030c 	and.w	r3, r3, #12
 8003d90:	2b0c      	cmp	r3, #12
 8003d92:	d82d      	bhi.n	8003df0 <UART_SetConfig+0x14c>
 8003d94:	a201      	add	r2, pc, #4	; (adr r2, 8003d9c <UART_SetConfig+0xf8>)
 8003d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9a:	bf00      	nop
 8003d9c:	08003dd1 	.word	0x08003dd1
 8003da0:	08003df1 	.word	0x08003df1
 8003da4:	08003df1 	.word	0x08003df1
 8003da8:	08003df1 	.word	0x08003df1
 8003dac:	08003de1 	.word	0x08003de1
 8003db0:	08003df1 	.word	0x08003df1
 8003db4:	08003df1 	.word	0x08003df1
 8003db8:	08003df1 	.word	0x08003df1
 8003dbc:	08003dd9 	.word	0x08003dd9
 8003dc0:	08003df1 	.word	0x08003df1
 8003dc4:	08003df1 	.word	0x08003df1
 8003dc8:	08003df1 	.word	0x08003df1
 8003dcc:	08003de9 	.word	0x08003de9
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dd6:	e042      	b.n	8003e5e <UART_SetConfig+0x1ba>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dde:	e03e      	b.n	8003e5e <UART_SetConfig+0x1ba>
 8003de0:	2304      	movs	r3, #4
 8003de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003de6:	e03a      	b.n	8003e5e <UART_SetConfig+0x1ba>
 8003de8:	2308      	movs	r3, #8
 8003dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dee:	e036      	b.n	8003e5e <UART_SetConfig+0x1ba>
 8003df0:	2310      	movs	r3, #16
 8003df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003df6:	e032      	b.n	8003e5e <UART_SetConfig+0x1ba>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a6a      	ldr	r2, [pc, #424]	; (8003fa8 <UART_SetConfig+0x304>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d12a      	bne.n	8003e58 <UART_SetConfig+0x1b4>
 8003e02:	4b6b      	ldr	r3, [pc, #428]	; (8003fb0 <UART_SetConfig+0x30c>)
 8003e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e10:	d01a      	beq.n	8003e48 <UART_SetConfig+0x1a4>
 8003e12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e16:	d81b      	bhi.n	8003e50 <UART_SetConfig+0x1ac>
 8003e18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e1c:	d00c      	beq.n	8003e38 <UART_SetConfig+0x194>
 8003e1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e22:	d815      	bhi.n	8003e50 <UART_SetConfig+0x1ac>
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <UART_SetConfig+0x18c>
 8003e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e2c:	d008      	beq.n	8003e40 <UART_SetConfig+0x19c>
 8003e2e:	e00f      	b.n	8003e50 <UART_SetConfig+0x1ac>
 8003e30:	2300      	movs	r3, #0
 8003e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e36:	e012      	b.n	8003e5e <UART_SetConfig+0x1ba>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e3e:	e00e      	b.n	8003e5e <UART_SetConfig+0x1ba>
 8003e40:	2304      	movs	r3, #4
 8003e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e46:	e00a      	b.n	8003e5e <UART_SetConfig+0x1ba>
 8003e48:	2308      	movs	r3, #8
 8003e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e4e:	e006      	b.n	8003e5e <UART_SetConfig+0x1ba>
 8003e50:	2310      	movs	r3, #16
 8003e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e56:	e002      	b.n	8003e5e <UART_SetConfig+0x1ba>
 8003e58:	2310      	movs	r3, #16
 8003e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a51      	ldr	r2, [pc, #324]	; (8003fa8 <UART_SetConfig+0x304>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d17a      	bne.n	8003f5e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d824      	bhi.n	8003eba <UART_SetConfig+0x216>
 8003e70:	a201      	add	r2, pc, #4	; (adr r2, 8003e78 <UART_SetConfig+0x1d4>)
 8003e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e76:	bf00      	nop
 8003e78:	08003e9d 	.word	0x08003e9d
 8003e7c:	08003ebb 	.word	0x08003ebb
 8003e80:	08003ea5 	.word	0x08003ea5
 8003e84:	08003ebb 	.word	0x08003ebb
 8003e88:	08003eab 	.word	0x08003eab
 8003e8c:	08003ebb 	.word	0x08003ebb
 8003e90:	08003ebb 	.word	0x08003ebb
 8003e94:	08003ebb 	.word	0x08003ebb
 8003e98:	08003eb3 	.word	0x08003eb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e9c:	f7fe fbb6 	bl	800260c <HAL_RCC_GetPCLK1Freq>
 8003ea0:	61f8      	str	r0, [r7, #28]
        break;
 8003ea2:	e010      	b.n	8003ec6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ea4:	4b44      	ldr	r3, [pc, #272]	; (8003fb8 <UART_SetConfig+0x314>)
 8003ea6:	61fb      	str	r3, [r7, #28]
        break;
 8003ea8:	e00d      	b.n	8003ec6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eaa:	f7fe fb17 	bl	80024dc <HAL_RCC_GetSysClockFreq>
 8003eae:	61f8      	str	r0, [r7, #28]
        break;
 8003eb0:	e009      	b.n	8003ec6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eb6:	61fb      	str	r3, [r7, #28]
        break;
 8003eb8:	e005      	b.n	8003ec6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ec4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 8107 	beq.w	80040dc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	4413      	add	r3, r2
 8003ed8:	69fa      	ldr	r2, [r7, #28]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d305      	bcc.n	8003eea <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ee4:	69fa      	ldr	r2, [r7, #28]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d903      	bls.n	8003ef2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ef0:	e0f4      	b.n	80040dc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	461c      	mov	r4, r3
 8003ef8:	4615      	mov	r5, r2
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	f04f 0300 	mov.w	r3, #0
 8003f02:	022b      	lsls	r3, r5, #8
 8003f04:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003f08:	0222      	lsls	r2, r4, #8
 8003f0a:	68f9      	ldr	r1, [r7, #12]
 8003f0c:	6849      	ldr	r1, [r1, #4]
 8003f0e:	0849      	lsrs	r1, r1, #1
 8003f10:	2000      	movs	r0, #0
 8003f12:	4688      	mov	r8, r1
 8003f14:	4681      	mov	r9, r0
 8003f16:	eb12 0a08 	adds.w	sl, r2, r8
 8003f1a:	eb43 0b09 	adc.w	fp, r3, r9
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	603b      	str	r3, [r7, #0]
 8003f26:	607a      	str	r2, [r7, #4]
 8003f28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f2c:	4650      	mov	r0, sl
 8003f2e:	4659      	mov	r1, fp
 8003f30:	f7fc f9b6 	bl	80002a0 <__aeabi_uldivmod>
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	4613      	mov	r3, r2
 8003f3a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f42:	d308      	bcc.n	8003f56 <UART_SetConfig+0x2b2>
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f4a:	d204      	bcs.n	8003f56 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	60da      	str	r2, [r3, #12]
 8003f54:	e0c2      	b.n	80040dc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003f5c:	e0be      	b.n	80040dc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f66:	d16a      	bne.n	800403e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003f68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d834      	bhi.n	8003fda <UART_SetConfig+0x336>
 8003f70:	a201      	add	r2, pc, #4	; (adr r2, 8003f78 <UART_SetConfig+0x2d4>)
 8003f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f76:	bf00      	nop
 8003f78:	08003f9d 	.word	0x08003f9d
 8003f7c:	08003fbd 	.word	0x08003fbd
 8003f80:	08003fc5 	.word	0x08003fc5
 8003f84:	08003fdb 	.word	0x08003fdb
 8003f88:	08003fcb 	.word	0x08003fcb
 8003f8c:	08003fdb 	.word	0x08003fdb
 8003f90:	08003fdb 	.word	0x08003fdb
 8003f94:	08003fdb 	.word	0x08003fdb
 8003f98:	08003fd3 	.word	0x08003fd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f9c:	f7fe fb36 	bl	800260c <HAL_RCC_GetPCLK1Freq>
 8003fa0:	61f8      	str	r0, [r7, #28]
        break;
 8003fa2:	e020      	b.n	8003fe6 <UART_SetConfig+0x342>
 8003fa4:	efff69f3 	.word	0xefff69f3
 8003fa8:	40008000 	.word	0x40008000
 8003fac:	40013800 	.word	0x40013800
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	40004400 	.word	0x40004400
 8003fb8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fbc:	f7fe fb3c 	bl	8002638 <HAL_RCC_GetPCLK2Freq>
 8003fc0:	61f8      	str	r0, [r7, #28]
        break;
 8003fc2:	e010      	b.n	8003fe6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fc4:	4b4c      	ldr	r3, [pc, #304]	; (80040f8 <UART_SetConfig+0x454>)
 8003fc6:	61fb      	str	r3, [r7, #28]
        break;
 8003fc8:	e00d      	b.n	8003fe6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fca:	f7fe fa87 	bl	80024dc <HAL_RCC_GetSysClockFreq>
 8003fce:	61f8      	str	r0, [r7, #28]
        break;
 8003fd0:	e009      	b.n	8003fe6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fd6:	61fb      	str	r3, [r7, #28]
        break;
 8003fd8:	e005      	b.n	8003fe6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003fe4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d077      	beq.n	80040dc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	005a      	lsls	r2, r3, #1
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	085b      	lsrs	r3, r3, #1
 8003ff6:	441a      	add	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004000:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	2b0f      	cmp	r3, #15
 8004006:	d916      	bls.n	8004036 <UART_SetConfig+0x392>
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800400e:	d212      	bcs.n	8004036 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	b29b      	uxth	r3, r3
 8004014:	f023 030f 	bic.w	r3, r3, #15
 8004018:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	085b      	lsrs	r3, r3, #1
 800401e:	b29b      	uxth	r3, r3
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	b29a      	uxth	r2, r3
 8004026:	8afb      	ldrh	r3, [r7, #22]
 8004028:	4313      	orrs	r3, r2
 800402a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	8afa      	ldrh	r2, [r7, #22]
 8004032:	60da      	str	r2, [r3, #12]
 8004034:	e052      	b.n	80040dc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800403c:	e04e      	b.n	80040dc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800403e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004042:	2b08      	cmp	r3, #8
 8004044:	d827      	bhi.n	8004096 <UART_SetConfig+0x3f2>
 8004046:	a201      	add	r2, pc, #4	; (adr r2, 800404c <UART_SetConfig+0x3a8>)
 8004048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404c:	08004071 	.word	0x08004071
 8004050:	08004079 	.word	0x08004079
 8004054:	08004081 	.word	0x08004081
 8004058:	08004097 	.word	0x08004097
 800405c:	08004087 	.word	0x08004087
 8004060:	08004097 	.word	0x08004097
 8004064:	08004097 	.word	0x08004097
 8004068:	08004097 	.word	0x08004097
 800406c:	0800408f 	.word	0x0800408f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004070:	f7fe facc 	bl	800260c <HAL_RCC_GetPCLK1Freq>
 8004074:	61f8      	str	r0, [r7, #28]
        break;
 8004076:	e014      	b.n	80040a2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004078:	f7fe fade 	bl	8002638 <HAL_RCC_GetPCLK2Freq>
 800407c:	61f8      	str	r0, [r7, #28]
        break;
 800407e:	e010      	b.n	80040a2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004080:	4b1d      	ldr	r3, [pc, #116]	; (80040f8 <UART_SetConfig+0x454>)
 8004082:	61fb      	str	r3, [r7, #28]
        break;
 8004084:	e00d      	b.n	80040a2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004086:	f7fe fa29 	bl	80024dc <HAL_RCC_GetSysClockFreq>
 800408a:	61f8      	str	r0, [r7, #28]
        break;
 800408c:	e009      	b.n	80040a2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800408e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004092:	61fb      	str	r3, [r7, #28]
        break;
 8004094:	e005      	b.n	80040a2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004096:	2300      	movs	r3, #0
 8004098:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80040a0:	bf00      	nop
    }

    if (pclk != 0U)
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d019      	beq.n	80040dc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	085a      	lsrs	r2, r3, #1
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	441a      	add	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	2b0f      	cmp	r3, #15
 80040c0:	d909      	bls.n	80040d6 <UART_SetConfig+0x432>
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c8:	d205      	bcs.n	80040d6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	60da      	str	r2, [r3, #12]
 80040d4:	e002      	b.n	80040dc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80040e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3728      	adds	r7, #40	; 0x28
 80040f0:	46bd      	mov	sp, r7
 80040f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040f6:	bf00      	nop
 80040f8:	00f42400 	.word	0x00f42400

080040fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	f003 0308 	and.w	r3, r3, #8
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00a      	beq.n	8004126 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	f003 0304 	and.w	r3, r3, #4
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00a      	beq.n	800418c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	f003 0310 	and.w	r3, r3, #16
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00a      	beq.n	80041ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	f003 0320 	and.w	r3, r3, #32
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00a      	beq.n	80041d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d01a      	beq.n	8004212 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041fa:	d10a      	bne.n	8004212 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00a      	beq.n	8004234 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	605a      	str	r2, [r3, #4]
  }
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b098      	sub	sp, #96	; 0x60
 8004244:	af02      	add	r7, sp, #8
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004250:	f7fd f89e 	bl	8001390 <HAL_GetTick>
 8004254:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0308 	and.w	r3, r3, #8
 8004260:	2b08      	cmp	r3, #8
 8004262:	d12e      	bne.n	80042c2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004264:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800426c:	2200      	movs	r2, #0
 800426e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f88c 	bl	8004390 <UART_WaitOnFlagUntilTimeout>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d021      	beq.n	80042c2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004286:	e853 3f00 	ldrex	r3, [r3]
 800428a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800428c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800428e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004292:	653b      	str	r3, [r7, #80]	; 0x50
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	461a      	mov	r2, r3
 800429a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800429c:	647b      	str	r3, [r7, #68]	; 0x44
 800429e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042a4:	e841 2300 	strex	r3, r2, [r1]
 80042a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1e6      	bne.n	800427e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2220      	movs	r2, #32
 80042b4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e062      	b.n	8004388 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b04      	cmp	r3, #4
 80042ce:	d149      	bne.n	8004364 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042d8:	2200      	movs	r2, #0
 80042da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f856 	bl	8004390 <UART_WaitOnFlagUntilTimeout>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d03c      	beq.n	8004364 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	e853 3f00 	ldrex	r3, [r3]
 80042f6:	623b      	str	r3, [r7, #32]
   return(result);
 80042f8:	6a3b      	ldr	r3, [r7, #32]
 80042fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	461a      	mov	r2, r3
 8004306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004308:	633b      	str	r3, [r7, #48]	; 0x30
 800430a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800430e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004310:	e841 2300 	strex	r3, r2, [r1]
 8004314:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1e6      	bne.n	80042ea <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	3308      	adds	r3, #8
 8004322:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	e853 3f00 	ldrex	r3, [r3]
 800432a:	60fb      	str	r3, [r7, #12]
   return(result);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f023 0301 	bic.w	r3, r3, #1
 8004332:	64bb      	str	r3, [r7, #72]	; 0x48
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3308      	adds	r3, #8
 800433a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800433c:	61fa      	str	r2, [r7, #28]
 800433e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004340:	69b9      	ldr	r1, [r7, #24]
 8004342:	69fa      	ldr	r2, [r7, #28]
 8004344:	e841 2300 	strex	r3, r2, [r1]
 8004348:	617b      	str	r3, [r7, #20]
   return(result);
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1e5      	bne.n	800431c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2220      	movs	r2, #32
 8004354:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e011      	b.n	8004388 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2220      	movs	r2, #32
 8004368:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2220      	movs	r2, #32
 800436e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3758      	adds	r7, #88	; 0x58
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	603b      	str	r3, [r7, #0]
 800439c:	4613      	mov	r3, r2
 800439e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043a0:	e049      	b.n	8004436 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a8:	d045      	beq.n	8004436 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043aa:	f7fc fff1 	bl	8001390 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d302      	bcc.n	80043c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d101      	bne.n	80043c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e048      	b.n	8004456 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0304 	and.w	r3, r3, #4
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d031      	beq.n	8004436 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	f003 0308 	and.w	r3, r3, #8
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d110      	bne.n	8004402 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2208      	movs	r2, #8
 80043e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f000 f8ff 	bl	80045ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2208      	movs	r2, #8
 80043f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e029      	b.n	8004456 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	69db      	ldr	r3, [r3, #28]
 8004408:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800440c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004410:	d111      	bne.n	8004436 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800441a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 f8e5 	bl	80045ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2220      	movs	r2, #32
 8004426:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e00f      	b.n	8004456 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	69da      	ldr	r2, [r3, #28]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	4013      	ands	r3, r2
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	429a      	cmp	r2, r3
 8004444:	bf0c      	ite	eq
 8004446:	2301      	moveq	r3, #1
 8004448:	2300      	movne	r3, #0
 800444a:	b2db      	uxtb	r3, r3
 800444c:	461a      	mov	r2, r3
 800444e:	79fb      	ldrb	r3, [r7, #7]
 8004450:	429a      	cmp	r2, r3
 8004452:	d0a6      	beq.n	80043a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
	...

08004460 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004460:	b480      	push	{r7}
 8004462:	b097      	sub	sp, #92	; 0x5c
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	4613      	mov	r3, r2
 800446c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	88fa      	ldrh	r2, [r7, #6]
 8004478:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	88fa      	ldrh	r2, [r7, #6]
 8004480:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004492:	d10e      	bne.n	80044b2 <UART_Start_Receive_IT+0x52>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d105      	bne.n	80044a8 <UART_Start_Receive_IT+0x48>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80044a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044a6:	e02d      	b.n	8004504 <UART_Start_Receive_IT+0xa4>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	22ff      	movs	r2, #255	; 0xff
 80044ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044b0:	e028      	b.n	8004504 <UART_Start_Receive_IT+0xa4>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10d      	bne.n	80044d6 <UART_Start_Receive_IT+0x76>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d104      	bne.n	80044cc <UART_Start_Receive_IT+0x6c>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	22ff      	movs	r2, #255	; 0xff
 80044c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044ca:	e01b      	b.n	8004504 <UART_Start_Receive_IT+0xa4>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	227f      	movs	r2, #127	; 0x7f
 80044d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044d4:	e016      	b.n	8004504 <UART_Start_Receive_IT+0xa4>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044de:	d10d      	bne.n	80044fc <UART_Start_Receive_IT+0x9c>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d104      	bne.n	80044f2 <UART_Start_Receive_IT+0x92>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	227f      	movs	r2, #127	; 0x7f
 80044ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044f0:	e008      	b.n	8004504 <UART_Start_Receive_IT+0xa4>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	223f      	movs	r2, #63	; 0x3f
 80044f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044fa:	e003      	b.n	8004504 <UART_Start_Receive_IT+0xa4>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2222      	movs	r2, #34	; 0x22
 8004510:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3308      	adds	r3, #8
 800451a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800451e:	e853 3f00 	ldrex	r3, [r3]
 8004522:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004526:	f043 0301 	orr.w	r3, r3, #1
 800452a:	657b      	str	r3, [r7, #84]	; 0x54
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	3308      	adds	r3, #8
 8004532:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004534:	64ba      	str	r2, [r7, #72]	; 0x48
 8004536:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004538:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800453a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800453c:	e841 2300 	strex	r3, r2, [r1]
 8004540:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1e5      	bne.n	8004514 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004550:	d107      	bne.n	8004562 <UART_Start_Receive_IT+0x102>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d103      	bne.n	8004562 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	4a21      	ldr	r2, [pc, #132]	; (80045e4 <UART_Start_Receive_IT+0x184>)
 800455e:	669a      	str	r2, [r3, #104]	; 0x68
 8004560:	e002      	b.n	8004568 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	4a20      	ldr	r2, [pc, #128]	; (80045e8 <UART_Start_Receive_IT+0x188>)
 8004566:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d019      	beq.n	80045a4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004578:	e853 3f00 	ldrex	r3, [r3]
 800457c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004584:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	461a      	mov	r2, r3
 800458c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800458e:	637b      	str	r3, [r7, #52]	; 0x34
 8004590:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004592:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004594:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004596:	e841 2300 	strex	r3, r2, [r1]
 800459a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800459c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1e6      	bne.n	8004570 <UART_Start_Receive_IT+0x110>
 80045a2:	e018      	b.n	80045d6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	e853 3f00 	ldrex	r3, [r3]
 80045b0:	613b      	str	r3, [r7, #16]
   return(result);
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	f043 0320 	orr.w	r3, r3, #32
 80045b8:	653b      	str	r3, [r7, #80]	; 0x50
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	461a      	mov	r2, r3
 80045c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045c2:	623b      	str	r3, [r7, #32]
 80045c4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c6:	69f9      	ldr	r1, [r7, #28]
 80045c8:	6a3a      	ldr	r2, [r7, #32]
 80045ca:	e841 2300 	strex	r3, r2, [r1]
 80045ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1e6      	bne.n	80045a4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	375c      	adds	r7, #92	; 0x5c
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr
 80045e4:	080048f1 	.word	0x080048f1
 80045e8:	08004735 	.word	0x08004735

080045ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b095      	sub	sp, #84	; 0x54
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045fc:	e853 3f00 	ldrex	r3, [r3]
 8004600:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004604:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004608:	64fb      	str	r3, [r7, #76]	; 0x4c
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	461a      	mov	r2, r3
 8004610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004612:	643b      	str	r3, [r7, #64]	; 0x40
 8004614:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004616:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004618:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800461a:	e841 2300 	strex	r3, r2, [r1]
 800461e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1e6      	bne.n	80045f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	3308      	adds	r3, #8
 800462c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462e:	6a3b      	ldr	r3, [r7, #32]
 8004630:	e853 3f00 	ldrex	r3, [r3]
 8004634:	61fb      	str	r3, [r7, #28]
   return(result);
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	f023 0301 	bic.w	r3, r3, #1
 800463c:	64bb      	str	r3, [r7, #72]	; 0x48
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3308      	adds	r3, #8
 8004644:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004646:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004648:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800464c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800464e:	e841 2300 	strex	r3, r2, [r1]
 8004652:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1e5      	bne.n	8004626 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800465e:	2b01      	cmp	r3, #1
 8004660:	d118      	bne.n	8004694 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	e853 3f00 	ldrex	r3, [r3]
 800466e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f023 0310 	bic.w	r3, r3, #16
 8004676:	647b      	str	r3, [r7, #68]	; 0x44
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	461a      	mov	r2, r3
 800467e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004680:	61bb      	str	r3, [r7, #24]
 8004682:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004684:	6979      	ldr	r1, [r7, #20]
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	e841 2300 	strex	r3, r2, [r1]
 800468c:	613b      	str	r3, [r7, #16]
   return(result);
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1e6      	bne.n	8004662 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2220      	movs	r2, #32
 8004698:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80046a8:	bf00      	nop
 80046aa:	3754      	adds	r7, #84	; 0x54
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f7ff fad0 	bl	8003c78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046d8:	bf00      	nop
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b088      	sub	sp, #32
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	e853 3f00 	ldrex	r3, [r3]
 80046f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046fc:	61fb      	str	r3, [r7, #28]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	461a      	mov	r2, r3
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	61bb      	str	r3, [r7, #24]
 8004708:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470a:	6979      	ldr	r1, [r7, #20]
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	e841 2300 	strex	r3, r2, [r1]
 8004712:	613b      	str	r3, [r7, #16]
   return(result);
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1e6      	bne.n	80046e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2220      	movs	r2, #32
 800471e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7ff fa9c 	bl	8003c64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800472c:	bf00      	nop
 800472e:	3720      	adds	r7, #32
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b09c      	sub	sp, #112	; 0x70
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004742:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800474c:	2b22      	cmp	r3, #34	; 0x22
 800474e:	f040 80be 	bne.w	80048ce <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004758:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800475c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004760:	b2d9      	uxtb	r1, r3
 8004762:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004766:	b2da      	uxtb	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800476c:	400a      	ands	r2, r1
 800476e:	b2d2      	uxtb	r2, r2
 8004770:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004776:	1c5a      	adds	r2, r3, #1
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004782:	b29b      	uxth	r3, r3
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004794:	b29b      	uxth	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	f040 80a3 	bne.w	80048e2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047a4:	e853 3f00 	ldrex	r3, [r3]
 80047a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80047aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	461a      	mov	r2, r3
 80047b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80047bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80047c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047c2:	e841 2300 	strex	r3, r2, [r1]
 80047c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80047c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1e6      	bne.n	800479c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	3308      	adds	r3, #8
 80047d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d8:	e853 3f00 	ldrex	r3, [r3]
 80047dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e0:	f023 0301 	bic.w	r3, r3, #1
 80047e4:	667b      	str	r3, [r7, #100]	; 0x64
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3308      	adds	r3, #8
 80047ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80047ee:	647a      	str	r2, [r7, #68]	; 0x44
 80047f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047f6:	e841 2300 	strex	r3, r2, [r1]
 80047fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1e5      	bne.n	80047ce <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2220      	movs	r2, #32
 8004806:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a34      	ldr	r2, [pc, #208]	; (80048ec <UART_RxISR_8BIT+0x1b8>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d01f      	beq.n	8004860 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d018      	beq.n	8004860 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	e853 3f00 	ldrex	r3, [r3]
 800483a:	623b      	str	r3, [r7, #32]
   return(result);
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004842:	663b      	str	r3, [r7, #96]	; 0x60
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	461a      	mov	r2, r3
 800484a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800484c:	633b      	str	r3, [r7, #48]	; 0x30
 800484e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004850:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004854:	e841 2300 	strex	r3, r2, [r1]
 8004858:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800485a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1e6      	bne.n	800482e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004864:	2b01      	cmp	r3, #1
 8004866:	d12e      	bne.n	80048c6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	e853 3f00 	ldrex	r3, [r3]
 800487a:	60fb      	str	r3, [r7, #12]
   return(result);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f023 0310 	bic.w	r3, r3, #16
 8004882:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	461a      	mov	r2, r3
 800488a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800488c:	61fb      	str	r3, [r7, #28]
 800488e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004890:	69b9      	ldr	r1, [r7, #24]
 8004892:	69fa      	ldr	r2, [r7, #28]
 8004894:	e841 2300 	strex	r3, r2, [r1]
 8004898:	617b      	str	r3, [r7, #20]
   return(result);
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1e6      	bne.n	800486e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	f003 0310 	and.w	r3, r3, #16
 80048aa:	2b10      	cmp	r3, #16
 80048ac:	d103      	bne.n	80048b6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2210      	movs	r2, #16
 80048b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80048bc:	4619      	mov	r1, r3
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7ff f9e4 	bl	8003c8c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80048c4:	e00d      	b.n	80048e2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7fc fa24 	bl	8000d14 <HAL_UART_RxCpltCallback>
}
 80048cc:	e009      	b.n	80048e2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	8b1b      	ldrh	r3, [r3, #24]
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0208 	orr.w	r2, r2, #8
 80048de:	b292      	uxth	r2, r2
 80048e0:	831a      	strh	r2, [r3, #24]
}
 80048e2:	bf00      	nop
 80048e4:	3770      	adds	r7, #112	; 0x70
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	40008000 	.word	0x40008000

080048f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b09c      	sub	sp, #112	; 0x70
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80048fe:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004908:	2b22      	cmp	r3, #34	; 0x22
 800490a:	f040 80be 	bne.w	8004a8a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004914:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800491e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004922:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004926:	4013      	ands	r3, r2
 8004928:	b29a      	uxth	r2, r3
 800492a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800492c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004932:	1c9a      	adds	r2, r3, #2
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800493e:	b29b      	uxth	r3, r3
 8004940:	3b01      	subs	r3, #1
 8004942:	b29a      	uxth	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004950:	b29b      	uxth	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	f040 80a3 	bne.w	8004a9e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004960:	e853 3f00 	ldrex	r3, [r3]
 8004964:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004968:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800496c:	667b      	str	r3, [r7, #100]	; 0x64
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	461a      	mov	r2, r3
 8004974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004976:	657b      	str	r3, [r7, #84]	; 0x54
 8004978:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800497c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800497e:	e841 2300 	strex	r3, r2, [r1]
 8004982:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1e6      	bne.n	8004958 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	3308      	adds	r3, #8
 8004990:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004994:	e853 3f00 	ldrex	r3, [r3]
 8004998:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800499a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499c:	f023 0301 	bic.w	r3, r3, #1
 80049a0:	663b      	str	r3, [r7, #96]	; 0x60
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	3308      	adds	r3, #8
 80049a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80049aa:	643a      	str	r2, [r7, #64]	; 0x40
 80049ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049b2:	e841 2300 	strex	r3, r2, [r1]
 80049b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1e5      	bne.n	800498a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2220      	movs	r2, #32
 80049c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a34      	ldr	r2, [pc, #208]	; (8004aa8 <UART_RxISR_16BIT+0x1b8>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d01f      	beq.n	8004a1c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d018      	beq.n	8004a1c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	e853 3f00 	ldrex	r3, [r3]
 80049f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	461a      	mov	r2, r3
 8004a06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a0a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a10:	e841 2300 	strex	r3, r2, [r1]
 8004a14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1e6      	bne.n	80049ea <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d12e      	bne.n	8004a82 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	e853 3f00 	ldrex	r3, [r3]
 8004a36:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f023 0310 	bic.w	r3, r3, #16
 8004a3e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	461a      	mov	r2, r3
 8004a46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a48:	61bb      	str	r3, [r7, #24]
 8004a4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4c:	6979      	ldr	r1, [r7, #20]
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	e841 2300 	strex	r3, r2, [r1]
 8004a54:	613b      	str	r3, [r7, #16]
   return(result);
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1e6      	bne.n	8004a2a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	f003 0310 	and.w	r3, r3, #16
 8004a66:	2b10      	cmp	r3, #16
 8004a68:	d103      	bne.n	8004a72 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2210      	movs	r2, #16
 8004a70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a78:	4619      	mov	r1, r3
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7ff f906 	bl	8003c8c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a80:	e00d      	b.n	8004a9e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7fc f946 	bl	8000d14 <HAL_UART_RxCpltCallback>
}
 8004a88:	e009      	b.n	8004a9e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	8b1b      	ldrh	r3, [r3, #24]
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f042 0208 	orr.w	r2, r2, #8
 8004a9a:	b292      	uxth	r2, r2
 8004a9c:	831a      	strh	r2, [r3, #24]
}
 8004a9e:	bf00      	nop
 8004aa0:	3770      	adds	r7, #112	; 0x70
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	40008000 	.word	0x40008000

08004aac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <_strtol_l.constprop.0>:
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac6:	d001      	beq.n	8004acc <_strtol_l.constprop.0+0xc>
 8004ac8:	2b24      	cmp	r3, #36	; 0x24
 8004aca:	d906      	bls.n	8004ada <_strtol_l.constprop.0+0x1a>
 8004acc:	f000 fa56 	bl	8004f7c <__errno>
 8004ad0:	2316      	movs	r3, #22
 8004ad2:	6003      	str	r3, [r0, #0]
 8004ad4:	2000      	movs	r0, #0
 8004ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ada:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004bc0 <_strtol_l.constprop.0+0x100>
 8004ade:	460d      	mov	r5, r1
 8004ae0:	462e      	mov	r6, r5
 8004ae2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004ae6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8004aea:	f017 0708 	ands.w	r7, r7, #8
 8004aee:	d1f7      	bne.n	8004ae0 <_strtol_l.constprop.0+0x20>
 8004af0:	2c2d      	cmp	r4, #45	; 0x2d
 8004af2:	d132      	bne.n	8004b5a <_strtol_l.constprop.0+0x9a>
 8004af4:	782c      	ldrb	r4, [r5, #0]
 8004af6:	2701      	movs	r7, #1
 8004af8:	1cb5      	adds	r5, r6, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d05b      	beq.n	8004bb6 <_strtol_l.constprop.0+0xf6>
 8004afe:	2b10      	cmp	r3, #16
 8004b00:	d109      	bne.n	8004b16 <_strtol_l.constprop.0+0x56>
 8004b02:	2c30      	cmp	r4, #48	; 0x30
 8004b04:	d107      	bne.n	8004b16 <_strtol_l.constprop.0+0x56>
 8004b06:	782c      	ldrb	r4, [r5, #0]
 8004b08:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004b0c:	2c58      	cmp	r4, #88	; 0x58
 8004b0e:	d14d      	bne.n	8004bac <_strtol_l.constprop.0+0xec>
 8004b10:	786c      	ldrb	r4, [r5, #1]
 8004b12:	2310      	movs	r3, #16
 8004b14:	3502      	adds	r5, #2
 8004b16:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004b1a:	f108 38ff 	add.w	r8, r8, #4294967295
 8004b1e:	f04f 0e00 	mov.w	lr, #0
 8004b22:	fbb8 f9f3 	udiv	r9, r8, r3
 8004b26:	4676      	mov	r6, lr
 8004b28:	fb03 8a19 	mls	sl, r3, r9, r8
 8004b2c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004b30:	f1bc 0f09 	cmp.w	ip, #9
 8004b34:	d816      	bhi.n	8004b64 <_strtol_l.constprop.0+0xa4>
 8004b36:	4664      	mov	r4, ip
 8004b38:	42a3      	cmp	r3, r4
 8004b3a:	dd24      	ble.n	8004b86 <_strtol_l.constprop.0+0xc6>
 8004b3c:	f1be 3fff 	cmp.w	lr, #4294967295
 8004b40:	d008      	beq.n	8004b54 <_strtol_l.constprop.0+0x94>
 8004b42:	45b1      	cmp	r9, r6
 8004b44:	d31c      	bcc.n	8004b80 <_strtol_l.constprop.0+0xc0>
 8004b46:	d101      	bne.n	8004b4c <_strtol_l.constprop.0+0x8c>
 8004b48:	45a2      	cmp	sl, r4
 8004b4a:	db19      	blt.n	8004b80 <_strtol_l.constprop.0+0xc0>
 8004b4c:	fb06 4603 	mla	r6, r6, r3, r4
 8004b50:	f04f 0e01 	mov.w	lr, #1
 8004b54:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b58:	e7e8      	b.n	8004b2c <_strtol_l.constprop.0+0x6c>
 8004b5a:	2c2b      	cmp	r4, #43	; 0x2b
 8004b5c:	bf04      	itt	eq
 8004b5e:	782c      	ldrbeq	r4, [r5, #0]
 8004b60:	1cb5      	addeq	r5, r6, #2
 8004b62:	e7ca      	b.n	8004afa <_strtol_l.constprop.0+0x3a>
 8004b64:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004b68:	f1bc 0f19 	cmp.w	ip, #25
 8004b6c:	d801      	bhi.n	8004b72 <_strtol_l.constprop.0+0xb2>
 8004b6e:	3c37      	subs	r4, #55	; 0x37
 8004b70:	e7e2      	b.n	8004b38 <_strtol_l.constprop.0+0x78>
 8004b72:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004b76:	f1bc 0f19 	cmp.w	ip, #25
 8004b7a:	d804      	bhi.n	8004b86 <_strtol_l.constprop.0+0xc6>
 8004b7c:	3c57      	subs	r4, #87	; 0x57
 8004b7e:	e7db      	b.n	8004b38 <_strtol_l.constprop.0+0x78>
 8004b80:	f04f 3eff 	mov.w	lr, #4294967295
 8004b84:	e7e6      	b.n	8004b54 <_strtol_l.constprop.0+0x94>
 8004b86:	f1be 3fff 	cmp.w	lr, #4294967295
 8004b8a:	d105      	bne.n	8004b98 <_strtol_l.constprop.0+0xd8>
 8004b8c:	2322      	movs	r3, #34	; 0x22
 8004b8e:	6003      	str	r3, [r0, #0]
 8004b90:	4646      	mov	r6, r8
 8004b92:	b942      	cbnz	r2, 8004ba6 <_strtol_l.constprop.0+0xe6>
 8004b94:	4630      	mov	r0, r6
 8004b96:	e79e      	b.n	8004ad6 <_strtol_l.constprop.0+0x16>
 8004b98:	b107      	cbz	r7, 8004b9c <_strtol_l.constprop.0+0xdc>
 8004b9a:	4276      	negs	r6, r6
 8004b9c:	2a00      	cmp	r2, #0
 8004b9e:	d0f9      	beq.n	8004b94 <_strtol_l.constprop.0+0xd4>
 8004ba0:	f1be 0f00 	cmp.w	lr, #0
 8004ba4:	d000      	beq.n	8004ba8 <_strtol_l.constprop.0+0xe8>
 8004ba6:	1e69      	subs	r1, r5, #1
 8004ba8:	6011      	str	r1, [r2, #0]
 8004baa:	e7f3      	b.n	8004b94 <_strtol_l.constprop.0+0xd4>
 8004bac:	2430      	movs	r4, #48	; 0x30
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1b1      	bne.n	8004b16 <_strtol_l.constprop.0+0x56>
 8004bb2:	2308      	movs	r3, #8
 8004bb4:	e7af      	b.n	8004b16 <_strtol_l.constprop.0+0x56>
 8004bb6:	2c30      	cmp	r4, #48	; 0x30
 8004bb8:	d0a5      	beq.n	8004b06 <_strtol_l.constprop.0+0x46>
 8004bba:	230a      	movs	r3, #10
 8004bbc:	e7ab      	b.n	8004b16 <_strtol_l.constprop.0+0x56>
 8004bbe:	bf00      	nop
 8004bc0:	08006039 	.word	0x08006039

08004bc4 <strtol>:
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	460a      	mov	r2, r1
 8004bc8:	4601      	mov	r1, r0
 8004bca:	4802      	ldr	r0, [pc, #8]	; (8004bd4 <strtol+0x10>)
 8004bcc:	6800      	ldr	r0, [r0, #0]
 8004bce:	f7ff bf77 	b.w	8004ac0 <_strtol_l.constprop.0>
 8004bd2:	bf00      	nop
 8004bd4:	20000064 	.word	0x20000064

08004bd8 <std>:
 8004bd8:	2300      	movs	r3, #0
 8004bda:	b510      	push	{r4, lr}
 8004bdc:	4604      	mov	r4, r0
 8004bde:	e9c0 3300 	strd	r3, r3, [r0]
 8004be2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004be6:	6083      	str	r3, [r0, #8]
 8004be8:	8181      	strh	r1, [r0, #12]
 8004bea:	6643      	str	r3, [r0, #100]	; 0x64
 8004bec:	81c2      	strh	r2, [r0, #14]
 8004bee:	6183      	str	r3, [r0, #24]
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	2208      	movs	r2, #8
 8004bf4:	305c      	adds	r0, #92	; 0x5c
 8004bf6:	f000 f916 	bl	8004e26 <memset>
 8004bfa:	4b05      	ldr	r3, [pc, #20]	; (8004c10 <std+0x38>)
 8004bfc:	6263      	str	r3, [r4, #36]	; 0x24
 8004bfe:	4b05      	ldr	r3, [pc, #20]	; (8004c14 <std+0x3c>)
 8004c00:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c02:	4b05      	ldr	r3, [pc, #20]	; (8004c18 <std+0x40>)
 8004c04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c06:	4b05      	ldr	r3, [pc, #20]	; (8004c1c <std+0x44>)
 8004c08:	6224      	str	r4, [r4, #32]
 8004c0a:	6323      	str	r3, [r4, #48]	; 0x30
 8004c0c:	bd10      	pop	{r4, pc}
 8004c0e:	bf00      	nop
 8004c10:	08004da1 	.word	0x08004da1
 8004c14:	08004dc3 	.word	0x08004dc3
 8004c18:	08004dfb 	.word	0x08004dfb
 8004c1c:	08004e1f 	.word	0x08004e1f

08004c20 <stdio_exit_handler>:
 8004c20:	4a02      	ldr	r2, [pc, #8]	; (8004c2c <stdio_exit_handler+0xc>)
 8004c22:	4903      	ldr	r1, [pc, #12]	; (8004c30 <stdio_exit_handler+0x10>)
 8004c24:	4803      	ldr	r0, [pc, #12]	; (8004c34 <stdio_exit_handler+0x14>)
 8004c26:	f000 b869 	b.w	8004cfc <_fwalk_sglue>
 8004c2a:	bf00      	nop
 8004c2c:	2000000c 	.word	0x2000000c
 8004c30:	080058fd 	.word	0x080058fd
 8004c34:	20000018 	.word	0x20000018

08004c38 <cleanup_stdio>:
 8004c38:	6841      	ldr	r1, [r0, #4]
 8004c3a:	4b0c      	ldr	r3, [pc, #48]	; (8004c6c <cleanup_stdio+0x34>)
 8004c3c:	4299      	cmp	r1, r3
 8004c3e:	b510      	push	{r4, lr}
 8004c40:	4604      	mov	r4, r0
 8004c42:	d001      	beq.n	8004c48 <cleanup_stdio+0x10>
 8004c44:	f000 fe5a 	bl	80058fc <_fflush_r>
 8004c48:	68a1      	ldr	r1, [r4, #8]
 8004c4a:	4b09      	ldr	r3, [pc, #36]	; (8004c70 <cleanup_stdio+0x38>)
 8004c4c:	4299      	cmp	r1, r3
 8004c4e:	d002      	beq.n	8004c56 <cleanup_stdio+0x1e>
 8004c50:	4620      	mov	r0, r4
 8004c52:	f000 fe53 	bl	80058fc <_fflush_r>
 8004c56:	68e1      	ldr	r1, [r4, #12]
 8004c58:	4b06      	ldr	r3, [pc, #24]	; (8004c74 <cleanup_stdio+0x3c>)
 8004c5a:	4299      	cmp	r1, r3
 8004c5c:	d004      	beq.n	8004c68 <cleanup_stdio+0x30>
 8004c5e:	4620      	mov	r0, r4
 8004c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c64:	f000 be4a 	b.w	80058fc <_fflush_r>
 8004c68:	bd10      	pop	{r4, pc}
 8004c6a:	bf00      	nop
 8004c6c:	200001c8 	.word	0x200001c8
 8004c70:	20000230 	.word	0x20000230
 8004c74:	20000298 	.word	0x20000298

08004c78 <global_stdio_init.part.0>:
 8004c78:	b510      	push	{r4, lr}
 8004c7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <global_stdio_init.part.0+0x30>)
 8004c7c:	4c0b      	ldr	r4, [pc, #44]	; (8004cac <global_stdio_init.part.0+0x34>)
 8004c7e:	4a0c      	ldr	r2, [pc, #48]	; (8004cb0 <global_stdio_init.part.0+0x38>)
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	4620      	mov	r0, r4
 8004c84:	2200      	movs	r2, #0
 8004c86:	2104      	movs	r1, #4
 8004c88:	f7ff ffa6 	bl	8004bd8 <std>
 8004c8c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004c90:	2201      	movs	r2, #1
 8004c92:	2109      	movs	r1, #9
 8004c94:	f7ff ffa0 	bl	8004bd8 <std>
 8004c98:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004c9c:	2202      	movs	r2, #2
 8004c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ca2:	2112      	movs	r1, #18
 8004ca4:	f7ff bf98 	b.w	8004bd8 <std>
 8004ca8:	20000300 	.word	0x20000300
 8004cac:	200001c8 	.word	0x200001c8
 8004cb0:	08004c21 	.word	0x08004c21

08004cb4 <__sfp_lock_acquire>:
 8004cb4:	4801      	ldr	r0, [pc, #4]	; (8004cbc <__sfp_lock_acquire+0x8>)
 8004cb6:	f000 b98b 	b.w	8004fd0 <__retarget_lock_acquire_recursive>
 8004cba:	bf00      	nop
 8004cbc:	20000309 	.word	0x20000309

08004cc0 <__sfp_lock_release>:
 8004cc0:	4801      	ldr	r0, [pc, #4]	; (8004cc8 <__sfp_lock_release+0x8>)
 8004cc2:	f000 b986 	b.w	8004fd2 <__retarget_lock_release_recursive>
 8004cc6:	bf00      	nop
 8004cc8:	20000309 	.word	0x20000309

08004ccc <__sinit>:
 8004ccc:	b510      	push	{r4, lr}
 8004cce:	4604      	mov	r4, r0
 8004cd0:	f7ff fff0 	bl	8004cb4 <__sfp_lock_acquire>
 8004cd4:	6a23      	ldr	r3, [r4, #32]
 8004cd6:	b11b      	cbz	r3, 8004ce0 <__sinit+0x14>
 8004cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cdc:	f7ff bff0 	b.w	8004cc0 <__sfp_lock_release>
 8004ce0:	4b04      	ldr	r3, [pc, #16]	; (8004cf4 <__sinit+0x28>)
 8004ce2:	6223      	str	r3, [r4, #32]
 8004ce4:	4b04      	ldr	r3, [pc, #16]	; (8004cf8 <__sinit+0x2c>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1f5      	bne.n	8004cd8 <__sinit+0xc>
 8004cec:	f7ff ffc4 	bl	8004c78 <global_stdio_init.part.0>
 8004cf0:	e7f2      	b.n	8004cd8 <__sinit+0xc>
 8004cf2:	bf00      	nop
 8004cf4:	08004c39 	.word	0x08004c39
 8004cf8:	20000300 	.word	0x20000300

08004cfc <_fwalk_sglue>:
 8004cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d00:	4607      	mov	r7, r0
 8004d02:	4688      	mov	r8, r1
 8004d04:	4614      	mov	r4, r2
 8004d06:	2600      	movs	r6, #0
 8004d08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d0c:	f1b9 0901 	subs.w	r9, r9, #1
 8004d10:	d505      	bpl.n	8004d1e <_fwalk_sglue+0x22>
 8004d12:	6824      	ldr	r4, [r4, #0]
 8004d14:	2c00      	cmp	r4, #0
 8004d16:	d1f7      	bne.n	8004d08 <_fwalk_sglue+0xc>
 8004d18:	4630      	mov	r0, r6
 8004d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d1e:	89ab      	ldrh	r3, [r5, #12]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d907      	bls.n	8004d34 <_fwalk_sglue+0x38>
 8004d24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	d003      	beq.n	8004d34 <_fwalk_sglue+0x38>
 8004d2c:	4629      	mov	r1, r5
 8004d2e:	4638      	mov	r0, r7
 8004d30:	47c0      	blx	r8
 8004d32:	4306      	orrs	r6, r0
 8004d34:	3568      	adds	r5, #104	; 0x68
 8004d36:	e7e9      	b.n	8004d0c <_fwalk_sglue+0x10>

08004d38 <sniprintf>:
 8004d38:	b40c      	push	{r2, r3}
 8004d3a:	b530      	push	{r4, r5, lr}
 8004d3c:	4b17      	ldr	r3, [pc, #92]	; (8004d9c <sniprintf+0x64>)
 8004d3e:	1e0c      	subs	r4, r1, #0
 8004d40:	681d      	ldr	r5, [r3, #0]
 8004d42:	b09d      	sub	sp, #116	; 0x74
 8004d44:	da08      	bge.n	8004d58 <sniprintf+0x20>
 8004d46:	238b      	movs	r3, #139	; 0x8b
 8004d48:	602b      	str	r3, [r5, #0]
 8004d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d4e:	b01d      	add	sp, #116	; 0x74
 8004d50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d54:	b002      	add	sp, #8
 8004d56:	4770      	bx	lr
 8004d58:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004d5c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004d60:	bf14      	ite	ne
 8004d62:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004d66:	4623      	moveq	r3, r4
 8004d68:	9304      	str	r3, [sp, #16]
 8004d6a:	9307      	str	r3, [sp, #28]
 8004d6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d70:	9002      	str	r0, [sp, #8]
 8004d72:	9006      	str	r0, [sp, #24]
 8004d74:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004d78:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004d7a:	ab21      	add	r3, sp, #132	; 0x84
 8004d7c:	a902      	add	r1, sp, #8
 8004d7e:	4628      	mov	r0, r5
 8004d80:	9301      	str	r3, [sp, #4]
 8004d82:	f000 faa7 	bl	80052d4 <_svfiprintf_r>
 8004d86:	1c43      	adds	r3, r0, #1
 8004d88:	bfbc      	itt	lt
 8004d8a:	238b      	movlt	r3, #139	; 0x8b
 8004d8c:	602b      	strlt	r3, [r5, #0]
 8004d8e:	2c00      	cmp	r4, #0
 8004d90:	d0dd      	beq.n	8004d4e <sniprintf+0x16>
 8004d92:	9b02      	ldr	r3, [sp, #8]
 8004d94:	2200      	movs	r2, #0
 8004d96:	701a      	strb	r2, [r3, #0]
 8004d98:	e7d9      	b.n	8004d4e <sniprintf+0x16>
 8004d9a:	bf00      	nop
 8004d9c:	20000064 	.word	0x20000064

08004da0 <__sread>:
 8004da0:	b510      	push	{r4, lr}
 8004da2:	460c      	mov	r4, r1
 8004da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004da8:	f000 f8c4 	bl	8004f34 <_read_r>
 8004dac:	2800      	cmp	r0, #0
 8004dae:	bfab      	itete	ge
 8004db0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004db2:	89a3      	ldrhlt	r3, [r4, #12]
 8004db4:	181b      	addge	r3, r3, r0
 8004db6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004dba:	bfac      	ite	ge
 8004dbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8004dbe:	81a3      	strhlt	r3, [r4, #12]
 8004dc0:	bd10      	pop	{r4, pc}

08004dc2 <__swrite>:
 8004dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dc6:	461f      	mov	r7, r3
 8004dc8:	898b      	ldrh	r3, [r1, #12]
 8004dca:	05db      	lsls	r3, r3, #23
 8004dcc:	4605      	mov	r5, r0
 8004dce:	460c      	mov	r4, r1
 8004dd0:	4616      	mov	r6, r2
 8004dd2:	d505      	bpl.n	8004de0 <__swrite+0x1e>
 8004dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dd8:	2302      	movs	r3, #2
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f000 f898 	bl	8004f10 <_lseek_r>
 8004de0:	89a3      	ldrh	r3, [r4, #12]
 8004de2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004de6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dea:	81a3      	strh	r3, [r4, #12]
 8004dec:	4632      	mov	r2, r6
 8004dee:	463b      	mov	r3, r7
 8004df0:	4628      	mov	r0, r5
 8004df2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004df6:	f000 b8af 	b.w	8004f58 <_write_r>

08004dfa <__sseek>:
 8004dfa:	b510      	push	{r4, lr}
 8004dfc:	460c      	mov	r4, r1
 8004dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e02:	f000 f885 	bl	8004f10 <_lseek_r>
 8004e06:	1c43      	adds	r3, r0, #1
 8004e08:	89a3      	ldrh	r3, [r4, #12]
 8004e0a:	bf15      	itete	ne
 8004e0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e16:	81a3      	strheq	r3, [r4, #12]
 8004e18:	bf18      	it	ne
 8004e1a:	81a3      	strhne	r3, [r4, #12]
 8004e1c:	bd10      	pop	{r4, pc}

08004e1e <__sclose>:
 8004e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e22:	f000 b865 	b.w	8004ef0 <_close_r>

08004e26 <memset>:
 8004e26:	4402      	add	r2, r0
 8004e28:	4603      	mov	r3, r0
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d100      	bne.n	8004e30 <memset+0xa>
 8004e2e:	4770      	bx	lr
 8004e30:	f803 1b01 	strb.w	r1, [r3], #1
 8004e34:	e7f9      	b.n	8004e2a <memset+0x4>
	...

08004e38 <strtok>:
 8004e38:	4b16      	ldr	r3, [pc, #88]	; (8004e94 <strtok+0x5c>)
 8004e3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e3c:	681e      	ldr	r6, [r3, #0]
 8004e3e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8004e40:	4605      	mov	r5, r0
 8004e42:	b9fc      	cbnz	r4, 8004e84 <strtok+0x4c>
 8004e44:	2050      	movs	r0, #80	; 0x50
 8004e46:	9101      	str	r1, [sp, #4]
 8004e48:	f000 f936 	bl	80050b8 <malloc>
 8004e4c:	9901      	ldr	r1, [sp, #4]
 8004e4e:	6470      	str	r0, [r6, #68]	; 0x44
 8004e50:	4602      	mov	r2, r0
 8004e52:	b920      	cbnz	r0, 8004e5e <strtok+0x26>
 8004e54:	4b10      	ldr	r3, [pc, #64]	; (8004e98 <strtok+0x60>)
 8004e56:	4811      	ldr	r0, [pc, #68]	; (8004e9c <strtok+0x64>)
 8004e58:	215b      	movs	r1, #91	; 0x5b
 8004e5a:	f000 f8c3 	bl	8004fe4 <__assert_func>
 8004e5e:	e9c0 4400 	strd	r4, r4, [r0]
 8004e62:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004e66:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004e6a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004e6e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004e72:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004e76:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004e7a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004e7e:	6184      	str	r4, [r0, #24]
 8004e80:	7704      	strb	r4, [r0, #28]
 8004e82:	6244      	str	r4, [r0, #36]	; 0x24
 8004e84:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8004e86:	2301      	movs	r3, #1
 8004e88:	4628      	mov	r0, r5
 8004e8a:	b002      	add	sp, #8
 8004e8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004e90:	f000 b806 	b.w	8004ea0 <__strtok_r>
 8004e94:	20000064 	.word	0x20000064
 8004e98:	08006139 	.word	0x08006139
 8004e9c:	08006150 	.word	0x08006150

08004ea0 <__strtok_r>:
 8004ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ea2:	b908      	cbnz	r0, 8004ea8 <__strtok_r+0x8>
 8004ea4:	6810      	ldr	r0, [r2, #0]
 8004ea6:	b188      	cbz	r0, 8004ecc <__strtok_r+0x2c>
 8004ea8:	4604      	mov	r4, r0
 8004eaa:	4620      	mov	r0, r4
 8004eac:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004eb0:	460f      	mov	r7, r1
 8004eb2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004eb6:	b91e      	cbnz	r6, 8004ec0 <__strtok_r+0x20>
 8004eb8:	b965      	cbnz	r5, 8004ed4 <__strtok_r+0x34>
 8004eba:	6015      	str	r5, [r2, #0]
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	e005      	b.n	8004ecc <__strtok_r+0x2c>
 8004ec0:	42b5      	cmp	r5, r6
 8004ec2:	d1f6      	bne.n	8004eb2 <__strtok_r+0x12>
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1f0      	bne.n	8004eaa <__strtok_r+0xa>
 8004ec8:	6014      	str	r4, [r2, #0]
 8004eca:	7003      	strb	r3, [r0, #0]
 8004ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ece:	461c      	mov	r4, r3
 8004ed0:	e00c      	b.n	8004eec <__strtok_r+0x4c>
 8004ed2:	b915      	cbnz	r5, 8004eda <__strtok_r+0x3a>
 8004ed4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004ed8:	460e      	mov	r6, r1
 8004eda:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004ede:	42ab      	cmp	r3, r5
 8004ee0:	d1f7      	bne.n	8004ed2 <__strtok_r+0x32>
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d0f3      	beq.n	8004ece <__strtok_r+0x2e>
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004eec:	6014      	str	r4, [r2, #0]
 8004eee:	e7ed      	b.n	8004ecc <__strtok_r+0x2c>

08004ef0 <_close_r>:
 8004ef0:	b538      	push	{r3, r4, r5, lr}
 8004ef2:	4d06      	ldr	r5, [pc, #24]	; (8004f0c <_close_r+0x1c>)
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	4604      	mov	r4, r0
 8004ef8:	4608      	mov	r0, r1
 8004efa:	602b      	str	r3, [r5, #0]
 8004efc:	f7fc f939 	bl	8001172 <_close>
 8004f00:	1c43      	adds	r3, r0, #1
 8004f02:	d102      	bne.n	8004f0a <_close_r+0x1a>
 8004f04:	682b      	ldr	r3, [r5, #0]
 8004f06:	b103      	cbz	r3, 8004f0a <_close_r+0x1a>
 8004f08:	6023      	str	r3, [r4, #0]
 8004f0a:	bd38      	pop	{r3, r4, r5, pc}
 8004f0c:	20000304 	.word	0x20000304

08004f10 <_lseek_r>:
 8004f10:	b538      	push	{r3, r4, r5, lr}
 8004f12:	4d07      	ldr	r5, [pc, #28]	; (8004f30 <_lseek_r+0x20>)
 8004f14:	4604      	mov	r4, r0
 8004f16:	4608      	mov	r0, r1
 8004f18:	4611      	mov	r1, r2
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	602a      	str	r2, [r5, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	f7fc f94e 	bl	80011c0 <_lseek>
 8004f24:	1c43      	adds	r3, r0, #1
 8004f26:	d102      	bne.n	8004f2e <_lseek_r+0x1e>
 8004f28:	682b      	ldr	r3, [r5, #0]
 8004f2a:	b103      	cbz	r3, 8004f2e <_lseek_r+0x1e>
 8004f2c:	6023      	str	r3, [r4, #0]
 8004f2e:	bd38      	pop	{r3, r4, r5, pc}
 8004f30:	20000304 	.word	0x20000304

08004f34 <_read_r>:
 8004f34:	b538      	push	{r3, r4, r5, lr}
 8004f36:	4d07      	ldr	r5, [pc, #28]	; (8004f54 <_read_r+0x20>)
 8004f38:	4604      	mov	r4, r0
 8004f3a:	4608      	mov	r0, r1
 8004f3c:	4611      	mov	r1, r2
 8004f3e:	2200      	movs	r2, #0
 8004f40:	602a      	str	r2, [r5, #0]
 8004f42:	461a      	mov	r2, r3
 8004f44:	f7fc f8dc 	bl	8001100 <_read>
 8004f48:	1c43      	adds	r3, r0, #1
 8004f4a:	d102      	bne.n	8004f52 <_read_r+0x1e>
 8004f4c:	682b      	ldr	r3, [r5, #0]
 8004f4e:	b103      	cbz	r3, 8004f52 <_read_r+0x1e>
 8004f50:	6023      	str	r3, [r4, #0]
 8004f52:	bd38      	pop	{r3, r4, r5, pc}
 8004f54:	20000304 	.word	0x20000304

08004f58 <_write_r>:
 8004f58:	b538      	push	{r3, r4, r5, lr}
 8004f5a:	4d07      	ldr	r5, [pc, #28]	; (8004f78 <_write_r+0x20>)
 8004f5c:	4604      	mov	r4, r0
 8004f5e:	4608      	mov	r0, r1
 8004f60:	4611      	mov	r1, r2
 8004f62:	2200      	movs	r2, #0
 8004f64:	602a      	str	r2, [r5, #0]
 8004f66:	461a      	mov	r2, r3
 8004f68:	f7fc f8e7 	bl	800113a <_write>
 8004f6c:	1c43      	adds	r3, r0, #1
 8004f6e:	d102      	bne.n	8004f76 <_write_r+0x1e>
 8004f70:	682b      	ldr	r3, [r5, #0]
 8004f72:	b103      	cbz	r3, 8004f76 <_write_r+0x1e>
 8004f74:	6023      	str	r3, [r4, #0]
 8004f76:	bd38      	pop	{r3, r4, r5, pc}
 8004f78:	20000304 	.word	0x20000304

08004f7c <__errno>:
 8004f7c:	4b01      	ldr	r3, [pc, #4]	; (8004f84 <__errno+0x8>)
 8004f7e:	6818      	ldr	r0, [r3, #0]
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	20000064 	.word	0x20000064

08004f88 <__libc_init_array>:
 8004f88:	b570      	push	{r4, r5, r6, lr}
 8004f8a:	4d0d      	ldr	r5, [pc, #52]	; (8004fc0 <__libc_init_array+0x38>)
 8004f8c:	4c0d      	ldr	r4, [pc, #52]	; (8004fc4 <__libc_init_array+0x3c>)
 8004f8e:	1b64      	subs	r4, r4, r5
 8004f90:	10a4      	asrs	r4, r4, #2
 8004f92:	2600      	movs	r6, #0
 8004f94:	42a6      	cmp	r6, r4
 8004f96:	d109      	bne.n	8004fac <__libc_init_array+0x24>
 8004f98:	4d0b      	ldr	r5, [pc, #44]	; (8004fc8 <__libc_init_array+0x40>)
 8004f9a:	4c0c      	ldr	r4, [pc, #48]	; (8004fcc <__libc_init_array+0x44>)
 8004f9c:	f001 f800 	bl	8005fa0 <_init>
 8004fa0:	1b64      	subs	r4, r4, r5
 8004fa2:	10a4      	asrs	r4, r4, #2
 8004fa4:	2600      	movs	r6, #0
 8004fa6:	42a6      	cmp	r6, r4
 8004fa8:	d105      	bne.n	8004fb6 <__libc_init_array+0x2e>
 8004faa:	bd70      	pop	{r4, r5, r6, pc}
 8004fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fb0:	4798      	blx	r3
 8004fb2:	3601      	adds	r6, #1
 8004fb4:	e7ee      	b.n	8004f94 <__libc_init_array+0xc>
 8004fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fba:	4798      	blx	r3
 8004fbc:	3601      	adds	r6, #1
 8004fbe:	e7f2      	b.n	8004fa6 <__libc_init_array+0x1e>
 8004fc0:	08006224 	.word	0x08006224
 8004fc4:	08006224 	.word	0x08006224
 8004fc8:	08006224 	.word	0x08006224
 8004fcc:	08006228 	.word	0x08006228

08004fd0 <__retarget_lock_acquire_recursive>:
 8004fd0:	4770      	bx	lr

08004fd2 <__retarget_lock_release_recursive>:
 8004fd2:	4770      	bx	lr

08004fd4 <strcpy>:
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fda:	f803 2b01 	strb.w	r2, [r3], #1
 8004fde:	2a00      	cmp	r2, #0
 8004fe0:	d1f9      	bne.n	8004fd6 <strcpy+0x2>
 8004fe2:	4770      	bx	lr

08004fe4 <__assert_func>:
 8004fe4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004fe6:	4614      	mov	r4, r2
 8004fe8:	461a      	mov	r2, r3
 8004fea:	4b09      	ldr	r3, [pc, #36]	; (8005010 <__assert_func+0x2c>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4605      	mov	r5, r0
 8004ff0:	68d8      	ldr	r0, [r3, #12]
 8004ff2:	b14c      	cbz	r4, 8005008 <__assert_func+0x24>
 8004ff4:	4b07      	ldr	r3, [pc, #28]	; (8005014 <__assert_func+0x30>)
 8004ff6:	9100      	str	r1, [sp, #0]
 8004ff8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004ffc:	4906      	ldr	r1, [pc, #24]	; (8005018 <__assert_func+0x34>)
 8004ffe:	462b      	mov	r3, r5
 8005000:	f000 fca4 	bl	800594c <fiprintf>
 8005004:	f000 fcec 	bl	80059e0 <abort>
 8005008:	4b04      	ldr	r3, [pc, #16]	; (800501c <__assert_func+0x38>)
 800500a:	461c      	mov	r4, r3
 800500c:	e7f3      	b.n	8004ff6 <__assert_func+0x12>
 800500e:	bf00      	nop
 8005010:	20000064 	.word	0x20000064
 8005014:	080061aa 	.word	0x080061aa
 8005018:	080061b7 	.word	0x080061b7
 800501c:	080061e5 	.word	0x080061e5

08005020 <_free_r>:
 8005020:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005022:	2900      	cmp	r1, #0
 8005024:	d044      	beq.n	80050b0 <_free_r+0x90>
 8005026:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800502a:	9001      	str	r0, [sp, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	f1a1 0404 	sub.w	r4, r1, #4
 8005032:	bfb8      	it	lt
 8005034:	18e4      	addlt	r4, r4, r3
 8005036:	f000 f8e7 	bl	8005208 <__malloc_lock>
 800503a:	4a1e      	ldr	r2, [pc, #120]	; (80050b4 <_free_r+0x94>)
 800503c:	9801      	ldr	r0, [sp, #4]
 800503e:	6813      	ldr	r3, [r2, #0]
 8005040:	b933      	cbnz	r3, 8005050 <_free_r+0x30>
 8005042:	6063      	str	r3, [r4, #4]
 8005044:	6014      	str	r4, [r2, #0]
 8005046:	b003      	add	sp, #12
 8005048:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800504c:	f000 b8e2 	b.w	8005214 <__malloc_unlock>
 8005050:	42a3      	cmp	r3, r4
 8005052:	d908      	bls.n	8005066 <_free_r+0x46>
 8005054:	6825      	ldr	r5, [r4, #0]
 8005056:	1961      	adds	r1, r4, r5
 8005058:	428b      	cmp	r3, r1
 800505a:	bf01      	itttt	eq
 800505c:	6819      	ldreq	r1, [r3, #0]
 800505e:	685b      	ldreq	r3, [r3, #4]
 8005060:	1949      	addeq	r1, r1, r5
 8005062:	6021      	streq	r1, [r4, #0]
 8005064:	e7ed      	b.n	8005042 <_free_r+0x22>
 8005066:	461a      	mov	r2, r3
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	b10b      	cbz	r3, 8005070 <_free_r+0x50>
 800506c:	42a3      	cmp	r3, r4
 800506e:	d9fa      	bls.n	8005066 <_free_r+0x46>
 8005070:	6811      	ldr	r1, [r2, #0]
 8005072:	1855      	adds	r5, r2, r1
 8005074:	42a5      	cmp	r5, r4
 8005076:	d10b      	bne.n	8005090 <_free_r+0x70>
 8005078:	6824      	ldr	r4, [r4, #0]
 800507a:	4421      	add	r1, r4
 800507c:	1854      	adds	r4, r2, r1
 800507e:	42a3      	cmp	r3, r4
 8005080:	6011      	str	r1, [r2, #0]
 8005082:	d1e0      	bne.n	8005046 <_free_r+0x26>
 8005084:	681c      	ldr	r4, [r3, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	6053      	str	r3, [r2, #4]
 800508a:	440c      	add	r4, r1
 800508c:	6014      	str	r4, [r2, #0]
 800508e:	e7da      	b.n	8005046 <_free_r+0x26>
 8005090:	d902      	bls.n	8005098 <_free_r+0x78>
 8005092:	230c      	movs	r3, #12
 8005094:	6003      	str	r3, [r0, #0]
 8005096:	e7d6      	b.n	8005046 <_free_r+0x26>
 8005098:	6825      	ldr	r5, [r4, #0]
 800509a:	1961      	adds	r1, r4, r5
 800509c:	428b      	cmp	r3, r1
 800509e:	bf04      	itt	eq
 80050a0:	6819      	ldreq	r1, [r3, #0]
 80050a2:	685b      	ldreq	r3, [r3, #4]
 80050a4:	6063      	str	r3, [r4, #4]
 80050a6:	bf04      	itt	eq
 80050a8:	1949      	addeq	r1, r1, r5
 80050aa:	6021      	streq	r1, [r4, #0]
 80050ac:	6054      	str	r4, [r2, #4]
 80050ae:	e7ca      	b.n	8005046 <_free_r+0x26>
 80050b0:	b003      	add	sp, #12
 80050b2:	bd30      	pop	{r4, r5, pc}
 80050b4:	2000030c 	.word	0x2000030c

080050b8 <malloc>:
 80050b8:	4b02      	ldr	r3, [pc, #8]	; (80050c4 <malloc+0xc>)
 80050ba:	4601      	mov	r1, r0
 80050bc:	6818      	ldr	r0, [r3, #0]
 80050be:	f000 b823 	b.w	8005108 <_malloc_r>
 80050c2:	bf00      	nop
 80050c4:	20000064 	.word	0x20000064

080050c8 <sbrk_aligned>:
 80050c8:	b570      	push	{r4, r5, r6, lr}
 80050ca:	4e0e      	ldr	r6, [pc, #56]	; (8005104 <sbrk_aligned+0x3c>)
 80050cc:	460c      	mov	r4, r1
 80050ce:	6831      	ldr	r1, [r6, #0]
 80050d0:	4605      	mov	r5, r0
 80050d2:	b911      	cbnz	r1, 80050da <sbrk_aligned+0x12>
 80050d4:	f000 fc66 	bl	80059a4 <_sbrk_r>
 80050d8:	6030      	str	r0, [r6, #0]
 80050da:	4621      	mov	r1, r4
 80050dc:	4628      	mov	r0, r5
 80050de:	f000 fc61 	bl	80059a4 <_sbrk_r>
 80050e2:	1c43      	adds	r3, r0, #1
 80050e4:	d00a      	beq.n	80050fc <sbrk_aligned+0x34>
 80050e6:	1cc4      	adds	r4, r0, #3
 80050e8:	f024 0403 	bic.w	r4, r4, #3
 80050ec:	42a0      	cmp	r0, r4
 80050ee:	d007      	beq.n	8005100 <sbrk_aligned+0x38>
 80050f0:	1a21      	subs	r1, r4, r0
 80050f2:	4628      	mov	r0, r5
 80050f4:	f000 fc56 	bl	80059a4 <_sbrk_r>
 80050f8:	3001      	adds	r0, #1
 80050fa:	d101      	bne.n	8005100 <sbrk_aligned+0x38>
 80050fc:	f04f 34ff 	mov.w	r4, #4294967295
 8005100:	4620      	mov	r0, r4
 8005102:	bd70      	pop	{r4, r5, r6, pc}
 8005104:	20000310 	.word	0x20000310

08005108 <_malloc_r>:
 8005108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800510c:	1ccd      	adds	r5, r1, #3
 800510e:	f025 0503 	bic.w	r5, r5, #3
 8005112:	3508      	adds	r5, #8
 8005114:	2d0c      	cmp	r5, #12
 8005116:	bf38      	it	cc
 8005118:	250c      	movcc	r5, #12
 800511a:	2d00      	cmp	r5, #0
 800511c:	4607      	mov	r7, r0
 800511e:	db01      	blt.n	8005124 <_malloc_r+0x1c>
 8005120:	42a9      	cmp	r1, r5
 8005122:	d905      	bls.n	8005130 <_malloc_r+0x28>
 8005124:	230c      	movs	r3, #12
 8005126:	603b      	str	r3, [r7, #0]
 8005128:	2600      	movs	r6, #0
 800512a:	4630      	mov	r0, r6
 800512c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005130:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005204 <_malloc_r+0xfc>
 8005134:	f000 f868 	bl	8005208 <__malloc_lock>
 8005138:	f8d8 3000 	ldr.w	r3, [r8]
 800513c:	461c      	mov	r4, r3
 800513e:	bb5c      	cbnz	r4, 8005198 <_malloc_r+0x90>
 8005140:	4629      	mov	r1, r5
 8005142:	4638      	mov	r0, r7
 8005144:	f7ff ffc0 	bl	80050c8 <sbrk_aligned>
 8005148:	1c43      	adds	r3, r0, #1
 800514a:	4604      	mov	r4, r0
 800514c:	d155      	bne.n	80051fa <_malloc_r+0xf2>
 800514e:	f8d8 4000 	ldr.w	r4, [r8]
 8005152:	4626      	mov	r6, r4
 8005154:	2e00      	cmp	r6, #0
 8005156:	d145      	bne.n	80051e4 <_malloc_r+0xdc>
 8005158:	2c00      	cmp	r4, #0
 800515a:	d048      	beq.n	80051ee <_malloc_r+0xe6>
 800515c:	6823      	ldr	r3, [r4, #0]
 800515e:	4631      	mov	r1, r6
 8005160:	4638      	mov	r0, r7
 8005162:	eb04 0903 	add.w	r9, r4, r3
 8005166:	f000 fc1d 	bl	80059a4 <_sbrk_r>
 800516a:	4581      	cmp	r9, r0
 800516c:	d13f      	bne.n	80051ee <_malloc_r+0xe6>
 800516e:	6821      	ldr	r1, [r4, #0]
 8005170:	1a6d      	subs	r5, r5, r1
 8005172:	4629      	mov	r1, r5
 8005174:	4638      	mov	r0, r7
 8005176:	f7ff ffa7 	bl	80050c8 <sbrk_aligned>
 800517a:	3001      	adds	r0, #1
 800517c:	d037      	beq.n	80051ee <_malloc_r+0xe6>
 800517e:	6823      	ldr	r3, [r4, #0]
 8005180:	442b      	add	r3, r5
 8005182:	6023      	str	r3, [r4, #0]
 8005184:	f8d8 3000 	ldr.w	r3, [r8]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d038      	beq.n	80051fe <_malloc_r+0xf6>
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	42a2      	cmp	r2, r4
 8005190:	d12b      	bne.n	80051ea <_malloc_r+0xe2>
 8005192:	2200      	movs	r2, #0
 8005194:	605a      	str	r2, [r3, #4]
 8005196:	e00f      	b.n	80051b8 <_malloc_r+0xb0>
 8005198:	6822      	ldr	r2, [r4, #0]
 800519a:	1b52      	subs	r2, r2, r5
 800519c:	d41f      	bmi.n	80051de <_malloc_r+0xd6>
 800519e:	2a0b      	cmp	r2, #11
 80051a0:	d917      	bls.n	80051d2 <_malloc_r+0xca>
 80051a2:	1961      	adds	r1, r4, r5
 80051a4:	42a3      	cmp	r3, r4
 80051a6:	6025      	str	r5, [r4, #0]
 80051a8:	bf18      	it	ne
 80051aa:	6059      	strne	r1, [r3, #4]
 80051ac:	6863      	ldr	r3, [r4, #4]
 80051ae:	bf08      	it	eq
 80051b0:	f8c8 1000 	streq.w	r1, [r8]
 80051b4:	5162      	str	r2, [r4, r5]
 80051b6:	604b      	str	r3, [r1, #4]
 80051b8:	4638      	mov	r0, r7
 80051ba:	f104 060b 	add.w	r6, r4, #11
 80051be:	f000 f829 	bl	8005214 <__malloc_unlock>
 80051c2:	f026 0607 	bic.w	r6, r6, #7
 80051c6:	1d23      	adds	r3, r4, #4
 80051c8:	1af2      	subs	r2, r6, r3
 80051ca:	d0ae      	beq.n	800512a <_malloc_r+0x22>
 80051cc:	1b9b      	subs	r3, r3, r6
 80051ce:	50a3      	str	r3, [r4, r2]
 80051d0:	e7ab      	b.n	800512a <_malloc_r+0x22>
 80051d2:	42a3      	cmp	r3, r4
 80051d4:	6862      	ldr	r2, [r4, #4]
 80051d6:	d1dd      	bne.n	8005194 <_malloc_r+0x8c>
 80051d8:	f8c8 2000 	str.w	r2, [r8]
 80051dc:	e7ec      	b.n	80051b8 <_malloc_r+0xb0>
 80051de:	4623      	mov	r3, r4
 80051e0:	6864      	ldr	r4, [r4, #4]
 80051e2:	e7ac      	b.n	800513e <_malloc_r+0x36>
 80051e4:	4634      	mov	r4, r6
 80051e6:	6876      	ldr	r6, [r6, #4]
 80051e8:	e7b4      	b.n	8005154 <_malloc_r+0x4c>
 80051ea:	4613      	mov	r3, r2
 80051ec:	e7cc      	b.n	8005188 <_malloc_r+0x80>
 80051ee:	230c      	movs	r3, #12
 80051f0:	603b      	str	r3, [r7, #0]
 80051f2:	4638      	mov	r0, r7
 80051f4:	f000 f80e 	bl	8005214 <__malloc_unlock>
 80051f8:	e797      	b.n	800512a <_malloc_r+0x22>
 80051fa:	6025      	str	r5, [r4, #0]
 80051fc:	e7dc      	b.n	80051b8 <_malloc_r+0xb0>
 80051fe:	605b      	str	r3, [r3, #4]
 8005200:	deff      	udf	#255	; 0xff
 8005202:	bf00      	nop
 8005204:	2000030c 	.word	0x2000030c

08005208 <__malloc_lock>:
 8005208:	4801      	ldr	r0, [pc, #4]	; (8005210 <__malloc_lock+0x8>)
 800520a:	f7ff bee1 	b.w	8004fd0 <__retarget_lock_acquire_recursive>
 800520e:	bf00      	nop
 8005210:	20000308 	.word	0x20000308

08005214 <__malloc_unlock>:
 8005214:	4801      	ldr	r0, [pc, #4]	; (800521c <__malloc_unlock+0x8>)
 8005216:	f7ff bedc 	b.w	8004fd2 <__retarget_lock_release_recursive>
 800521a:	bf00      	nop
 800521c:	20000308 	.word	0x20000308

08005220 <__ssputs_r>:
 8005220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005224:	688e      	ldr	r6, [r1, #8]
 8005226:	461f      	mov	r7, r3
 8005228:	42be      	cmp	r6, r7
 800522a:	680b      	ldr	r3, [r1, #0]
 800522c:	4682      	mov	sl, r0
 800522e:	460c      	mov	r4, r1
 8005230:	4690      	mov	r8, r2
 8005232:	d82c      	bhi.n	800528e <__ssputs_r+0x6e>
 8005234:	898a      	ldrh	r2, [r1, #12]
 8005236:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800523a:	d026      	beq.n	800528a <__ssputs_r+0x6a>
 800523c:	6965      	ldr	r5, [r4, #20]
 800523e:	6909      	ldr	r1, [r1, #16]
 8005240:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005244:	eba3 0901 	sub.w	r9, r3, r1
 8005248:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800524c:	1c7b      	adds	r3, r7, #1
 800524e:	444b      	add	r3, r9
 8005250:	106d      	asrs	r5, r5, #1
 8005252:	429d      	cmp	r5, r3
 8005254:	bf38      	it	cc
 8005256:	461d      	movcc	r5, r3
 8005258:	0553      	lsls	r3, r2, #21
 800525a:	d527      	bpl.n	80052ac <__ssputs_r+0x8c>
 800525c:	4629      	mov	r1, r5
 800525e:	f7ff ff53 	bl	8005108 <_malloc_r>
 8005262:	4606      	mov	r6, r0
 8005264:	b360      	cbz	r0, 80052c0 <__ssputs_r+0xa0>
 8005266:	6921      	ldr	r1, [r4, #16]
 8005268:	464a      	mov	r2, r9
 800526a:	f000 fbab 	bl	80059c4 <memcpy>
 800526e:	89a3      	ldrh	r3, [r4, #12]
 8005270:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005278:	81a3      	strh	r3, [r4, #12]
 800527a:	6126      	str	r6, [r4, #16]
 800527c:	6165      	str	r5, [r4, #20]
 800527e:	444e      	add	r6, r9
 8005280:	eba5 0509 	sub.w	r5, r5, r9
 8005284:	6026      	str	r6, [r4, #0]
 8005286:	60a5      	str	r5, [r4, #8]
 8005288:	463e      	mov	r6, r7
 800528a:	42be      	cmp	r6, r7
 800528c:	d900      	bls.n	8005290 <__ssputs_r+0x70>
 800528e:	463e      	mov	r6, r7
 8005290:	6820      	ldr	r0, [r4, #0]
 8005292:	4632      	mov	r2, r6
 8005294:	4641      	mov	r1, r8
 8005296:	f000 fb6b 	bl	8005970 <memmove>
 800529a:	68a3      	ldr	r3, [r4, #8]
 800529c:	1b9b      	subs	r3, r3, r6
 800529e:	60a3      	str	r3, [r4, #8]
 80052a0:	6823      	ldr	r3, [r4, #0]
 80052a2:	4433      	add	r3, r6
 80052a4:	6023      	str	r3, [r4, #0]
 80052a6:	2000      	movs	r0, #0
 80052a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ac:	462a      	mov	r2, r5
 80052ae:	f000 fb9e 	bl	80059ee <_realloc_r>
 80052b2:	4606      	mov	r6, r0
 80052b4:	2800      	cmp	r0, #0
 80052b6:	d1e0      	bne.n	800527a <__ssputs_r+0x5a>
 80052b8:	6921      	ldr	r1, [r4, #16]
 80052ba:	4650      	mov	r0, sl
 80052bc:	f7ff feb0 	bl	8005020 <_free_r>
 80052c0:	230c      	movs	r3, #12
 80052c2:	f8ca 3000 	str.w	r3, [sl]
 80052c6:	89a3      	ldrh	r3, [r4, #12]
 80052c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052cc:	81a3      	strh	r3, [r4, #12]
 80052ce:	f04f 30ff 	mov.w	r0, #4294967295
 80052d2:	e7e9      	b.n	80052a8 <__ssputs_r+0x88>

080052d4 <_svfiprintf_r>:
 80052d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d8:	4698      	mov	r8, r3
 80052da:	898b      	ldrh	r3, [r1, #12]
 80052dc:	061b      	lsls	r3, r3, #24
 80052de:	b09d      	sub	sp, #116	; 0x74
 80052e0:	4607      	mov	r7, r0
 80052e2:	460d      	mov	r5, r1
 80052e4:	4614      	mov	r4, r2
 80052e6:	d50e      	bpl.n	8005306 <_svfiprintf_r+0x32>
 80052e8:	690b      	ldr	r3, [r1, #16]
 80052ea:	b963      	cbnz	r3, 8005306 <_svfiprintf_r+0x32>
 80052ec:	2140      	movs	r1, #64	; 0x40
 80052ee:	f7ff ff0b 	bl	8005108 <_malloc_r>
 80052f2:	6028      	str	r0, [r5, #0]
 80052f4:	6128      	str	r0, [r5, #16]
 80052f6:	b920      	cbnz	r0, 8005302 <_svfiprintf_r+0x2e>
 80052f8:	230c      	movs	r3, #12
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005300:	e0d0      	b.n	80054a4 <_svfiprintf_r+0x1d0>
 8005302:	2340      	movs	r3, #64	; 0x40
 8005304:	616b      	str	r3, [r5, #20]
 8005306:	2300      	movs	r3, #0
 8005308:	9309      	str	r3, [sp, #36]	; 0x24
 800530a:	2320      	movs	r3, #32
 800530c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005310:	f8cd 800c 	str.w	r8, [sp, #12]
 8005314:	2330      	movs	r3, #48	; 0x30
 8005316:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80054bc <_svfiprintf_r+0x1e8>
 800531a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800531e:	f04f 0901 	mov.w	r9, #1
 8005322:	4623      	mov	r3, r4
 8005324:	469a      	mov	sl, r3
 8005326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800532a:	b10a      	cbz	r2, 8005330 <_svfiprintf_r+0x5c>
 800532c:	2a25      	cmp	r2, #37	; 0x25
 800532e:	d1f9      	bne.n	8005324 <_svfiprintf_r+0x50>
 8005330:	ebba 0b04 	subs.w	fp, sl, r4
 8005334:	d00b      	beq.n	800534e <_svfiprintf_r+0x7a>
 8005336:	465b      	mov	r3, fp
 8005338:	4622      	mov	r2, r4
 800533a:	4629      	mov	r1, r5
 800533c:	4638      	mov	r0, r7
 800533e:	f7ff ff6f 	bl	8005220 <__ssputs_r>
 8005342:	3001      	adds	r0, #1
 8005344:	f000 80a9 	beq.w	800549a <_svfiprintf_r+0x1c6>
 8005348:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800534a:	445a      	add	r2, fp
 800534c:	9209      	str	r2, [sp, #36]	; 0x24
 800534e:	f89a 3000 	ldrb.w	r3, [sl]
 8005352:	2b00      	cmp	r3, #0
 8005354:	f000 80a1 	beq.w	800549a <_svfiprintf_r+0x1c6>
 8005358:	2300      	movs	r3, #0
 800535a:	f04f 32ff 	mov.w	r2, #4294967295
 800535e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005362:	f10a 0a01 	add.w	sl, sl, #1
 8005366:	9304      	str	r3, [sp, #16]
 8005368:	9307      	str	r3, [sp, #28]
 800536a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800536e:	931a      	str	r3, [sp, #104]	; 0x68
 8005370:	4654      	mov	r4, sl
 8005372:	2205      	movs	r2, #5
 8005374:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005378:	4850      	ldr	r0, [pc, #320]	; (80054bc <_svfiprintf_r+0x1e8>)
 800537a:	f7fa ff41 	bl	8000200 <memchr>
 800537e:	9a04      	ldr	r2, [sp, #16]
 8005380:	b9d8      	cbnz	r0, 80053ba <_svfiprintf_r+0xe6>
 8005382:	06d0      	lsls	r0, r2, #27
 8005384:	bf44      	itt	mi
 8005386:	2320      	movmi	r3, #32
 8005388:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800538c:	0711      	lsls	r1, r2, #28
 800538e:	bf44      	itt	mi
 8005390:	232b      	movmi	r3, #43	; 0x2b
 8005392:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005396:	f89a 3000 	ldrb.w	r3, [sl]
 800539a:	2b2a      	cmp	r3, #42	; 0x2a
 800539c:	d015      	beq.n	80053ca <_svfiprintf_r+0xf6>
 800539e:	9a07      	ldr	r2, [sp, #28]
 80053a0:	4654      	mov	r4, sl
 80053a2:	2000      	movs	r0, #0
 80053a4:	f04f 0c0a 	mov.w	ip, #10
 80053a8:	4621      	mov	r1, r4
 80053aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053ae:	3b30      	subs	r3, #48	; 0x30
 80053b0:	2b09      	cmp	r3, #9
 80053b2:	d94d      	bls.n	8005450 <_svfiprintf_r+0x17c>
 80053b4:	b1b0      	cbz	r0, 80053e4 <_svfiprintf_r+0x110>
 80053b6:	9207      	str	r2, [sp, #28]
 80053b8:	e014      	b.n	80053e4 <_svfiprintf_r+0x110>
 80053ba:	eba0 0308 	sub.w	r3, r0, r8
 80053be:	fa09 f303 	lsl.w	r3, r9, r3
 80053c2:	4313      	orrs	r3, r2
 80053c4:	9304      	str	r3, [sp, #16]
 80053c6:	46a2      	mov	sl, r4
 80053c8:	e7d2      	b.n	8005370 <_svfiprintf_r+0x9c>
 80053ca:	9b03      	ldr	r3, [sp, #12]
 80053cc:	1d19      	adds	r1, r3, #4
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	9103      	str	r1, [sp, #12]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	bfbb      	ittet	lt
 80053d6:	425b      	neglt	r3, r3
 80053d8:	f042 0202 	orrlt.w	r2, r2, #2
 80053dc:	9307      	strge	r3, [sp, #28]
 80053de:	9307      	strlt	r3, [sp, #28]
 80053e0:	bfb8      	it	lt
 80053e2:	9204      	strlt	r2, [sp, #16]
 80053e4:	7823      	ldrb	r3, [r4, #0]
 80053e6:	2b2e      	cmp	r3, #46	; 0x2e
 80053e8:	d10c      	bne.n	8005404 <_svfiprintf_r+0x130>
 80053ea:	7863      	ldrb	r3, [r4, #1]
 80053ec:	2b2a      	cmp	r3, #42	; 0x2a
 80053ee:	d134      	bne.n	800545a <_svfiprintf_r+0x186>
 80053f0:	9b03      	ldr	r3, [sp, #12]
 80053f2:	1d1a      	adds	r2, r3, #4
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	9203      	str	r2, [sp, #12]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	bfb8      	it	lt
 80053fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005400:	3402      	adds	r4, #2
 8005402:	9305      	str	r3, [sp, #20]
 8005404:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80054cc <_svfiprintf_r+0x1f8>
 8005408:	7821      	ldrb	r1, [r4, #0]
 800540a:	2203      	movs	r2, #3
 800540c:	4650      	mov	r0, sl
 800540e:	f7fa fef7 	bl	8000200 <memchr>
 8005412:	b138      	cbz	r0, 8005424 <_svfiprintf_r+0x150>
 8005414:	9b04      	ldr	r3, [sp, #16]
 8005416:	eba0 000a 	sub.w	r0, r0, sl
 800541a:	2240      	movs	r2, #64	; 0x40
 800541c:	4082      	lsls	r2, r0
 800541e:	4313      	orrs	r3, r2
 8005420:	3401      	adds	r4, #1
 8005422:	9304      	str	r3, [sp, #16]
 8005424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005428:	4825      	ldr	r0, [pc, #148]	; (80054c0 <_svfiprintf_r+0x1ec>)
 800542a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800542e:	2206      	movs	r2, #6
 8005430:	f7fa fee6 	bl	8000200 <memchr>
 8005434:	2800      	cmp	r0, #0
 8005436:	d038      	beq.n	80054aa <_svfiprintf_r+0x1d6>
 8005438:	4b22      	ldr	r3, [pc, #136]	; (80054c4 <_svfiprintf_r+0x1f0>)
 800543a:	bb1b      	cbnz	r3, 8005484 <_svfiprintf_r+0x1b0>
 800543c:	9b03      	ldr	r3, [sp, #12]
 800543e:	3307      	adds	r3, #7
 8005440:	f023 0307 	bic.w	r3, r3, #7
 8005444:	3308      	adds	r3, #8
 8005446:	9303      	str	r3, [sp, #12]
 8005448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800544a:	4433      	add	r3, r6
 800544c:	9309      	str	r3, [sp, #36]	; 0x24
 800544e:	e768      	b.n	8005322 <_svfiprintf_r+0x4e>
 8005450:	fb0c 3202 	mla	r2, ip, r2, r3
 8005454:	460c      	mov	r4, r1
 8005456:	2001      	movs	r0, #1
 8005458:	e7a6      	b.n	80053a8 <_svfiprintf_r+0xd4>
 800545a:	2300      	movs	r3, #0
 800545c:	3401      	adds	r4, #1
 800545e:	9305      	str	r3, [sp, #20]
 8005460:	4619      	mov	r1, r3
 8005462:	f04f 0c0a 	mov.w	ip, #10
 8005466:	4620      	mov	r0, r4
 8005468:	f810 2b01 	ldrb.w	r2, [r0], #1
 800546c:	3a30      	subs	r2, #48	; 0x30
 800546e:	2a09      	cmp	r2, #9
 8005470:	d903      	bls.n	800547a <_svfiprintf_r+0x1a6>
 8005472:	2b00      	cmp	r3, #0
 8005474:	d0c6      	beq.n	8005404 <_svfiprintf_r+0x130>
 8005476:	9105      	str	r1, [sp, #20]
 8005478:	e7c4      	b.n	8005404 <_svfiprintf_r+0x130>
 800547a:	fb0c 2101 	mla	r1, ip, r1, r2
 800547e:	4604      	mov	r4, r0
 8005480:	2301      	movs	r3, #1
 8005482:	e7f0      	b.n	8005466 <_svfiprintf_r+0x192>
 8005484:	ab03      	add	r3, sp, #12
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	462a      	mov	r2, r5
 800548a:	4b0f      	ldr	r3, [pc, #60]	; (80054c8 <_svfiprintf_r+0x1f4>)
 800548c:	a904      	add	r1, sp, #16
 800548e:	4638      	mov	r0, r7
 8005490:	f3af 8000 	nop.w
 8005494:	1c42      	adds	r2, r0, #1
 8005496:	4606      	mov	r6, r0
 8005498:	d1d6      	bne.n	8005448 <_svfiprintf_r+0x174>
 800549a:	89ab      	ldrh	r3, [r5, #12]
 800549c:	065b      	lsls	r3, r3, #25
 800549e:	f53f af2d 	bmi.w	80052fc <_svfiprintf_r+0x28>
 80054a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054a4:	b01d      	add	sp, #116	; 0x74
 80054a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054aa:	ab03      	add	r3, sp, #12
 80054ac:	9300      	str	r3, [sp, #0]
 80054ae:	462a      	mov	r2, r5
 80054b0:	4b05      	ldr	r3, [pc, #20]	; (80054c8 <_svfiprintf_r+0x1f4>)
 80054b2:	a904      	add	r1, sp, #16
 80054b4:	4638      	mov	r0, r7
 80054b6:	f000 f879 	bl	80055ac <_printf_i>
 80054ba:	e7eb      	b.n	8005494 <_svfiprintf_r+0x1c0>
 80054bc:	080061e6 	.word	0x080061e6
 80054c0:	080061f0 	.word	0x080061f0
 80054c4:	00000000 	.word	0x00000000
 80054c8:	08005221 	.word	0x08005221
 80054cc:	080061ec 	.word	0x080061ec

080054d0 <_printf_common>:
 80054d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054d4:	4616      	mov	r6, r2
 80054d6:	4699      	mov	r9, r3
 80054d8:	688a      	ldr	r2, [r1, #8]
 80054da:	690b      	ldr	r3, [r1, #16]
 80054dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054e0:	4293      	cmp	r3, r2
 80054e2:	bfb8      	it	lt
 80054e4:	4613      	movlt	r3, r2
 80054e6:	6033      	str	r3, [r6, #0]
 80054e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054ec:	4607      	mov	r7, r0
 80054ee:	460c      	mov	r4, r1
 80054f0:	b10a      	cbz	r2, 80054f6 <_printf_common+0x26>
 80054f2:	3301      	adds	r3, #1
 80054f4:	6033      	str	r3, [r6, #0]
 80054f6:	6823      	ldr	r3, [r4, #0]
 80054f8:	0699      	lsls	r1, r3, #26
 80054fa:	bf42      	ittt	mi
 80054fc:	6833      	ldrmi	r3, [r6, #0]
 80054fe:	3302      	addmi	r3, #2
 8005500:	6033      	strmi	r3, [r6, #0]
 8005502:	6825      	ldr	r5, [r4, #0]
 8005504:	f015 0506 	ands.w	r5, r5, #6
 8005508:	d106      	bne.n	8005518 <_printf_common+0x48>
 800550a:	f104 0a19 	add.w	sl, r4, #25
 800550e:	68e3      	ldr	r3, [r4, #12]
 8005510:	6832      	ldr	r2, [r6, #0]
 8005512:	1a9b      	subs	r3, r3, r2
 8005514:	42ab      	cmp	r3, r5
 8005516:	dc26      	bgt.n	8005566 <_printf_common+0x96>
 8005518:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800551c:	1e13      	subs	r3, r2, #0
 800551e:	6822      	ldr	r2, [r4, #0]
 8005520:	bf18      	it	ne
 8005522:	2301      	movne	r3, #1
 8005524:	0692      	lsls	r2, r2, #26
 8005526:	d42b      	bmi.n	8005580 <_printf_common+0xb0>
 8005528:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800552c:	4649      	mov	r1, r9
 800552e:	4638      	mov	r0, r7
 8005530:	47c0      	blx	r8
 8005532:	3001      	adds	r0, #1
 8005534:	d01e      	beq.n	8005574 <_printf_common+0xa4>
 8005536:	6823      	ldr	r3, [r4, #0]
 8005538:	6922      	ldr	r2, [r4, #16]
 800553a:	f003 0306 	and.w	r3, r3, #6
 800553e:	2b04      	cmp	r3, #4
 8005540:	bf02      	ittt	eq
 8005542:	68e5      	ldreq	r5, [r4, #12]
 8005544:	6833      	ldreq	r3, [r6, #0]
 8005546:	1aed      	subeq	r5, r5, r3
 8005548:	68a3      	ldr	r3, [r4, #8]
 800554a:	bf0c      	ite	eq
 800554c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005550:	2500      	movne	r5, #0
 8005552:	4293      	cmp	r3, r2
 8005554:	bfc4      	itt	gt
 8005556:	1a9b      	subgt	r3, r3, r2
 8005558:	18ed      	addgt	r5, r5, r3
 800555a:	2600      	movs	r6, #0
 800555c:	341a      	adds	r4, #26
 800555e:	42b5      	cmp	r5, r6
 8005560:	d11a      	bne.n	8005598 <_printf_common+0xc8>
 8005562:	2000      	movs	r0, #0
 8005564:	e008      	b.n	8005578 <_printf_common+0xa8>
 8005566:	2301      	movs	r3, #1
 8005568:	4652      	mov	r2, sl
 800556a:	4649      	mov	r1, r9
 800556c:	4638      	mov	r0, r7
 800556e:	47c0      	blx	r8
 8005570:	3001      	adds	r0, #1
 8005572:	d103      	bne.n	800557c <_printf_common+0xac>
 8005574:	f04f 30ff 	mov.w	r0, #4294967295
 8005578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800557c:	3501      	adds	r5, #1
 800557e:	e7c6      	b.n	800550e <_printf_common+0x3e>
 8005580:	18e1      	adds	r1, r4, r3
 8005582:	1c5a      	adds	r2, r3, #1
 8005584:	2030      	movs	r0, #48	; 0x30
 8005586:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800558a:	4422      	add	r2, r4
 800558c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005590:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005594:	3302      	adds	r3, #2
 8005596:	e7c7      	b.n	8005528 <_printf_common+0x58>
 8005598:	2301      	movs	r3, #1
 800559a:	4622      	mov	r2, r4
 800559c:	4649      	mov	r1, r9
 800559e:	4638      	mov	r0, r7
 80055a0:	47c0      	blx	r8
 80055a2:	3001      	adds	r0, #1
 80055a4:	d0e6      	beq.n	8005574 <_printf_common+0xa4>
 80055a6:	3601      	adds	r6, #1
 80055a8:	e7d9      	b.n	800555e <_printf_common+0x8e>
	...

080055ac <_printf_i>:
 80055ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055b0:	7e0f      	ldrb	r7, [r1, #24]
 80055b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80055b4:	2f78      	cmp	r7, #120	; 0x78
 80055b6:	4691      	mov	r9, r2
 80055b8:	4680      	mov	r8, r0
 80055ba:	460c      	mov	r4, r1
 80055bc:	469a      	mov	sl, r3
 80055be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80055c2:	d807      	bhi.n	80055d4 <_printf_i+0x28>
 80055c4:	2f62      	cmp	r7, #98	; 0x62
 80055c6:	d80a      	bhi.n	80055de <_printf_i+0x32>
 80055c8:	2f00      	cmp	r7, #0
 80055ca:	f000 80d4 	beq.w	8005776 <_printf_i+0x1ca>
 80055ce:	2f58      	cmp	r7, #88	; 0x58
 80055d0:	f000 80c0 	beq.w	8005754 <_printf_i+0x1a8>
 80055d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80055dc:	e03a      	b.n	8005654 <_printf_i+0xa8>
 80055de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80055e2:	2b15      	cmp	r3, #21
 80055e4:	d8f6      	bhi.n	80055d4 <_printf_i+0x28>
 80055e6:	a101      	add	r1, pc, #4	; (adr r1, 80055ec <_printf_i+0x40>)
 80055e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055ec:	08005645 	.word	0x08005645
 80055f0:	08005659 	.word	0x08005659
 80055f4:	080055d5 	.word	0x080055d5
 80055f8:	080055d5 	.word	0x080055d5
 80055fc:	080055d5 	.word	0x080055d5
 8005600:	080055d5 	.word	0x080055d5
 8005604:	08005659 	.word	0x08005659
 8005608:	080055d5 	.word	0x080055d5
 800560c:	080055d5 	.word	0x080055d5
 8005610:	080055d5 	.word	0x080055d5
 8005614:	080055d5 	.word	0x080055d5
 8005618:	0800575d 	.word	0x0800575d
 800561c:	08005685 	.word	0x08005685
 8005620:	08005717 	.word	0x08005717
 8005624:	080055d5 	.word	0x080055d5
 8005628:	080055d5 	.word	0x080055d5
 800562c:	0800577f 	.word	0x0800577f
 8005630:	080055d5 	.word	0x080055d5
 8005634:	08005685 	.word	0x08005685
 8005638:	080055d5 	.word	0x080055d5
 800563c:	080055d5 	.word	0x080055d5
 8005640:	0800571f 	.word	0x0800571f
 8005644:	682b      	ldr	r3, [r5, #0]
 8005646:	1d1a      	adds	r2, r3, #4
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	602a      	str	r2, [r5, #0]
 800564c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005650:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005654:	2301      	movs	r3, #1
 8005656:	e09f      	b.n	8005798 <_printf_i+0x1ec>
 8005658:	6820      	ldr	r0, [r4, #0]
 800565a:	682b      	ldr	r3, [r5, #0]
 800565c:	0607      	lsls	r7, r0, #24
 800565e:	f103 0104 	add.w	r1, r3, #4
 8005662:	6029      	str	r1, [r5, #0]
 8005664:	d501      	bpl.n	800566a <_printf_i+0xbe>
 8005666:	681e      	ldr	r6, [r3, #0]
 8005668:	e003      	b.n	8005672 <_printf_i+0xc6>
 800566a:	0646      	lsls	r6, r0, #25
 800566c:	d5fb      	bpl.n	8005666 <_printf_i+0xba>
 800566e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005672:	2e00      	cmp	r6, #0
 8005674:	da03      	bge.n	800567e <_printf_i+0xd2>
 8005676:	232d      	movs	r3, #45	; 0x2d
 8005678:	4276      	negs	r6, r6
 800567a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800567e:	485a      	ldr	r0, [pc, #360]	; (80057e8 <_printf_i+0x23c>)
 8005680:	230a      	movs	r3, #10
 8005682:	e012      	b.n	80056aa <_printf_i+0xfe>
 8005684:	682b      	ldr	r3, [r5, #0]
 8005686:	6820      	ldr	r0, [r4, #0]
 8005688:	1d19      	adds	r1, r3, #4
 800568a:	6029      	str	r1, [r5, #0]
 800568c:	0605      	lsls	r5, r0, #24
 800568e:	d501      	bpl.n	8005694 <_printf_i+0xe8>
 8005690:	681e      	ldr	r6, [r3, #0]
 8005692:	e002      	b.n	800569a <_printf_i+0xee>
 8005694:	0641      	lsls	r1, r0, #25
 8005696:	d5fb      	bpl.n	8005690 <_printf_i+0xe4>
 8005698:	881e      	ldrh	r6, [r3, #0]
 800569a:	4853      	ldr	r0, [pc, #332]	; (80057e8 <_printf_i+0x23c>)
 800569c:	2f6f      	cmp	r7, #111	; 0x6f
 800569e:	bf0c      	ite	eq
 80056a0:	2308      	moveq	r3, #8
 80056a2:	230a      	movne	r3, #10
 80056a4:	2100      	movs	r1, #0
 80056a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056aa:	6865      	ldr	r5, [r4, #4]
 80056ac:	60a5      	str	r5, [r4, #8]
 80056ae:	2d00      	cmp	r5, #0
 80056b0:	bfa2      	ittt	ge
 80056b2:	6821      	ldrge	r1, [r4, #0]
 80056b4:	f021 0104 	bicge.w	r1, r1, #4
 80056b8:	6021      	strge	r1, [r4, #0]
 80056ba:	b90e      	cbnz	r6, 80056c0 <_printf_i+0x114>
 80056bc:	2d00      	cmp	r5, #0
 80056be:	d04b      	beq.n	8005758 <_printf_i+0x1ac>
 80056c0:	4615      	mov	r5, r2
 80056c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80056c6:	fb03 6711 	mls	r7, r3, r1, r6
 80056ca:	5dc7      	ldrb	r7, [r0, r7]
 80056cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80056d0:	4637      	mov	r7, r6
 80056d2:	42bb      	cmp	r3, r7
 80056d4:	460e      	mov	r6, r1
 80056d6:	d9f4      	bls.n	80056c2 <_printf_i+0x116>
 80056d8:	2b08      	cmp	r3, #8
 80056da:	d10b      	bne.n	80056f4 <_printf_i+0x148>
 80056dc:	6823      	ldr	r3, [r4, #0]
 80056de:	07de      	lsls	r6, r3, #31
 80056e0:	d508      	bpl.n	80056f4 <_printf_i+0x148>
 80056e2:	6923      	ldr	r3, [r4, #16]
 80056e4:	6861      	ldr	r1, [r4, #4]
 80056e6:	4299      	cmp	r1, r3
 80056e8:	bfde      	ittt	le
 80056ea:	2330      	movle	r3, #48	; 0x30
 80056ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80056f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80056f4:	1b52      	subs	r2, r2, r5
 80056f6:	6122      	str	r2, [r4, #16]
 80056f8:	f8cd a000 	str.w	sl, [sp]
 80056fc:	464b      	mov	r3, r9
 80056fe:	aa03      	add	r2, sp, #12
 8005700:	4621      	mov	r1, r4
 8005702:	4640      	mov	r0, r8
 8005704:	f7ff fee4 	bl	80054d0 <_printf_common>
 8005708:	3001      	adds	r0, #1
 800570a:	d14a      	bne.n	80057a2 <_printf_i+0x1f6>
 800570c:	f04f 30ff 	mov.w	r0, #4294967295
 8005710:	b004      	add	sp, #16
 8005712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	f043 0320 	orr.w	r3, r3, #32
 800571c:	6023      	str	r3, [r4, #0]
 800571e:	4833      	ldr	r0, [pc, #204]	; (80057ec <_printf_i+0x240>)
 8005720:	2778      	movs	r7, #120	; 0x78
 8005722:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	6829      	ldr	r1, [r5, #0]
 800572a:	061f      	lsls	r7, r3, #24
 800572c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005730:	d402      	bmi.n	8005738 <_printf_i+0x18c>
 8005732:	065f      	lsls	r7, r3, #25
 8005734:	bf48      	it	mi
 8005736:	b2b6      	uxthmi	r6, r6
 8005738:	07df      	lsls	r7, r3, #31
 800573a:	bf48      	it	mi
 800573c:	f043 0320 	orrmi.w	r3, r3, #32
 8005740:	6029      	str	r1, [r5, #0]
 8005742:	bf48      	it	mi
 8005744:	6023      	strmi	r3, [r4, #0]
 8005746:	b91e      	cbnz	r6, 8005750 <_printf_i+0x1a4>
 8005748:	6823      	ldr	r3, [r4, #0]
 800574a:	f023 0320 	bic.w	r3, r3, #32
 800574e:	6023      	str	r3, [r4, #0]
 8005750:	2310      	movs	r3, #16
 8005752:	e7a7      	b.n	80056a4 <_printf_i+0xf8>
 8005754:	4824      	ldr	r0, [pc, #144]	; (80057e8 <_printf_i+0x23c>)
 8005756:	e7e4      	b.n	8005722 <_printf_i+0x176>
 8005758:	4615      	mov	r5, r2
 800575a:	e7bd      	b.n	80056d8 <_printf_i+0x12c>
 800575c:	682b      	ldr	r3, [r5, #0]
 800575e:	6826      	ldr	r6, [r4, #0]
 8005760:	6961      	ldr	r1, [r4, #20]
 8005762:	1d18      	adds	r0, r3, #4
 8005764:	6028      	str	r0, [r5, #0]
 8005766:	0635      	lsls	r5, r6, #24
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	d501      	bpl.n	8005770 <_printf_i+0x1c4>
 800576c:	6019      	str	r1, [r3, #0]
 800576e:	e002      	b.n	8005776 <_printf_i+0x1ca>
 8005770:	0670      	lsls	r0, r6, #25
 8005772:	d5fb      	bpl.n	800576c <_printf_i+0x1c0>
 8005774:	8019      	strh	r1, [r3, #0]
 8005776:	2300      	movs	r3, #0
 8005778:	6123      	str	r3, [r4, #16]
 800577a:	4615      	mov	r5, r2
 800577c:	e7bc      	b.n	80056f8 <_printf_i+0x14c>
 800577e:	682b      	ldr	r3, [r5, #0]
 8005780:	1d1a      	adds	r2, r3, #4
 8005782:	602a      	str	r2, [r5, #0]
 8005784:	681d      	ldr	r5, [r3, #0]
 8005786:	6862      	ldr	r2, [r4, #4]
 8005788:	2100      	movs	r1, #0
 800578a:	4628      	mov	r0, r5
 800578c:	f7fa fd38 	bl	8000200 <memchr>
 8005790:	b108      	cbz	r0, 8005796 <_printf_i+0x1ea>
 8005792:	1b40      	subs	r0, r0, r5
 8005794:	6060      	str	r0, [r4, #4]
 8005796:	6863      	ldr	r3, [r4, #4]
 8005798:	6123      	str	r3, [r4, #16]
 800579a:	2300      	movs	r3, #0
 800579c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057a0:	e7aa      	b.n	80056f8 <_printf_i+0x14c>
 80057a2:	6923      	ldr	r3, [r4, #16]
 80057a4:	462a      	mov	r2, r5
 80057a6:	4649      	mov	r1, r9
 80057a8:	4640      	mov	r0, r8
 80057aa:	47d0      	blx	sl
 80057ac:	3001      	adds	r0, #1
 80057ae:	d0ad      	beq.n	800570c <_printf_i+0x160>
 80057b0:	6823      	ldr	r3, [r4, #0]
 80057b2:	079b      	lsls	r3, r3, #30
 80057b4:	d413      	bmi.n	80057de <_printf_i+0x232>
 80057b6:	68e0      	ldr	r0, [r4, #12]
 80057b8:	9b03      	ldr	r3, [sp, #12]
 80057ba:	4298      	cmp	r0, r3
 80057bc:	bfb8      	it	lt
 80057be:	4618      	movlt	r0, r3
 80057c0:	e7a6      	b.n	8005710 <_printf_i+0x164>
 80057c2:	2301      	movs	r3, #1
 80057c4:	4632      	mov	r2, r6
 80057c6:	4649      	mov	r1, r9
 80057c8:	4640      	mov	r0, r8
 80057ca:	47d0      	blx	sl
 80057cc:	3001      	adds	r0, #1
 80057ce:	d09d      	beq.n	800570c <_printf_i+0x160>
 80057d0:	3501      	adds	r5, #1
 80057d2:	68e3      	ldr	r3, [r4, #12]
 80057d4:	9903      	ldr	r1, [sp, #12]
 80057d6:	1a5b      	subs	r3, r3, r1
 80057d8:	42ab      	cmp	r3, r5
 80057da:	dcf2      	bgt.n	80057c2 <_printf_i+0x216>
 80057dc:	e7eb      	b.n	80057b6 <_printf_i+0x20a>
 80057de:	2500      	movs	r5, #0
 80057e0:	f104 0619 	add.w	r6, r4, #25
 80057e4:	e7f5      	b.n	80057d2 <_printf_i+0x226>
 80057e6:	bf00      	nop
 80057e8:	080061f7 	.word	0x080061f7
 80057ec:	08006208 	.word	0x08006208

080057f0 <__sflush_r>:
 80057f0:	898a      	ldrh	r2, [r1, #12]
 80057f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057f6:	4605      	mov	r5, r0
 80057f8:	0710      	lsls	r0, r2, #28
 80057fa:	460c      	mov	r4, r1
 80057fc:	d458      	bmi.n	80058b0 <__sflush_r+0xc0>
 80057fe:	684b      	ldr	r3, [r1, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	dc05      	bgt.n	8005810 <__sflush_r+0x20>
 8005804:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005806:	2b00      	cmp	r3, #0
 8005808:	dc02      	bgt.n	8005810 <__sflush_r+0x20>
 800580a:	2000      	movs	r0, #0
 800580c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005810:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005812:	2e00      	cmp	r6, #0
 8005814:	d0f9      	beq.n	800580a <__sflush_r+0x1a>
 8005816:	2300      	movs	r3, #0
 8005818:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800581c:	682f      	ldr	r7, [r5, #0]
 800581e:	6a21      	ldr	r1, [r4, #32]
 8005820:	602b      	str	r3, [r5, #0]
 8005822:	d032      	beq.n	800588a <__sflush_r+0x9a>
 8005824:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005826:	89a3      	ldrh	r3, [r4, #12]
 8005828:	075a      	lsls	r2, r3, #29
 800582a:	d505      	bpl.n	8005838 <__sflush_r+0x48>
 800582c:	6863      	ldr	r3, [r4, #4]
 800582e:	1ac0      	subs	r0, r0, r3
 8005830:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005832:	b10b      	cbz	r3, 8005838 <__sflush_r+0x48>
 8005834:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005836:	1ac0      	subs	r0, r0, r3
 8005838:	2300      	movs	r3, #0
 800583a:	4602      	mov	r2, r0
 800583c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800583e:	6a21      	ldr	r1, [r4, #32]
 8005840:	4628      	mov	r0, r5
 8005842:	47b0      	blx	r6
 8005844:	1c43      	adds	r3, r0, #1
 8005846:	89a3      	ldrh	r3, [r4, #12]
 8005848:	d106      	bne.n	8005858 <__sflush_r+0x68>
 800584a:	6829      	ldr	r1, [r5, #0]
 800584c:	291d      	cmp	r1, #29
 800584e:	d82b      	bhi.n	80058a8 <__sflush_r+0xb8>
 8005850:	4a29      	ldr	r2, [pc, #164]	; (80058f8 <__sflush_r+0x108>)
 8005852:	410a      	asrs	r2, r1
 8005854:	07d6      	lsls	r6, r2, #31
 8005856:	d427      	bmi.n	80058a8 <__sflush_r+0xb8>
 8005858:	2200      	movs	r2, #0
 800585a:	6062      	str	r2, [r4, #4]
 800585c:	04d9      	lsls	r1, r3, #19
 800585e:	6922      	ldr	r2, [r4, #16]
 8005860:	6022      	str	r2, [r4, #0]
 8005862:	d504      	bpl.n	800586e <__sflush_r+0x7e>
 8005864:	1c42      	adds	r2, r0, #1
 8005866:	d101      	bne.n	800586c <__sflush_r+0x7c>
 8005868:	682b      	ldr	r3, [r5, #0]
 800586a:	b903      	cbnz	r3, 800586e <__sflush_r+0x7e>
 800586c:	6560      	str	r0, [r4, #84]	; 0x54
 800586e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005870:	602f      	str	r7, [r5, #0]
 8005872:	2900      	cmp	r1, #0
 8005874:	d0c9      	beq.n	800580a <__sflush_r+0x1a>
 8005876:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800587a:	4299      	cmp	r1, r3
 800587c:	d002      	beq.n	8005884 <__sflush_r+0x94>
 800587e:	4628      	mov	r0, r5
 8005880:	f7ff fbce 	bl	8005020 <_free_r>
 8005884:	2000      	movs	r0, #0
 8005886:	6360      	str	r0, [r4, #52]	; 0x34
 8005888:	e7c0      	b.n	800580c <__sflush_r+0x1c>
 800588a:	2301      	movs	r3, #1
 800588c:	4628      	mov	r0, r5
 800588e:	47b0      	blx	r6
 8005890:	1c41      	adds	r1, r0, #1
 8005892:	d1c8      	bne.n	8005826 <__sflush_r+0x36>
 8005894:	682b      	ldr	r3, [r5, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d0c5      	beq.n	8005826 <__sflush_r+0x36>
 800589a:	2b1d      	cmp	r3, #29
 800589c:	d001      	beq.n	80058a2 <__sflush_r+0xb2>
 800589e:	2b16      	cmp	r3, #22
 80058a0:	d101      	bne.n	80058a6 <__sflush_r+0xb6>
 80058a2:	602f      	str	r7, [r5, #0]
 80058a4:	e7b1      	b.n	800580a <__sflush_r+0x1a>
 80058a6:	89a3      	ldrh	r3, [r4, #12]
 80058a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ac:	81a3      	strh	r3, [r4, #12]
 80058ae:	e7ad      	b.n	800580c <__sflush_r+0x1c>
 80058b0:	690f      	ldr	r7, [r1, #16]
 80058b2:	2f00      	cmp	r7, #0
 80058b4:	d0a9      	beq.n	800580a <__sflush_r+0x1a>
 80058b6:	0793      	lsls	r3, r2, #30
 80058b8:	680e      	ldr	r6, [r1, #0]
 80058ba:	bf08      	it	eq
 80058bc:	694b      	ldreq	r3, [r1, #20]
 80058be:	600f      	str	r7, [r1, #0]
 80058c0:	bf18      	it	ne
 80058c2:	2300      	movne	r3, #0
 80058c4:	eba6 0807 	sub.w	r8, r6, r7
 80058c8:	608b      	str	r3, [r1, #8]
 80058ca:	f1b8 0f00 	cmp.w	r8, #0
 80058ce:	dd9c      	ble.n	800580a <__sflush_r+0x1a>
 80058d0:	6a21      	ldr	r1, [r4, #32]
 80058d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058d4:	4643      	mov	r3, r8
 80058d6:	463a      	mov	r2, r7
 80058d8:	4628      	mov	r0, r5
 80058da:	47b0      	blx	r6
 80058dc:	2800      	cmp	r0, #0
 80058de:	dc06      	bgt.n	80058ee <__sflush_r+0xfe>
 80058e0:	89a3      	ldrh	r3, [r4, #12]
 80058e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058e6:	81a3      	strh	r3, [r4, #12]
 80058e8:	f04f 30ff 	mov.w	r0, #4294967295
 80058ec:	e78e      	b.n	800580c <__sflush_r+0x1c>
 80058ee:	4407      	add	r7, r0
 80058f0:	eba8 0800 	sub.w	r8, r8, r0
 80058f4:	e7e9      	b.n	80058ca <__sflush_r+0xda>
 80058f6:	bf00      	nop
 80058f8:	dfbffffe 	.word	0xdfbffffe

080058fc <_fflush_r>:
 80058fc:	b538      	push	{r3, r4, r5, lr}
 80058fe:	690b      	ldr	r3, [r1, #16]
 8005900:	4605      	mov	r5, r0
 8005902:	460c      	mov	r4, r1
 8005904:	b913      	cbnz	r3, 800590c <_fflush_r+0x10>
 8005906:	2500      	movs	r5, #0
 8005908:	4628      	mov	r0, r5
 800590a:	bd38      	pop	{r3, r4, r5, pc}
 800590c:	b118      	cbz	r0, 8005916 <_fflush_r+0x1a>
 800590e:	6a03      	ldr	r3, [r0, #32]
 8005910:	b90b      	cbnz	r3, 8005916 <_fflush_r+0x1a>
 8005912:	f7ff f9db 	bl	8004ccc <__sinit>
 8005916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d0f3      	beq.n	8005906 <_fflush_r+0xa>
 800591e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005920:	07d0      	lsls	r0, r2, #31
 8005922:	d404      	bmi.n	800592e <_fflush_r+0x32>
 8005924:	0599      	lsls	r1, r3, #22
 8005926:	d402      	bmi.n	800592e <_fflush_r+0x32>
 8005928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800592a:	f7ff fb51 	bl	8004fd0 <__retarget_lock_acquire_recursive>
 800592e:	4628      	mov	r0, r5
 8005930:	4621      	mov	r1, r4
 8005932:	f7ff ff5d 	bl	80057f0 <__sflush_r>
 8005936:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005938:	07da      	lsls	r2, r3, #31
 800593a:	4605      	mov	r5, r0
 800593c:	d4e4      	bmi.n	8005908 <_fflush_r+0xc>
 800593e:	89a3      	ldrh	r3, [r4, #12]
 8005940:	059b      	lsls	r3, r3, #22
 8005942:	d4e1      	bmi.n	8005908 <_fflush_r+0xc>
 8005944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005946:	f7ff fb44 	bl	8004fd2 <__retarget_lock_release_recursive>
 800594a:	e7dd      	b.n	8005908 <_fflush_r+0xc>

0800594c <fiprintf>:
 800594c:	b40e      	push	{r1, r2, r3}
 800594e:	b503      	push	{r0, r1, lr}
 8005950:	4601      	mov	r1, r0
 8005952:	ab03      	add	r3, sp, #12
 8005954:	4805      	ldr	r0, [pc, #20]	; (800596c <fiprintf+0x20>)
 8005956:	f853 2b04 	ldr.w	r2, [r3], #4
 800595a:	6800      	ldr	r0, [r0, #0]
 800595c:	9301      	str	r3, [sp, #4]
 800595e:	f000 f89f 	bl	8005aa0 <_vfiprintf_r>
 8005962:	b002      	add	sp, #8
 8005964:	f85d eb04 	ldr.w	lr, [sp], #4
 8005968:	b003      	add	sp, #12
 800596a:	4770      	bx	lr
 800596c:	20000064 	.word	0x20000064

08005970 <memmove>:
 8005970:	4288      	cmp	r0, r1
 8005972:	b510      	push	{r4, lr}
 8005974:	eb01 0402 	add.w	r4, r1, r2
 8005978:	d902      	bls.n	8005980 <memmove+0x10>
 800597a:	4284      	cmp	r4, r0
 800597c:	4623      	mov	r3, r4
 800597e:	d807      	bhi.n	8005990 <memmove+0x20>
 8005980:	1e43      	subs	r3, r0, #1
 8005982:	42a1      	cmp	r1, r4
 8005984:	d008      	beq.n	8005998 <memmove+0x28>
 8005986:	f811 2b01 	ldrb.w	r2, [r1], #1
 800598a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800598e:	e7f8      	b.n	8005982 <memmove+0x12>
 8005990:	4402      	add	r2, r0
 8005992:	4601      	mov	r1, r0
 8005994:	428a      	cmp	r2, r1
 8005996:	d100      	bne.n	800599a <memmove+0x2a>
 8005998:	bd10      	pop	{r4, pc}
 800599a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800599e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80059a2:	e7f7      	b.n	8005994 <memmove+0x24>

080059a4 <_sbrk_r>:
 80059a4:	b538      	push	{r3, r4, r5, lr}
 80059a6:	4d06      	ldr	r5, [pc, #24]	; (80059c0 <_sbrk_r+0x1c>)
 80059a8:	2300      	movs	r3, #0
 80059aa:	4604      	mov	r4, r0
 80059ac:	4608      	mov	r0, r1
 80059ae:	602b      	str	r3, [r5, #0]
 80059b0:	f7fb fc14 	bl	80011dc <_sbrk>
 80059b4:	1c43      	adds	r3, r0, #1
 80059b6:	d102      	bne.n	80059be <_sbrk_r+0x1a>
 80059b8:	682b      	ldr	r3, [r5, #0]
 80059ba:	b103      	cbz	r3, 80059be <_sbrk_r+0x1a>
 80059bc:	6023      	str	r3, [r4, #0]
 80059be:	bd38      	pop	{r3, r4, r5, pc}
 80059c0:	20000304 	.word	0x20000304

080059c4 <memcpy>:
 80059c4:	440a      	add	r2, r1
 80059c6:	4291      	cmp	r1, r2
 80059c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80059cc:	d100      	bne.n	80059d0 <memcpy+0xc>
 80059ce:	4770      	bx	lr
 80059d0:	b510      	push	{r4, lr}
 80059d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059da:	4291      	cmp	r1, r2
 80059dc:	d1f9      	bne.n	80059d2 <memcpy+0xe>
 80059de:	bd10      	pop	{r4, pc}

080059e0 <abort>:
 80059e0:	b508      	push	{r3, lr}
 80059e2:	2006      	movs	r0, #6
 80059e4:	f000 fa34 	bl	8005e50 <raise>
 80059e8:	2001      	movs	r0, #1
 80059ea:	f7fb fb7f 	bl	80010ec <_exit>

080059ee <_realloc_r>:
 80059ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059f2:	4680      	mov	r8, r0
 80059f4:	4614      	mov	r4, r2
 80059f6:	460e      	mov	r6, r1
 80059f8:	b921      	cbnz	r1, 8005a04 <_realloc_r+0x16>
 80059fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059fe:	4611      	mov	r1, r2
 8005a00:	f7ff bb82 	b.w	8005108 <_malloc_r>
 8005a04:	b92a      	cbnz	r2, 8005a12 <_realloc_r+0x24>
 8005a06:	f7ff fb0b 	bl	8005020 <_free_r>
 8005a0a:	4625      	mov	r5, r4
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a12:	f000 fa39 	bl	8005e88 <_malloc_usable_size_r>
 8005a16:	4284      	cmp	r4, r0
 8005a18:	4607      	mov	r7, r0
 8005a1a:	d802      	bhi.n	8005a22 <_realloc_r+0x34>
 8005a1c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a20:	d812      	bhi.n	8005a48 <_realloc_r+0x5a>
 8005a22:	4621      	mov	r1, r4
 8005a24:	4640      	mov	r0, r8
 8005a26:	f7ff fb6f 	bl	8005108 <_malloc_r>
 8005a2a:	4605      	mov	r5, r0
 8005a2c:	2800      	cmp	r0, #0
 8005a2e:	d0ed      	beq.n	8005a0c <_realloc_r+0x1e>
 8005a30:	42bc      	cmp	r4, r7
 8005a32:	4622      	mov	r2, r4
 8005a34:	4631      	mov	r1, r6
 8005a36:	bf28      	it	cs
 8005a38:	463a      	movcs	r2, r7
 8005a3a:	f7ff ffc3 	bl	80059c4 <memcpy>
 8005a3e:	4631      	mov	r1, r6
 8005a40:	4640      	mov	r0, r8
 8005a42:	f7ff faed 	bl	8005020 <_free_r>
 8005a46:	e7e1      	b.n	8005a0c <_realloc_r+0x1e>
 8005a48:	4635      	mov	r5, r6
 8005a4a:	e7df      	b.n	8005a0c <_realloc_r+0x1e>

08005a4c <__sfputc_r>:
 8005a4c:	6893      	ldr	r3, [r2, #8]
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	b410      	push	{r4}
 8005a54:	6093      	str	r3, [r2, #8]
 8005a56:	da08      	bge.n	8005a6a <__sfputc_r+0x1e>
 8005a58:	6994      	ldr	r4, [r2, #24]
 8005a5a:	42a3      	cmp	r3, r4
 8005a5c:	db01      	blt.n	8005a62 <__sfputc_r+0x16>
 8005a5e:	290a      	cmp	r1, #10
 8005a60:	d103      	bne.n	8005a6a <__sfputc_r+0x1e>
 8005a62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a66:	f000 b935 	b.w	8005cd4 <__swbuf_r>
 8005a6a:	6813      	ldr	r3, [r2, #0]
 8005a6c:	1c58      	adds	r0, r3, #1
 8005a6e:	6010      	str	r0, [r2, #0]
 8005a70:	7019      	strb	r1, [r3, #0]
 8005a72:	4608      	mov	r0, r1
 8005a74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <__sfputs_r>:
 8005a7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a7c:	4606      	mov	r6, r0
 8005a7e:	460f      	mov	r7, r1
 8005a80:	4614      	mov	r4, r2
 8005a82:	18d5      	adds	r5, r2, r3
 8005a84:	42ac      	cmp	r4, r5
 8005a86:	d101      	bne.n	8005a8c <__sfputs_r+0x12>
 8005a88:	2000      	movs	r0, #0
 8005a8a:	e007      	b.n	8005a9c <__sfputs_r+0x22>
 8005a8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a90:	463a      	mov	r2, r7
 8005a92:	4630      	mov	r0, r6
 8005a94:	f7ff ffda 	bl	8005a4c <__sfputc_r>
 8005a98:	1c43      	adds	r3, r0, #1
 8005a9a:	d1f3      	bne.n	8005a84 <__sfputs_r+0xa>
 8005a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005aa0 <_vfiprintf_r>:
 8005aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa4:	460d      	mov	r5, r1
 8005aa6:	b09d      	sub	sp, #116	; 0x74
 8005aa8:	4614      	mov	r4, r2
 8005aaa:	4698      	mov	r8, r3
 8005aac:	4606      	mov	r6, r0
 8005aae:	b118      	cbz	r0, 8005ab8 <_vfiprintf_r+0x18>
 8005ab0:	6a03      	ldr	r3, [r0, #32]
 8005ab2:	b90b      	cbnz	r3, 8005ab8 <_vfiprintf_r+0x18>
 8005ab4:	f7ff f90a 	bl	8004ccc <__sinit>
 8005ab8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005aba:	07d9      	lsls	r1, r3, #31
 8005abc:	d405      	bmi.n	8005aca <_vfiprintf_r+0x2a>
 8005abe:	89ab      	ldrh	r3, [r5, #12]
 8005ac0:	059a      	lsls	r2, r3, #22
 8005ac2:	d402      	bmi.n	8005aca <_vfiprintf_r+0x2a>
 8005ac4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ac6:	f7ff fa83 	bl	8004fd0 <__retarget_lock_acquire_recursive>
 8005aca:	89ab      	ldrh	r3, [r5, #12]
 8005acc:	071b      	lsls	r3, r3, #28
 8005ace:	d501      	bpl.n	8005ad4 <_vfiprintf_r+0x34>
 8005ad0:	692b      	ldr	r3, [r5, #16]
 8005ad2:	b99b      	cbnz	r3, 8005afc <_vfiprintf_r+0x5c>
 8005ad4:	4629      	mov	r1, r5
 8005ad6:	4630      	mov	r0, r6
 8005ad8:	f000 f93a 	bl	8005d50 <__swsetup_r>
 8005adc:	b170      	cbz	r0, 8005afc <_vfiprintf_r+0x5c>
 8005ade:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ae0:	07dc      	lsls	r4, r3, #31
 8005ae2:	d504      	bpl.n	8005aee <_vfiprintf_r+0x4e>
 8005ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae8:	b01d      	add	sp, #116	; 0x74
 8005aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aee:	89ab      	ldrh	r3, [r5, #12]
 8005af0:	0598      	lsls	r0, r3, #22
 8005af2:	d4f7      	bmi.n	8005ae4 <_vfiprintf_r+0x44>
 8005af4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005af6:	f7ff fa6c 	bl	8004fd2 <__retarget_lock_release_recursive>
 8005afa:	e7f3      	b.n	8005ae4 <_vfiprintf_r+0x44>
 8005afc:	2300      	movs	r3, #0
 8005afe:	9309      	str	r3, [sp, #36]	; 0x24
 8005b00:	2320      	movs	r3, #32
 8005b02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b06:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b0a:	2330      	movs	r3, #48	; 0x30
 8005b0c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005cc0 <_vfiprintf_r+0x220>
 8005b10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b14:	f04f 0901 	mov.w	r9, #1
 8005b18:	4623      	mov	r3, r4
 8005b1a:	469a      	mov	sl, r3
 8005b1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b20:	b10a      	cbz	r2, 8005b26 <_vfiprintf_r+0x86>
 8005b22:	2a25      	cmp	r2, #37	; 0x25
 8005b24:	d1f9      	bne.n	8005b1a <_vfiprintf_r+0x7a>
 8005b26:	ebba 0b04 	subs.w	fp, sl, r4
 8005b2a:	d00b      	beq.n	8005b44 <_vfiprintf_r+0xa4>
 8005b2c:	465b      	mov	r3, fp
 8005b2e:	4622      	mov	r2, r4
 8005b30:	4629      	mov	r1, r5
 8005b32:	4630      	mov	r0, r6
 8005b34:	f7ff ffa1 	bl	8005a7a <__sfputs_r>
 8005b38:	3001      	adds	r0, #1
 8005b3a:	f000 80a9 	beq.w	8005c90 <_vfiprintf_r+0x1f0>
 8005b3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b40:	445a      	add	r2, fp
 8005b42:	9209      	str	r2, [sp, #36]	; 0x24
 8005b44:	f89a 3000 	ldrb.w	r3, [sl]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f000 80a1 	beq.w	8005c90 <_vfiprintf_r+0x1f0>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	f04f 32ff 	mov.w	r2, #4294967295
 8005b54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b58:	f10a 0a01 	add.w	sl, sl, #1
 8005b5c:	9304      	str	r3, [sp, #16]
 8005b5e:	9307      	str	r3, [sp, #28]
 8005b60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b64:	931a      	str	r3, [sp, #104]	; 0x68
 8005b66:	4654      	mov	r4, sl
 8005b68:	2205      	movs	r2, #5
 8005b6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b6e:	4854      	ldr	r0, [pc, #336]	; (8005cc0 <_vfiprintf_r+0x220>)
 8005b70:	f7fa fb46 	bl	8000200 <memchr>
 8005b74:	9a04      	ldr	r2, [sp, #16]
 8005b76:	b9d8      	cbnz	r0, 8005bb0 <_vfiprintf_r+0x110>
 8005b78:	06d1      	lsls	r1, r2, #27
 8005b7a:	bf44      	itt	mi
 8005b7c:	2320      	movmi	r3, #32
 8005b7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b82:	0713      	lsls	r3, r2, #28
 8005b84:	bf44      	itt	mi
 8005b86:	232b      	movmi	r3, #43	; 0x2b
 8005b88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b8c:	f89a 3000 	ldrb.w	r3, [sl]
 8005b90:	2b2a      	cmp	r3, #42	; 0x2a
 8005b92:	d015      	beq.n	8005bc0 <_vfiprintf_r+0x120>
 8005b94:	9a07      	ldr	r2, [sp, #28]
 8005b96:	4654      	mov	r4, sl
 8005b98:	2000      	movs	r0, #0
 8005b9a:	f04f 0c0a 	mov.w	ip, #10
 8005b9e:	4621      	mov	r1, r4
 8005ba0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ba4:	3b30      	subs	r3, #48	; 0x30
 8005ba6:	2b09      	cmp	r3, #9
 8005ba8:	d94d      	bls.n	8005c46 <_vfiprintf_r+0x1a6>
 8005baa:	b1b0      	cbz	r0, 8005bda <_vfiprintf_r+0x13a>
 8005bac:	9207      	str	r2, [sp, #28]
 8005bae:	e014      	b.n	8005bda <_vfiprintf_r+0x13a>
 8005bb0:	eba0 0308 	sub.w	r3, r0, r8
 8005bb4:	fa09 f303 	lsl.w	r3, r9, r3
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	9304      	str	r3, [sp, #16]
 8005bbc:	46a2      	mov	sl, r4
 8005bbe:	e7d2      	b.n	8005b66 <_vfiprintf_r+0xc6>
 8005bc0:	9b03      	ldr	r3, [sp, #12]
 8005bc2:	1d19      	adds	r1, r3, #4
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	9103      	str	r1, [sp, #12]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	bfbb      	ittet	lt
 8005bcc:	425b      	neglt	r3, r3
 8005bce:	f042 0202 	orrlt.w	r2, r2, #2
 8005bd2:	9307      	strge	r3, [sp, #28]
 8005bd4:	9307      	strlt	r3, [sp, #28]
 8005bd6:	bfb8      	it	lt
 8005bd8:	9204      	strlt	r2, [sp, #16]
 8005bda:	7823      	ldrb	r3, [r4, #0]
 8005bdc:	2b2e      	cmp	r3, #46	; 0x2e
 8005bde:	d10c      	bne.n	8005bfa <_vfiprintf_r+0x15a>
 8005be0:	7863      	ldrb	r3, [r4, #1]
 8005be2:	2b2a      	cmp	r3, #42	; 0x2a
 8005be4:	d134      	bne.n	8005c50 <_vfiprintf_r+0x1b0>
 8005be6:	9b03      	ldr	r3, [sp, #12]
 8005be8:	1d1a      	adds	r2, r3, #4
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	9203      	str	r2, [sp, #12]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	bfb8      	it	lt
 8005bf2:	f04f 33ff 	movlt.w	r3, #4294967295
 8005bf6:	3402      	adds	r4, #2
 8005bf8:	9305      	str	r3, [sp, #20]
 8005bfa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005cd0 <_vfiprintf_r+0x230>
 8005bfe:	7821      	ldrb	r1, [r4, #0]
 8005c00:	2203      	movs	r2, #3
 8005c02:	4650      	mov	r0, sl
 8005c04:	f7fa fafc 	bl	8000200 <memchr>
 8005c08:	b138      	cbz	r0, 8005c1a <_vfiprintf_r+0x17a>
 8005c0a:	9b04      	ldr	r3, [sp, #16]
 8005c0c:	eba0 000a 	sub.w	r0, r0, sl
 8005c10:	2240      	movs	r2, #64	; 0x40
 8005c12:	4082      	lsls	r2, r0
 8005c14:	4313      	orrs	r3, r2
 8005c16:	3401      	adds	r4, #1
 8005c18:	9304      	str	r3, [sp, #16]
 8005c1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c1e:	4829      	ldr	r0, [pc, #164]	; (8005cc4 <_vfiprintf_r+0x224>)
 8005c20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c24:	2206      	movs	r2, #6
 8005c26:	f7fa faeb 	bl	8000200 <memchr>
 8005c2a:	2800      	cmp	r0, #0
 8005c2c:	d03f      	beq.n	8005cae <_vfiprintf_r+0x20e>
 8005c2e:	4b26      	ldr	r3, [pc, #152]	; (8005cc8 <_vfiprintf_r+0x228>)
 8005c30:	bb1b      	cbnz	r3, 8005c7a <_vfiprintf_r+0x1da>
 8005c32:	9b03      	ldr	r3, [sp, #12]
 8005c34:	3307      	adds	r3, #7
 8005c36:	f023 0307 	bic.w	r3, r3, #7
 8005c3a:	3308      	adds	r3, #8
 8005c3c:	9303      	str	r3, [sp, #12]
 8005c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c40:	443b      	add	r3, r7
 8005c42:	9309      	str	r3, [sp, #36]	; 0x24
 8005c44:	e768      	b.n	8005b18 <_vfiprintf_r+0x78>
 8005c46:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c4a:	460c      	mov	r4, r1
 8005c4c:	2001      	movs	r0, #1
 8005c4e:	e7a6      	b.n	8005b9e <_vfiprintf_r+0xfe>
 8005c50:	2300      	movs	r3, #0
 8005c52:	3401      	adds	r4, #1
 8005c54:	9305      	str	r3, [sp, #20]
 8005c56:	4619      	mov	r1, r3
 8005c58:	f04f 0c0a 	mov.w	ip, #10
 8005c5c:	4620      	mov	r0, r4
 8005c5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c62:	3a30      	subs	r2, #48	; 0x30
 8005c64:	2a09      	cmp	r2, #9
 8005c66:	d903      	bls.n	8005c70 <_vfiprintf_r+0x1d0>
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d0c6      	beq.n	8005bfa <_vfiprintf_r+0x15a>
 8005c6c:	9105      	str	r1, [sp, #20]
 8005c6e:	e7c4      	b.n	8005bfa <_vfiprintf_r+0x15a>
 8005c70:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c74:	4604      	mov	r4, r0
 8005c76:	2301      	movs	r3, #1
 8005c78:	e7f0      	b.n	8005c5c <_vfiprintf_r+0x1bc>
 8005c7a:	ab03      	add	r3, sp, #12
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	462a      	mov	r2, r5
 8005c80:	4b12      	ldr	r3, [pc, #72]	; (8005ccc <_vfiprintf_r+0x22c>)
 8005c82:	a904      	add	r1, sp, #16
 8005c84:	4630      	mov	r0, r6
 8005c86:	f3af 8000 	nop.w
 8005c8a:	4607      	mov	r7, r0
 8005c8c:	1c78      	adds	r0, r7, #1
 8005c8e:	d1d6      	bne.n	8005c3e <_vfiprintf_r+0x19e>
 8005c90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c92:	07d9      	lsls	r1, r3, #31
 8005c94:	d405      	bmi.n	8005ca2 <_vfiprintf_r+0x202>
 8005c96:	89ab      	ldrh	r3, [r5, #12]
 8005c98:	059a      	lsls	r2, r3, #22
 8005c9a:	d402      	bmi.n	8005ca2 <_vfiprintf_r+0x202>
 8005c9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c9e:	f7ff f998 	bl	8004fd2 <__retarget_lock_release_recursive>
 8005ca2:	89ab      	ldrh	r3, [r5, #12]
 8005ca4:	065b      	lsls	r3, r3, #25
 8005ca6:	f53f af1d 	bmi.w	8005ae4 <_vfiprintf_r+0x44>
 8005caa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cac:	e71c      	b.n	8005ae8 <_vfiprintf_r+0x48>
 8005cae:	ab03      	add	r3, sp, #12
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	462a      	mov	r2, r5
 8005cb4:	4b05      	ldr	r3, [pc, #20]	; (8005ccc <_vfiprintf_r+0x22c>)
 8005cb6:	a904      	add	r1, sp, #16
 8005cb8:	4630      	mov	r0, r6
 8005cba:	f7ff fc77 	bl	80055ac <_printf_i>
 8005cbe:	e7e4      	b.n	8005c8a <_vfiprintf_r+0x1ea>
 8005cc0:	080061e6 	.word	0x080061e6
 8005cc4:	080061f0 	.word	0x080061f0
 8005cc8:	00000000 	.word	0x00000000
 8005ccc:	08005a7b 	.word	0x08005a7b
 8005cd0:	080061ec 	.word	0x080061ec

08005cd4 <__swbuf_r>:
 8005cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd6:	460e      	mov	r6, r1
 8005cd8:	4614      	mov	r4, r2
 8005cda:	4605      	mov	r5, r0
 8005cdc:	b118      	cbz	r0, 8005ce6 <__swbuf_r+0x12>
 8005cde:	6a03      	ldr	r3, [r0, #32]
 8005ce0:	b90b      	cbnz	r3, 8005ce6 <__swbuf_r+0x12>
 8005ce2:	f7fe fff3 	bl	8004ccc <__sinit>
 8005ce6:	69a3      	ldr	r3, [r4, #24]
 8005ce8:	60a3      	str	r3, [r4, #8]
 8005cea:	89a3      	ldrh	r3, [r4, #12]
 8005cec:	071a      	lsls	r2, r3, #28
 8005cee:	d525      	bpl.n	8005d3c <__swbuf_r+0x68>
 8005cf0:	6923      	ldr	r3, [r4, #16]
 8005cf2:	b31b      	cbz	r3, 8005d3c <__swbuf_r+0x68>
 8005cf4:	6823      	ldr	r3, [r4, #0]
 8005cf6:	6922      	ldr	r2, [r4, #16]
 8005cf8:	1a98      	subs	r0, r3, r2
 8005cfa:	6963      	ldr	r3, [r4, #20]
 8005cfc:	b2f6      	uxtb	r6, r6
 8005cfe:	4283      	cmp	r3, r0
 8005d00:	4637      	mov	r7, r6
 8005d02:	dc04      	bgt.n	8005d0e <__swbuf_r+0x3a>
 8005d04:	4621      	mov	r1, r4
 8005d06:	4628      	mov	r0, r5
 8005d08:	f7ff fdf8 	bl	80058fc <_fflush_r>
 8005d0c:	b9e0      	cbnz	r0, 8005d48 <__swbuf_r+0x74>
 8005d0e:	68a3      	ldr	r3, [r4, #8]
 8005d10:	3b01      	subs	r3, #1
 8005d12:	60a3      	str	r3, [r4, #8]
 8005d14:	6823      	ldr	r3, [r4, #0]
 8005d16:	1c5a      	adds	r2, r3, #1
 8005d18:	6022      	str	r2, [r4, #0]
 8005d1a:	701e      	strb	r6, [r3, #0]
 8005d1c:	6962      	ldr	r2, [r4, #20]
 8005d1e:	1c43      	adds	r3, r0, #1
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d004      	beq.n	8005d2e <__swbuf_r+0x5a>
 8005d24:	89a3      	ldrh	r3, [r4, #12]
 8005d26:	07db      	lsls	r3, r3, #31
 8005d28:	d506      	bpl.n	8005d38 <__swbuf_r+0x64>
 8005d2a:	2e0a      	cmp	r6, #10
 8005d2c:	d104      	bne.n	8005d38 <__swbuf_r+0x64>
 8005d2e:	4621      	mov	r1, r4
 8005d30:	4628      	mov	r0, r5
 8005d32:	f7ff fde3 	bl	80058fc <_fflush_r>
 8005d36:	b938      	cbnz	r0, 8005d48 <__swbuf_r+0x74>
 8005d38:	4638      	mov	r0, r7
 8005d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d3c:	4621      	mov	r1, r4
 8005d3e:	4628      	mov	r0, r5
 8005d40:	f000 f806 	bl	8005d50 <__swsetup_r>
 8005d44:	2800      	cmp	r0, #0
 8005d46:	d0d5      	beq.n	8005cf4 <__swbuf_r+0x20>
 8005d48:	f04f 37ff 	mov.w	r7, #4294967295
 8005d4c:	e7f4      	b.n	8005d38 <__swbuf_r+0x64>
	...

08005d50 <__swsetup_r>:
 8005d50:	b538      	push	{r3, r4, r5, lr}
 8005d52:	4b2a      	ldr	r3, [pc, #168]	; (8005dfc <__swsetup_r+0xac>)
 8005d54:	4605      	mov	r5, r0
 8005d56:	6818      	ldr	r0, [r3, #0]
 8005d58:	460c      	mov	r4, r1
 8005d5a:	b118      	cbz	r0, 8005d64 <__swsetup_r+0x14>
 8005d5c:	6a03      	ldr	r3, [r0, #32]
 8005d5e:	b90b      	cbnz	r3, 8005d64 <__swsetup_r+0x14>
 8005d60:	f7fe ffb4 	bl	8004ccc <__sinit>
 8005d64:	89a3      	ldrh	r3, [r4, #12]
 8005d66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d6a:	0718      	lsls	r0, r3, #28
 8005d6c:	d422      	bmi.n	8005db4 <__swsetup_r+0x64>
 8005d6e:	06d9      	lsls	r1, r3, #27
 8005d70:	d407      	bmi.n	8005d82 <__swsetup_r+0x32>
 8005d72:	2309      	movs	r3, #9
 8005d74:	602b      	str	r3, [r5, #0]
 8005d76:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d7a:	81a3      	strh	r3, [r4, #12]
 8005d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d80:	e034      	b.n	8005dec <__swsetup_r+0x9c>
 8005d82:	0758      	lsls	r0, r3, #29
 8005d84:	d512      	bpl.n	8005dac <__swsetup_r+0x5c>
 8005d86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d88:	b141      	cbz	r1, 8005d9c <__swsetup_r+0x4c>
 8005d8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d8e:	4299      	cmp	r1, r3
 8005d90:	d002      	beq.n	8005d98 <__swsetup_r+0x48>
 8005d92:	4628      	mov	r0, r5
 8005d94:	f7ff f944 	bl	8005020 <_free_r>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	6363      	str	r3, [r4, #52]	; 0x34
 8005d9c:	89a3      	ldrh	r3, [r4, #12]
 8005d9e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005da2:	81a3      	strh	r3, [r4, #12]
 8005da4:	2300      	movs	r3, #0
 8005da6:	6063      	str	r3, [r4, #4]
 8005da8:	6923      	ldr	r3, [r4, #16]
 8005daa:	6023      	str	r3, [r4, #0]
 8005dac:	89a3      	ldrh	r3, [r4, #12]
 8005dae:	f043 0308 	orr.w	r3, r3, #8
 8005db2:	81a3      	strh	r3, [r4, #12]
 8005db4:	6923      	ldr	r3, [r4, #16]
 8005db6:	b94b      	cbnz	r3, 8005dcc <__swsetup_r+0x7c>
 8005db8:	89a3      	ldrh	r3, [r4, #12]
 8005dba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005dbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dc2:	d003      	beq.n	8005dcc <__swsetup_r+0x7c>
 8005dc4:	4621      	mov	r1, r4
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	f000 f88c 	bl	8005ee4 <__smakebuf_r>
 8005dcc:	89a0      	ldrh	r0, [r4, #12]
 8005dce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005dd2:	f010 0301 	ands.w	r3, r0, #1
 8005dd6:	d00a      	beq.n	8005dee <__swsetup_r+0x9e>
 8005dd8:	2300      	movs	r3, #0
 8005dda:	60a3      	str	r3, [r4, #8]
 8005ddc:	6963      	ldr	r3, [r4, #20]
 8005dde:	425b      	negs	r3, r3
 8005de0:	61a3      	str	r3, [r4, #24]
 8005de2:	6923      	ldr	r3, [r4, #16]
 8005de4:	b943      	cbnz	r3, 8005df8 <__swsetup_r+0xa8>
 8005de6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005dea:	d1c4      	bne.n	8005d76 <__swsetup_r+0x26>
 8005dec:	bd38      	pop	{r3, r4, r5, pc}
 8005dee:	0781      	lsls	r1, r0, #30
 8005df0:	bf58      	it	pl
 8005df2:	6963      	ldrpl	r3, [r4, #20]
 8005df4:	60a3      	str	r3, [r4, #8]
 8005df6:	e7f4      	b.n	8005de2 <__swsetup_r+0x92>
 8005df8:	2000      	movs	r0, #0
 8005dfa:	e7f7      	b.n	8005dec <__swsetup_r+0x9c>
 8005dfc:	20000064 	.word	0x20000064

08005e00 <_raise_r>:
 8005e00:	291f      	cmp	r1, #31
 8005e02:	b538      	push	{r3, r4, r5, lr}
 8005e04:	4604      	mov	r4, r0
 8005e06:	460d      	mov	r5, r1
 8005e08:	d904      	bls.n	8005e14 <_raise_r+0x14>
 8005e0a:	2316      	movs	r3, #22
 8005e0c:	6003      	str	r3, [r0, #0]
 8005e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e12:	bd38      	pop	{r3, r4, r5, pc}
 8005e14:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005e16:	b112      	cbz	r2, 8005e1e <_raise_r+0x1e>
 8005e18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e1c:	b94b      	cbnz	r3, 8005e32 <_raise_r+0x32>
 8005e1e:	4620      	mov	r0, r4
 8005e20:	f000 f830 	bl	8005e84 <_getpid_r>
 8005e24:	462a      	mov	r2, r5
 8005e26:	4601      	mov	r1, r0
 8005e28:	4620      	mov	r0, r4
 8005e2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e2e:	f000 b817 	b.w	8005e60 <_kill_r>
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d00a      	beq.n	8005e4c <_raise_r+0x4c>
 8005e36:	1c59      	adds	r1, r3, #1
 8005e38:	d103      	bne.n	8005e42 <_raise_r+0x42>
 8005e3a:	2316      	movs	r3, #22
 8005e3c:	6003      	str	r3, [r0, #0]
 8005e3e:	2001      	movs	r0, #1
 8005e40:	e7e7      	b.n	8005e12 <_raise_r+0x12>
 8005e42:	2400      	movs	r4, #0
 8005e44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005e48:	4628      	mov	r0, r5
 8005e4a:	4798      	blx	r3
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	e7e0      	b.n	8005e12 <_raise_r+0x12>

08005e50 <raise>:
 8005e50:	4b02      	ldr	r3, [pc, #8]	; (8005e5c <raise+0xc>)
 8005e52:	4601      	mov	r1, r0
 8005e54:	6818      	ldr	r0, [r3, #0]
 8005e56:	f7ff bfd3 	b.w	8005e00 <_raise_r>
 8005e5a:	bf00      	nop
 8005e5c:	20000064 	.word	0x20000064

08005e60 <_kill_r>:
 8005e60:	b538      	push	{r3, r4, r5, lr}
 8005e62:	4d07      	ldr	r5, [pc, #28]	; (8005e80 <_kill_r+0x20>)
 8005e64:	2300      	movs	r3, #0
 8005e66:	4604      	mov	r4, r0
 8005e68:	4608      	mov	r0, r1
 8005e6a:	4611      	mov	r1, r2
 8005e6c:	602b      	str	r3, [r5, #0]
 8005e6e:	f7fb f92d 	bl	80010cc <_kill>
 8005e72:	1c43      	adds	r3, r0, #1
 8005e74:	d102      	bne.n	8005e7c <_kill_r+0x1c>
 8005e76:	682b      	ldr	r3, [r5, #0]
 8005e78:	b103      	cbz	r3, 8005e7c <_kill_r+0x1c>
 8005e7a:	6023      	str	r3, [r4, #0]
 8005e7c:	bd38      	pop	{r3, r4, r5, pc}
 8005e7e:	bf00      	nop
 8005e80:	20000304 	.word	0x20000304

08005e84 <_getpid_r>:
 8005e84:	f7fb b91a 	b.w	80010bc <_getpid>

08005e88 <_malloc_usable_size_r>:
 8005e88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e8c:	1f18      	subs	r0, r3, #4
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	bfbc      	itt	lt
 8005e92:	580b      	ldrlt	r3, [r1, r0]
 8005e94:	18c0      	addlt	r0, r0, r3
 8005e96:	4770      	bx	lr

08005e98 <__swhatbuf_r>:
 8005e98:	b570      	push	{r4, r5, r6, lr}
 8005e9a:	460c      	mov	r4, r1
 8005e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ea0:	2900      	cmp	r1, #0
 8005ea2:	b096      	sub	sp, #88	; 0x58
 8005ea4:	4615      	mov	r5, r2
 8005ea6:	461e      	mov	r6, r3
 8005ea8:	da0d      	bge.n	8005ec6 <__swhatbuf_r+0x2e>
 8005eaa:	89a3      	ldrh	r3, [r4, #12]
 8005eac:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005eb0:	f04f 0100 	mov.w	r1, #0
 8005eb4:	bf0c      	ite	eq
 8005eb6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005eba:	2340      	movne	r3, #64	; 0x40
 8005ebc:	2000      	movs	r0, #0
 8005ebe:	6031      	str	r1, [r6, #0]
 8005ec0:	602b      	str	r3, [r5, #0]
 8005ec2:	b016      	add	sp, #88	; 0x58
 8005ec4:	bd70      	pop	{r4, r5, r6, pc}
 8005ec6:	466a      	mov	r2, sp
 8005ec8:	f000 f848 	bl	8005f5c <_fstat_r>
 8005ecc:	2800      	cmp	r0, #0
 8005ece:	dbec      	blt.n	8005eaa <__swhatbuf_r+0x12>
 8005ed0:	9901      	ldr	r1, [sp, #4]
 8005ed2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005ed6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005eda:	4259      	negs	r1, r3
 8005edc:	4159      	adcs	r1, r3
 8005ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ee2:	e7eb      	b.n	8005ebc <__swhatbuf_r+0x24>

08005ee4 <__smakebuf_r>:
 8005ee4:	898b      	ldrh	r3, [r1, #12]
 8005ee6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ee8:	079d      	lsls	r5, r3, #30
 8005eea:	4606      	mov	r6, r0
 8005eec:	460c      	mov	r4, r1
 8005eee:	d507      	bpl.n	8005f00 <__smakebuf_r+0x1c>
 8005ef0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ef4:	6023      	str	r3, [r4, #0]
 8005ef6:	6123      	str	r3, [r4, #16]
 8005ef8:	2301      	movs	r3, #1
 8005efa:	6163      	str	r3, [r4, #20]
 8005efc:	b002      	add	sp, #8
 8005efe:	bd70      	pop	{r4, r5, r6, pc}
 8005f00:	ab01      	add	r3, sp, #4
 8005f02:	466a      	mov	r2, sp
 8005f04:	f7ff ffc8 	bl	8005e98 <__swhatbuf_r>
 8005f08:	9900      	ldr	r1, [sp, #0]
 8005f0a:	4605      	mov	r5, r0
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	f7ff f8fb 	bl	8005108 <_malloc_r>
 8005f12:	b948      	cbnz	r0, 8005f28 <__smakebuf_r+0x44>
 8005f14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f18:	059a      	lsls	r2, r3, #22
 8005f1a:	d4ef      	bmi.n	8005efc <__smakebuf_r+0x18>
 8005f1c:	f023 0303 	bic.w	r3, r3, #3
 8005f20:	f043 0302 	orr.w	r3, r3, #2
 8005f24:	81a3      	strh	r3, [r4, #12]
 8005f26:	e7e3      	b.n	8005ef0 <__smakebuf_r+0xc>
 8005f28:	89a3      	ldrh	r3, [r4, #12]
 8005f2a:	6020      	str	r0, [r4, #0]
 8005f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f30:	81a3      	strh	r3, [r4, #12]
 8005f32:	9b00      	ldr	r3, [sp, #0]
 8005f34:	6163      	str	r3, [r4, #20]
 8005f36:	9b01      	ldr	r3, [sp, #4]
 8005f38:	6120      	str	r0, [r4, #16]
 8005f3a:	b15b      	cbz	r3, 8005f54 <__smakebuf_r+0x70>
 8005f3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f40:	4630      	mov	r0, r6
 8005f42:	f000 f81d 	bl	8005f80 <_isatty_r>
 8005f46:	b128      	cbz	r0, 8005f54 <__smakebuf_r+0x70>
 8005f48:	89a3      	ldrh	r3, [r4, #12]
 8005f4a:	f023 0303 	bic.w	r3, r3, #3
 8005f4e:	f043 0301 	orr.w	r3, r3, #1
 8005f52:	81a3      	strh	r3, [r4, #12]
 8005f54:	89a3      	ldrh	r3, [r4, #12]
 8005f56:	431d      	orrs	r5, r3
 8005f58:	81a5      	strh	r5, [r4, #12]
 8005f5a:	e7cf      	b.n	8005efc <__smakebuf_r+0x18>

08005f5c <_fstat_r>:
 8005f5c:	b538      	push	{r3, r4, r5, lr}
 8005f5e:	4d07      	ldr	r5, [pc, #28]	; (8005f7c <_fstat_r+0x20>)
 8005f60:	2300      	movs	r3, #0
 8005f62:	4604      	mov	r4, r0
 8005f64:	4608      	mov	r0, r1
 8005f66:	4611      	mov	r1, r2
 8005f68:	602b      	str	r3, [r5, #0]
 8005f6a:	f7fb f90e 	bl	800118a <_fstat>
 8005f6e:	1c43      	adds	r3, r0, #1
 8005f70:	d102      	bne.n	8005f78 <_fstat_r+0x1c>
 8005f72:	682b      	ldr	r3, [r5, #0]
 8005f74:	b103      	cbz	r3, 8005f78 <_fstat_r+0x1c>
 8005f76:	6023      	str	r3, [r4, #0]
 8005f78:	bd38      	pop	{r3, r4, r5, pc}
 8005f7a:	bf00      	nop
 8005f7c:	20000304 	.word	0x20000304

08005f80 <_isatty_r>:
 8005f80:	b538      	push	{r3, r4, r5, lr}
 8005f82:	4d06      	ldr	r5, [pc, #24]	; (8005f9c <_isatty_r+0x1c>)
 8005f84:	2300      	movs	r3, #0
 8005f86:	4604      	mov	r4, r0
 8005f88:	4608      	mov	r0, r1
 8005f8a:	602b      	str	r3, [r5, #0]
 8005f8c:	f7fb f90d 	bl	80011aa <_isatty>
 8005f90:	1c43      	adds	r3, r0, #1
 8005f92:	d102      	bne.n	8005f9a <_isatty_r+0x1a>
 8005f94:	682b      	ldr	r3, [r5, #0]
 8005f96:	b103      	cbz	r3, 8005f9a <_isatty_r+0x1a>
 8005f98:	6023      	str	r3, [r4, #0]
 8005f9a:	bd38      	pop	{r3, r4, r5, pc}
 8005f9c:	20000304 	.word	0x20000304

08005fa0 <_init>:
 8005fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fa2:	bf00      	nop
 8005fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fa6:	bc08      	pop	{r3}
 8005fa8:	469e      	mov	lr, r3
 8005faa:	4770      	bx	lr

08005fac <_fini>:
 8005fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fae:	bf00      	nop
 8005fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fb2:	bc08      	pop	{r3}
 8005fb4:	469e      	mov	lr, r3
 8005fb6:	4770      	bx	lr
